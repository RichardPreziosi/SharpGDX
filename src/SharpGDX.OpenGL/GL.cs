using System.Reflection;
using System.Runtime.InteropServices;

namespace SharpGDX.OpenGL;

public static class GL
{
	private static IGetProcAddress? _getProcAddress;

    public const int GL_DONT_CARE = 0x1100;
    public const int GL_DEBUG_SEVERITY_HIGH = 0x9146;
    public const int GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
    public const int GL_DEBUG_SEVERITY_LOW = 0x9148;
    public const int GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;

    static GL()
	{
		foreach (var f in typeof(Functions).GetFields(BindingFlags.Static | BindingFlags.NonPublic))
		{
			f.SetValue(null, GetDelegate(f.Name, f.FieldType));
		}

		// TODO: rebuildExtensionList = true;
	}

	public static void DebugMessageCallback(DebugProc callback, IntPtr userParam)
	{
		Functions.glDebugMessageCallback(callback, userParam);
	}

	public static void glDebugMessageControl(int source, int type, int severity, int count, int[] ids, bool enabled)
	{
		unsafe
		{
			fixed (int* v_ptr = ids)
			{
				Functions.glDebugMessageControl((uint)source, (uint)type, (uint)severity, count,(int*)v_ptr, enabled);
			}
		}
	}

[System.CLSCompliant(false)]
        public static 
        void glNewList(UInt32 list, int mode)
        {
            Functions.glNewList((UInt32)list, (int)mode);
        }

        public static 
        void glNewList(Int32 list, int mode)
        {
            Functions.glNewList((UInt32)list, (int)mode);
        }

        public static 
        void glEndList()
        {
            Functions.glEndList();
        }

        [System.CLSCompliant(false)]
        public static 
        void glCallList(UInt32 list)
        {
            Functions.glCallList((UInt32)list);
        }

        public static 
        void glCallList(Int32 list)
        {
            Functions.glCallList((UInt32)list);
        }

        public static 
        void glCallLists(Int32 n, int type, IntPtr lists)
        {
            unsafe
            {
                Functions.glCallLists((Int32)n, (int)type, (IntPtr)lists);
            }
        }

        public static 
        void glCallLists(Int32 n, int type, [In, Out] object lists)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle lists_ptr = System.Runtime.InteropServices.GCHandle.Alloc(lists, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCallLists((Int32)n, (int)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    lists_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteLists(UInt32 list, Int32 range)
        {
            Functions.glDeleteLists((UInt32)list, (Int32)range);
        }

        public static 
        void glDeleteLists(Int32 list, Int32 range)
        {
            Functions.glDeleteLists((UInt32)list, (Int32)range);
        }

        public static 
        Int32 glGenLists(Int32 range)
        {
            return Functions.glGenLists((Int32)range);
        }

        [System.CLSCompliant(false)]
        public static 
        void glListBase(UInt32 @base)
        {
            Functions.glListBase((UInt32)@base);
        }

        public static 
        void glListBase(Int32 @base)
        {
            Functions.glListBase((UInt32)@base);
        }

        public static 
        void glBegin(int mode)
        {
            Functions.glBegin((int)mode);
        }

        public static 
        void glBitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte[] bitmap)
        {
            unsafe
            {
                fixed (Byte* bitmap_ptr = bitmap)
                {
                    Functions.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
        }

        public static 
        void glBitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, ref Byte bitmap)
        {
            unsafe
            {
                fixed (Byte* bitmap_ptr = &bitmap)
                {
                    Functions.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
        }

        public static 
        void glBitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, IntPtr bitmap)
        {
            unsafe
            {
                Functions.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3b(SByte red, SByte green, SByte blue)
        {
            Functions.glColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        public static 
        void glColor3b(Byte red, Byte green, Byte blue)
        {
            Functions.glColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3bv(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glColor3bv(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3bv(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glColor3bv(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glColor3bv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3bv((SByte*)v);
            }
        }

        public static 
        void glColor3d(Double red, Double green, Double blue)
        {
            Functions.glColor3d((Double)red, (Double)green, (Double)blue);
        }

        public static 
        void glColor3dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glColor3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glColor3dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glColor3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glColor3dv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3dv((Double*)v);
            }
        }

        public static 
        void glColor3f(Single red, Single green, Single blue)
        {
            Functions.glColor3f((Single)red, (Single)green, (Single)blue);
        }

        public static 
        void glColor3fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glColor3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor3fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glColor3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor3fv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3fv((Single*)v);
            }
        }

        public static 
        void glColor3i(Int32 red, Int32 green, Int32 blue)
        {
            Functions.glColor3i((Int32)red, (Int32)green, (Int32)blue);
        }

        public static 
        void glColor3iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glColor3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glColor3iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glColor3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glColor3iv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3iv((Int32*)v);
            }
        }

        public static 
        void glColor3s(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glColor3s((Int16)red, (Int16)green, (Int16)blue);
        }

        public static 
        void glColor3sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glColor3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glColor3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3sv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3sv((Int16*)v);
            }
        }

        public static 
        void glColor3ub(Byte red, Byte green, Byte blue)
        {
            Functions.glColor3ub((Byte)red, (Byte)green, (Byte)blue);
        }

        public static 
        void glColor3ubv(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glColor3ubv((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glColor3ubv(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glColor3ubv((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glColor3ubv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3ubv((Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3ui(UInt32 red, UInt32 green, UInt32 blue)
        {
            Functions.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        public static 
        void glColor3ui(Int32 red, Int32 green, Int32 blue)
        {
            Functions.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3uiv(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glColor3uiv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3uiv(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glColor3uiv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glColor3uiv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3uiv((UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3us(UInt16 red, UInt16 green, UInt16 blue)
        {
            Functions.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        public static 
        void glColor3us(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3usv(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3usv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3usv(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3usv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3usv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3usv((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4b(SByte red, SByte green, SByte blue, SByte alpha)
        {
            Functions.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
        }

        public static 
        void glColor4b(Byte red, Byte green, Byte blue, Byte alpha)
        {
            Functions.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4bv(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glColor4bv(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4bv(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glColor4bv(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glColor4bv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4bv((SByte*)v);
            }
        }

        public static 
        void glColor4d(Double red, Double green, Double blue, Double alpha)
        {
            Functions.glColor4d((Double)red, (Double)green, (Double)blue, (Double)alpha);
        }

        public static 
        void glColor4dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glColor4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glColor4dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glColor4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glColor4dv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4dv((Double*)v);
            }
        }

        public static 
        void glColor4f(Single red, Single green, Single blue, Single alpha)
        {
            Functions.glColor4f((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        public static 
        void glColor4fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glColor4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glColor4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4fv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4fv((Single*)v);
            }
        }

        public static 
        void glColor4i(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            Functions.glColor4i((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
        }

        public static 
        void glColor4iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glColor4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glColor4iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glColor4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glColor4iv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4iv((Int32*)v);
            }
        }

        public static 
        void glColor4s(Int16 red, Int16 green, Int16 blue, Int16 alpha)
        {
            Functions.glColor4s((Int16)red, (Int16)green, (Int16)blue, (Int16)alpha);
        }

        public static 
        void glColor4sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glColor4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glColor4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4sv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4sv((Int16*)v);
            }
        }

        public static 
        void glColor4ub(Byte red, Byte green, Byte blue, Byte alpha)
        {
            Functions.glColor4ub((Byte)red, (Byte)green, (Byte)blue, (Byte)alpha);
        }

        public static 
        void glColor4ubv(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glColor4ubv((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glColor4ubv(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glColor4ubv((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glColor4ubv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4ubv((Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4ui(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
        {
            Functions.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
        }

        public static 
        void glColor4ui(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            Functions.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4uiv(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glColor4uiv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4uiv(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glColor4uiv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glColor4uiv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4uiv((UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4us(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha)
        {
            Functions.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
        }

        public static 
        void glColor4us(Int16 red, Int16 green, Int16 blue, Int16 alpha)
        {
            Functions.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4usv(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4usv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4usv(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4usv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4usv(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4usv((UInt16*)v);
            }
        }

        public static 
        void glEdgeFlag(bool flag)
        {
            Functions.glEdgeFlag((bool)flag);
        }

        public static 
        void glEdgeFlagv(bool[] flag)
        {
            unsafe
            {
                fixed (bool* flag_ptr = flag)
                {
                    Functions.glEdgeFlagv((bool*)flag_ptr);
                }
            }
        }

        public static 
        void glEdgeFlagv(ref bool flag)
        {
            unsafe
            {
                fixed (bool* flag_ptr = &flag)
                {
                    Functions.glEdgeFlagv((bool*)flag_ptr);
                }
            }
        }

        public static 
        void glEdgeFlagv(IntPtr flag)
        {
            unsafe
            {
                Functions.glEdgeFlagv((bool*)flag);
            }
        }

        public static 
        void glEnd()
        {
            Functions.glEnd();
        }

        public static 
        void glIndexd(Double c)
        {
            Functions.glIndexd((Double)c);
        }

        public static 
        void glIndexdv(Double[] c)
        {
            unsafe
            {
                fixed (Double* c_ptr = c)
                {
                    Functions.glIndexdv((Double*)c_ptr);
                }
            }
        }

        public static 
        void glIndexdv(ref Double c)
        {
            unsafe
            {
                fixed (Double* c_ptr = &c)
                {
                    Functions.glIndexdv((Double*)c_ptr);
                }
            }
        }

        public static 
        void glIndexdv(IntPtr c)
        {
            unsafe
            {
                Functions.glIndexdv((Double*)c);
            }
        }

        public static 
        void glIndexf(Single c)
        {
            Functions.glIndexf((Single)c);
        }

        public static 
        void glIndexfv(Single[] c)
        {
            unsafe
            {
                fixed (Single* c_ptr = c)
                {
                    Functions.glIndexfv((Single*)c_ptr);
                }
            }
        }

        public static 
        void glIndexfv(ref Single c)
        {
            unsafe
            {
                fixed (Single* c_ptr = &c)
                {
                    Functions.glIndexfv((Single*)c_ptr);
                }
            }
        }

        public static 
        void glIndexfv(IntPtr c)
        {
            unsafe
            {
                Functions.glIndexfv((Single*)c);
            }
        }

        public static 
        void glIndexi(Int32 c)
        {
            Functions.glIndexi((Int32)c);
        }

        public static 
        void glIndexiv(Int32[] c)
        {
            unsafe
            {
                fixed (Int32* c_ptr = c)
                {
                    Functions.glIndexiv((Int32*)c_ptr);
                }
            }
        }

        public static 
        void glIndexiv(ref Int32 c)
        {
            unsafe
            {
                fixed (Int32* c_ptr = &c)
                {
                    Functions.glIndexiv((Int32*)c_ptr);
                }
            }
        }

        public static 
        void glIndexiv(IntPtr c)
        {
            unsafe
            {
                Functions.glIndexiv((Int32*)c);
            }
        }

        public static 
        void glIndexs(Int16 c)
        {
            Functions.glIndexs((Int16)c);
        }

        public static 
        void glIndexsv(Int16[] c)
        {
            unsafe
            {
                fixed (Int16* c_ptr = c)
                {
                    Functions.glIndexsv((Int16*)c_ptr);
                }
            }
        }

        public static 
        void glIndexsv(ref Int16 c)
        {
            unsafe
            {
                fixed (Int16* c_ptr = &c)
                {
                    Functions.glIndexsv((Int16*)c_ptr);
                }
            }
        }

        public static 
        void glIndexsv(IntPtr c)
        {
            unsafe
            {
                Functions.glIndexsv((Int16*)c);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormal3b(SByte nx, SByte ny, SByte nz)
        {
            Functions.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
        }

        public static 
        void glNormal3b(Byte nx, Byte ny, Byte nz)
        {
            Functions.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormal3bv(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3bv(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormal3bv(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3bv(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3bv(IntPtr v)
        {
            unsafe
            {
                Functions.glNormal3bv((SByte*)v);
            }
        }

        public static 
        void glNormal3d(Double nx, Double ny, Double nz)
        {
            Functions.glNormal3d((Double)nx, (Double)ny, (Double)nz);
        }

        public static 
        void glNormal3dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glNormal3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glNormal3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3dv(IntPtr v)
        {
            unsafe
            {
                Functions.glNormal3dv((Double*)v);
            }
        }

        public static 
        void glNormal3f(Single nx, Single ny, Single nz)
        {
            Functions.glNormal3f((Single)nx, (Single)ny, (Single)nz);
        }

        public static 
        void glNormal3fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glNormal3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glNormal3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3fv(IntPtr v)
        {
            unsafe
            {
                Functions.glNormal3fv((Single*)v);
            }
        }

        public static 
        void glNormal3i(Int32 nx, Int32 ny, Int32 nz)
        {
            Functions.glNormal3i((Int32)nx, (Int32)ny, (Int32)nz);
        }

        public static 
        void glNormal3iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glNormal3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glNormal3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3iv(IntPtr v)
        {
            unsafe
            {
                Functions.glNormal3iv((Int32*)v);
            }
        }

        public static 
        void glNormal3s(Int16 nx, Int16 ny, Int16 nz)
        {
            Functions.glNormal3s((Int16)nx, (Int16)ny, (Int16)nz);
        }

        public static 
        void glNormal3sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glNormal3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glNormal3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3sv(IntPtr v)
        {
            unsafe
            {
                Functions.glNormal3sv((Int16*)v);
            }
        }

        public static 
        void glRasterPos2d(Double x, Double y)
        {
            Functions.glRasterPos2d((Double)x, (Double)y);
        }

        public static 
        void glRasterPos2dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glRasterPos2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glRasterPos2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2dv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos2dv((Double*)v);
            }
        }

        public static 
        void glRasterPos2f(Single x, Single y)
        {
            Functions.glRasterPos2f((Single)x, (Single)y);
        }

        public static 
        void glRasterPos2fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glRasterPos2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glRasterPos2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2fv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos2fv((Single*)v);
            }
        }

        public static 
        void glRasterPos2i(Int32 x, Int32 y)
        {
            Functions.glRasterPos2i((Int32)x, (Int32)y);
        }

        public static 
        void glRasterPos2iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glRasterPos2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glRasterPos2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2iv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos2iv((Int32*)v);
            }
        }

        public static 
        void glRasterPos2s(Int16 x, Int16 y)
        {
            Functions.glRasterPos2s((Int16)x, (Int16)y);
        }

        public static 
        void glRasterPos2sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glRasterPos2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glRasterPos2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos2sv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos2sv((Int16*)v);
            }
        }

        public static 
        void glRasterPos3d(Double x, Double y, Double z)
        {
            Functions.glRasterPos3d((Double)x, (Double)y, (Double)z);
        }

        public static 
        void glRasterPos3dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glRasterPos3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glRasterPos3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3dv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos3dv((Double*)v);
            }
        }

        public static 
        void glRasterPos3f(Single x, Single y, Single z)
        {
            Functions.glRasterPos3f((Single)x, (Single)y, (Single)z);
        }

        public static 
        void glRasterPos3fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glRasterPos3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glRasterPos3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3fv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos3fv((Single*)v);
            }
        }

        public static 
        void glRasterPos3i(Int32 x, Int32 y, Int32 z)
        {
            Functions.glRasterPos3i((Int32)x, (Int32)y, (Int32)z);
        }

        public static 
        void glRasterPos3iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glRasterPos3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glRasterPos3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3iv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos3iv((Int32*)v);
            }
        }

        public static 
        void glRasterPos3s(Int16 x, Int16 y, Int16 z)
        {
            Functions.glRasterPos3s((Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glRasterPos3sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glRasterPos3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glRasterPos3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos3sv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos3sv((Int16*)v);
            }
        }

        public static 
        void glRasterPos4d(Double x, Double y, Double z, Double w)
        {
            Functions.glRasterPos4d((Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glRasterPos4dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glRasterPos4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glRasterPos4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4dv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos4dv((Double*)v);
            }
        }

        public static 
        void glRasterPos4f(Single x, Single y, Single z, Single w)
        {
            Functions.glRasterPos4f((Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glRasterPos4fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glRasterPos4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glRasterPos4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4fv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos4fv((Single*)v);
            }
        }

        public static 
        void glRasterPos4i(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glRasterPos4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        public static 
        void glRasterPos4iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glRasterPos4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glRasterPos4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4iv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos4iv((Int32*)v);
            }
        }

        public static 
        void glRasterPos4s(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glRasterPos4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        public static 
        void glRasterPos4sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glRasterPos4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glRasterPos4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glRasterPos4sv(IntPtr v)
        {
            unsafe
            {
                Functions.glRasterPos4sv((Int16*)v);
            }
        }

        public static 
        void glRectd(Double x1, Double y1, Double x2, Double y2)
        {
            Functions.glRectd((Double)x1, (Double)y1, (Double)x2, (Double)y2);
        }

        public static 
        void glRectdv(Double[] v1, Double[] v2)
        {
            unsafe
            {
                fixed (Double* v1_ptr = v1)
                fixed (Double* v2_ptr = v2)
                {
                    Functions.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
        }

        public static 
        void glRectdv(ref Double v1, ref Double v2)
        {
            unsafe
            {
                fixed (Double* v1_ptr = &v1)
                fixed (Double* v2_ptr = &v2)
                {
                    Functions.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
        }

        public static 
        void glRectdv(IntPtr v1, IntPtr v2)
        {
            unsafe
            {
                Functions.glRectdv((Double*)v1, (Double*)v2);
            }
        }

        public static 
        void glRectf(Single x1, Single y1, Single x2, Single y2)
        {
            Functions.glRectf((Single)x1, (Single)y1, (Single)x2, (Single)y2);
        }

        public static 
        void glRectfv(Single[] v1, Single[] v2)
        {
            unsafe
            {
                fixed (Single* v1_ptr = v1)
                fixed (Single* v2_ptr = v2)
                {
                    Functions.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
        }

        public static 
        void glRectfv(ref Single v1, ref Single v2)
        {
            unsafe
            {
                fixed (Single* v1_ptr = &v1)
                fixed (Single* v2_ptr = &v2)
                {
                    Functions.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
        }

        public static 
        void glRectfv(IntPtr v1, IntPtr v2)
        {
            unsafe
            {
                Functions.glRectfv((Single*)v1, (Single*)v2);
            }
        }

        public static 
        void glRecti(Int32 x1, Int32 y1, Int32 x2, Int32 y2)
        {
            Functions.glRecti((Int32)x1, (Int32)y1, (Int32)x2, (Int32)y2);
        }

        public static 
        void glRectiv(Int32[] v1, Int32[] v2)
        {
            unsafe
            {
                fixed (Int32* v1_ptr = v1)
                fixed (Int32* v2_ptr = v2)
                {
                    Functions.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
        }

        public static 
        void glRectiv(ref Int32 v1, ref Int32 v2)
        {
            unsafe
            {
                fixed (Int32* v1_ptr = &v1)
                fixed (Int32* v2_ptr = &v2)
                {
                    Functions.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
        }

        public static 
        void glRectiv(IntPtr v1, IntPtr v2)
        {
            unsafe
            {
                Functions.glRectiv((Int32*)v1, (Int32*)v2);
            }
        }

        public static 
        void glRects(Int16 x1, Int16 y1, Int16 x2, Int16 y2)
        {
            Functions.glRects((Int16)x1, (Int16)y1, (Int16)x2, (Int16)y2);
        }

        public static 
        void glRectsv(Int16[] v1, Int16[] v2)
        {
            unsafe
            {
                fixed (Int16* v1_ptr = v1)
                fixed (Int16* v2_ptr = v2)
                {
                    Functions.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
        }

        public static 
        void glRectsv(ref Int16 v1, ref Int16 v2)
        {
            unsafe
            {
                fixed (Int16* v1_ptr = &v1)
                fixed (Int16* v2_ptr = &v2)
                {
                    Functions.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
        }

        public static 
        void glRectsv(IntPtr v1, IntPtr v2)
        {
            unsafe
            {
                Functions.glRectsv((Int16*)v1, (Int16*)v2);
            }
        }

        public static 
        void glTexCoord1d(Double s)
        {
            Functions.glTexCoord1d((Double)s);
        }

        public static 
        void glTexCoord1dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glTexCoord1dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glTexCoord1dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1dv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord1dv((Double*)v);
            }
        }

        public static 
        void glTexCoord1f(Single s)
        {
            Functions.glTexCoord1f((Single)s);
        }

        public static 
        void glTexCoord1fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord1fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord1fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1fv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord1fv((Single*)v);
            }
        }

        public static 
        void glTexCoord1i(Int32 s)
        {
            Functions.glTexCoord1i((Int32)s);
        }

        public static 
        void glTexCoord1iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glTexCoord1iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glTexCoord1iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1iv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord1iv((Int32*)v);
            }
        }

        public static 
        void glTexCoord1s(Int16 s)
        {
            Functions.glTexCoord1s((Int16)s);
        }

        public static 
        void glTexCoord1sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord1sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord1sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1sv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord1sv((Int16*)v);
            }
        }

        public static 
        void glTexCoord2d(Double s, Double t)
        {
            Functions.glTexCoord2d((Double)s, (Double)t);
        }

        public static 
        void glTexCoord2dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glTexCoord2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glTexCoord2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2dv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2dv((Double*)v);
            }
        }

        public static 
        void glTexCoord2f(Single s, Single t)
        {
            Functions.glTexCoord2f((Single)s, (Single)t);
        }

        public static 
        void glTexCoord2fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2fv((Single*)v);
            }
        }

        public static 
        void glTexCoord2i(Int32 s, Int32 t)
        {
            Functions.glTexCoord2i((Int32)s, (Int32)t);
        }

        public static 
        void glTexCoord2iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glTexCoord2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glTexCoord2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2iv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2iv((Int32*)v);
            }
        }

        public static 
        void glTexCoord2s(Int16 s, Int16 t)
        {
            Functions.glTexCoord2s((Int16)s, (Int16)t);
        }

        public static 
        void glTexCoord2sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2sv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2sv((Int16*)v);
            }
        }

        public static 
        void glTexCoord3d(Double s, Double t, Double r)
        {
            Functions.glTexCoord3d((Double)s, (Double)t, (Double)r);
        }

        public static 
        void glTexCoord3dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glTexCoord3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glTexCoord3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3dv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord3dv((Double*)v);
            }
        }

        public static 
        void glTexCoord3f(Single s, Single t, Single r)
        {
            Functions.glTexCoord3f((Single)s, (Single)t, (Single)r);
        }

        public static 
        void glTexCoord3fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3fv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord3fv((Single*)v);
            }
        }

        public static 
        void glTexCoord3i(Int32 s, Int32 t, Int32 r)
        {
            Functions.glTexCoord3i((Int32)s, (Int32)t, (Int32)r);
        }

        public static 
        void glTexCoord3iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glTexCoord3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glTexCoord3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3iv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord3iv((Int32*)v);
            }
        }

        public static 
        void glTexCoord3s(Int16 s, Int16 t, Int16 r)
        {
            Functions.glTexCoord3s((Int16)s, (Int16)t, (Int16)r);
        }

        public static 
        void glTexCoord3sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3sv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord3sv((Int16*)v);
            }
        }

        public static 
        void glTexCoord4d(Double s, Double t, Double r, Double q)
        {
            Functions.glTexCoord4d((Double)s, (Double)t, (Double)r, (Double)q);
        }

        public static 
        void glTexCoord4dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glTexCoord4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glTexCoord4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4dv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord4dv((Double*)v);
            }
        }

        public static 
        void glTexCoord4f(Single s, Single t, Single r, Single q)
        {
            Functions.glTexCoord4f((Single)s, (Single)t, (Single)r, (Single)q);
        }

        public static 
        void glTexCoord4fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4fv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord4fv((Single*)v);
            }
        }

        public static 
        void glTexCoord4i(Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Functions.glTexCoord4i((Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        public static 
        void glTexCoord4iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glTexCoord4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glTexCoord4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4iv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord4iv((Int32*)v);
            }
        }

        public static 
        void glTexCoord4s(Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Functions.glTexCoord4s((Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        public static 
        void glTexCoord4sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4sv(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord4sv((Int16*)v);
            }
        }

        public static 
        void glVertex2d(Double x, Double y)
        {
            Functions.glVertex2d((Double)x, (Double)y);
        }

        public static 
        void glVertex2dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertex2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertex2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2dv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex2dv((Double*)v);
            }
        }

        public static 
        void glVertex2f(Single x, Single y)
        {
            Functions.glVertex2f((Single)x, (Single)y);
        }

        public static 
        void glVertex2fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertex2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertex2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2fv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex2fv((Single*)v);
            }
        }

        public static 
        void glVertex2i(Int32 x, Int32 y)
        {
            Functions.glVertex2i((Int32)x, (Int32)y);
        }

        public static 
        void glVertex2iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertex2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertex2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2iv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex2iv((Int32*)v);
            }
        }

        public static 
        void glVertex2s(Int16 x, Int16 y)
        {
            Functions.glVertex2s((Int16)x, (Int16)y);
        }

        public static 
        void glVertex2sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertex2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertex2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2sv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex2sv((Int16*)v);
            }
        }

        public static 
        void glVertex3d(Double x, Double y, Double z)
        {
            Functions.glVertex3d((Double)x, (Double)y, (Double)z);
        }

        public static 
        void glVertex3dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertex3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertex3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3dv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex3dv((Double*)v);
            }
        }

        public static 
        void glVertex3f(Single x, Single y, Single z)
        {
            Functions.glVertex3f((Single)x, (Single)y, (Single)z);
        }

        public static 
        void glVertex3fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertex3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertex3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3fv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex3fv((Single*)v);
            }
        }

        public static 
        void glVertex3i(Int32 x, Int32 y, Int32 z)
        {
            Functions.glVertex3i((Int32)x, (Int32)y, (Int32)z);
        }

        public static 
        void glVertex3iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertex3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertex3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3iv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex3iv((Int32*)v);
            }
        }

        public static 
        void glVertex3s(Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertex3s((Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glVertex3sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertex3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertex3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3sv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex3sv((Int16*)v);
            }
        }

        public static 
        void glVertex4d(Double x, Double y, Double z, Double w)
        {
            Functions.glVertex4d((Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glVertex4dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertex4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertex4dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4dv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex4dv((Double*)v);
            }
        }

        public static 
        void glVertex4f(Single x, Single y, Single z, Single w)
        {
            Functions.glVertex4f((Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glVertex4fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertex4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertex4fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4fv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex4fv((Single*)v);
            }
        }

        public static 
        void glVertex4i(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glVertex4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        public static 
        void glVertex4iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertex4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertex4iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4iv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex4iv((Int32*)v);
            }
        }

        public static 
        void glVertex4s(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertex4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        public static 
        void glVertex4sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertex4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertex4sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4sv(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex4sv((Int16*)v);
            }
        }

        public static 
        void glClipPlane(int plane, Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Functions.glClipPlane((int)plane, (Double*)equation_ptr);
                }
            }
        }

        public static 
        void glClipPlane(int plane, ref Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Functions.glClipPlane((int)plane, (Double*)equation_ptr);
                }
            }
        }

        public static 
        void glClipPlane(int plane, IntPtr equation)
        {
            unsafe
            {
                Functions.glClipPlane((int)plane, (Double*)equation);
            }
        }

        public static 
        void glColorMaterial(int face, int mode)
        {
            Functions.glColorMaterial((int)face, (int)mode);
        }

        public static 
        void glCullFace(int mode)
        {
            Functions.glCullFace((int)mode);
        }

        public static 
        void glFogf(int pname, Single param)
        {
            Functions.glFogf((int)pname, (Single)param);
        }

        public static 
        void glFogfv(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glFogfv((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFogfv(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glFogfv((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFogfv(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFogfv((int)pname, (Single*)@params);
            }
        }

        public static 
        void glFogi(int pname, Int32 param)
        {
            Functions.glFogi((int)pname, (Int32)param);
        }

        public static 
        void glFogiv(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glFogiv((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFogiv(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glFogiv((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFogiv(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFogiv((int)pname, (Int32*)@params);
            }
        }

        public static 
        void glFrontFace(int mode)
        {
            Functions.glFrontFace((int)mode);
        }

        public static 
        void glHint(int target, int mode)
        {
            Functions.glHint((int)target, (int)mode);
        }

        public static 
        void glLightf(int light, int pname, Single param)
        {
            Functions.glLightf((int)light, (int)pname, (Single)param);
        }

        public static 
        void glLightfv(int light, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glLightfv((int)light, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glLightfv(int light, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glLightfv((int)light, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glLightfv(int light, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glLightfv((int)light, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glLighti(int light, int pname, Int32 param)
        {
            Functions.glLighti((int)light, (int)pname, (Int32)param);
        }

        public static 
        void glLightiv(int light, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glLightiv((int)light, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glLightiv(int light, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glLightiv((int)light, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glLightiv(int light, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glLightiv((int)light, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glLightModelf(int pname, Single param)
        {
            Functions.glLightModelf((int)pname, (Single)param);
        }

        public static 
        void glLightModelfv(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glLightModelfv((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glLightModelfv(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glLightModelfv((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glLightModelfv(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glLightModelfv((int)pname, (Single*)@params);
            }
        }

        public static 
        void glLightModeli(int pname, Int32 param)
        {
            Functions.glLightModeli((int)pname, (Int32)param);
        }

        public static 
        void glLightModeliv(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glLightModeliv((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glLightModeliv(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glLightModeliv((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glLightModeliv(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glLightModeliv((int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glLineStipple(Int32 factor, UInt16 pattern)
        {
            unsafe
            {
                Functions.glLineStipple((Int32)factor, (UInt16)pattern);
            }
        }

        public static 
        void glLineStipple(Int32 factor, Int16 pattern)
        {
            unsafe
            {
                Functions.glLineStipple((Int32)factor, (UInt16)pattern);
            }
        }

        public static 
        void glLineWidth(Single width)
        {
            Functions.glLineWidth((Single)width);
        }

        public static 
        void glMaterialf(int face, int pname, Single param)
        {
            Functions.glMaterialf((int)face, (int)pname, (Single)param);
        }

        public static 
        void glMaterialfv(int face, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glMaterialfv(int face, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glMaterialfv(int face, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glMaterialfv((int)face, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glMateriali(int face, int pname, Int32 param)
        {
            Functions.glMateriali((int)face, (int)pname, (Int32)param);
        }

        public static 
        void glMaterialiv(int face, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glMaterialiv(int face, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glMaterialiv(int face, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glMaterialiv((int)face, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glPointSize(Single size)
        {
            Functions.glPointSize((Single)size);
        }

        public static 
        void glPolygonMode(int face, int mode)
        {
            Functions.glPolygonMode((int)face, (int)mode);
        }

        public static 
        void glPolygonStipple(Byte[] mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Functions.glPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        public static 
        void glPolygonStipple(ref Byte mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Functions.glPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        public static 
        void glPolygonStipple(IntPtr mask)
        {
            unsafe
            {
                Functions.glPolygonStipple((Byte*)mask);
            }
        }

        public static 
        void glScissor(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glShadeModel(int mode)
        {
            Functions.glShadeModel((int)mode);
        }

        public static 
        void glTexParameterf(int target, int pname, Single param)
        {
            Functions.glTexParameterf((int)target, (int)pname, (Single)param);
        }

        public static 
        void glTexParameterfv(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameterfv(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameterfv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glTexParameteri(int target, int pname, Int32 param)
        {
            Functions.glTexParameteri((int)target, (int)pname, (Int32)param);
        }

        public static 
        void glTexParameteriv(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameteriv(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameteriv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glTexImage1D(int target, Int32 level, Int32 internalformat, Int32 width, Int32 border, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexImage1D((int)target, (Int32)level, (Int32)internalformat, (Int32)width, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexImage1D(int target, Int32 level, Int32 internalformat, Int32 width, Int32 border, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexImage1D((int)target, (Int32)level, (Int32)internalformat, (Int32)width, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexImage2D(int target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexImage2D((int)target, (Int32)level, (Int32)internalformat, (Int32)width, (Int32)height, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexImage2D(int target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexImage2D((int)target, (Int32)level, (Int32)internalformat, (Int32)width, (Int32)height, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexEnvf(int target, int pname, Single param)
        {
            Functions.glTexEnvf((int)target, (int)pname, (Single)param);
        }

        public static 
        void glTexEnvfv(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glTexEnvfv(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glTexEnvfv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexEnvfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glTexEnvi(int target, int pname, Int32 param)
        {
            Functions.glTexEnvi((int)target, (int)pname, (Int32)param);
        }

        public static 
        void glTexEnviv(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexEnviv(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexEnviv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexEnviv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glTexGend(int coord, int pname, Double param)
        {
            Functions.glTexGend((int)coord, (int)pname, (Double)param);
        }

        public static 
        void glTexGendv(int coord, int pname, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glTexGendv(int coord, int pname, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glTexGendv(int coord, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexGendv((int)coord, (int)pname, (Double*)@params);
            }
        }

        public static 
        void glTexGenf(int coord, int pname, Single param)
        {
            Functions.glTexGenf((int)coord, (int)pname, (Single)param);
        }

        public static 
        void glTexGenfv(int coord, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glTexGenfv(int coord, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glTexGenfv(int coord, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexGenfv((int)coord, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glTexGeni(int coord, int pname, Int32 param)
        {
            Functions.glTexGeni((int)coord, (int)pname, (Int32)param);
        }

        public static 
        void glTexGeniv(int coord, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexGeniv(int coord, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexGeniv(int coord, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexGeniv((int)coord, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glFeedbackBuffer(Int32 size, int type, [Out] Single[] buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = buffer)
                {
                    Functions.glFeedbackBuffer((Int32)size, (int)type, (Single*)buffer_ptr);
                }
            }
        }

        public static 
        void glFeedbackBuffer(Int32 size, int type, [Out] out Single buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = &buffer)
                {
                    Functions.glFeedbackBuffer((Int32)size, (int)type, (Single*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        public static 
        void glFeedbackBuffer(Int32 size, int type, [Out] IntPtr buffer)
        {
            unsafe
            {
                Functions.glFeedbackBuffer((Int32)size, (int)type, (Single*)buffer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSelectBuffer(Int32 size, [Out] UInt32[] buffer)
        {
            unsafe
            {
                fixed (UInt32* buffer_ptr = buffer)
                {
                    Functions.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
        }

        public static 
        void glSelectBuffer(Int32 size, [Out] Int32[] buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = buffer)
                {
                    Functions.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSelectBuffer(Int32 size, [Out] out UInt32 buffer)
        {
            unsafe
            {
                fixed (UInt32* buffer_ptr = &buffer)
                {
                    Functions.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        public static 
        void glSelectBuffer(Int32 size, [Out] out Int32 buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = &buffer)
                {
                    Functions.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        public static 
        void glSelectBuffer(Int32 size, [Out] IntPtr buffer)
        {
            unsafe
            {
                Functions.glSelectBuffer((Int32)size, (UInt32*)buffer);
            }
        }

        public static 
        Int32 glRenderMode(int mode)
        {
            return Functions.glRenderMode((int)mode);
        }

        public static 
        void glInitNames()
        {
            Functions.glInitNames();
        }

        [System.CLSCompliant(false)]
        public static 
        void glLoadName(UInt32 name)
        {
            Functions.glLoadName((UInt32)name);
        }

        public static 
        void glLoadName(Int32 name)
        {
            Functions.glLoadName((UInt32)name);
        }

        public static 
        void glPassThrough(Single token)
        {
            Functions.glPassThrough((Single)token);
        }

        public static 
        void glPopName()
        {
            Functions.glPopName();
        }

        [System.CLSCompliant(false)]
        public static 
        void glPushName(UInt32 name)
        {
            Functions.glPushName((UInt32)name);
        }

        public static 
        void glPushName(Int32 name)
        {
            Functions.glPushName((UInt32)name);
        }

        public static 
        void glDrawBuffer(int mode)
        {
            Functions.glDrawBuffer((int)mode);
        }

        public static 
        void glClear(int mask)
        {
            Functions.glClear((int)mask);
        }

        public static 
        void glClearAccum(Single red, Single green, Single blue, Single alpha)
        {
            Functions.glClearAccum((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        public static 
        void glClearIndex(Single c)
        {
            Functions.glClearIndex((Single)c);
        }

        public static 
        void glClearColor(Single red, Single green, Single blue, Single alpha)
        {
            Functions.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        public static 
        void glClearStencil(Int32 s)
        {
            Functions.glClearStencil((Int32)s);
        }

        public static 
        void glClearDepth(Double depth)
        {
            Functions.glClearDepth((Double)depth);
        }

        [System.CLSCompliant(false)]
        public static 
        void glStencilMask(UInt32 mask)
        {
            Functions.glStencilMask((UInt32)mask);
        }

        public static 
        void glStencilMask(Int32 mask)
        {
            Functions.glStencilMask((UInt32)mask);
        }

        public static 
        void glColorMask(bool red, bool green, bool blue, bool alpha)
        {
            Functions.glColorMask((bool)red, (bool)green, (bool)blue, (bool)alpha);
        }

        public static 
        void glDepthMask(bool flag)
        {
            Functions.glDepthMask((bool)flag);
        }

        [System.CLSCompliant(false)]
        public static 
        void glIndexMask(UInt32 mask)
        {
            Functions.glIndexMask((UInt32)mask);
        }

        public static 
        void glIndexMask(Int32 mask)
        {
            Functions.glIndexMask((UInt32)mask);
        }

        public static 
        void glAccum(int op, Single value)
        {
            Functions.glAccum((int)op, (Single)value);
        }

        public static 
        void glDisable(int cap)
        {
            Functions.glDisable((int)cap);
        }

        public static 
        void glEnable(int cap)
        {
            Functions.glEnable((int)cap);
        }

        public static 
        void glFinish()
        {
            Functions.glFinish();
        }

        public static 
        void glFlush()
        {
            Functions.glFlush();
        }

        public static 
        void glPopAttrib()
        {
            Functions.glPopAttrib();
        }

        public static 
        void glPushAttrib(int mask)
        {
            Functions.glPushAttrib((int)mask);
        }

        public static 
        void glMap1d(int target, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Functions.glMap1d((int)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        public static 
        void glMap1d(int target, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Functions.glMap1d((int)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        public static 
        void glMap1d(int target, Double u1, Double u2, Int32 stride, Int32 order, IntPtr points)
        {
            unsafe
            {
                Functions.glMap1d((int)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
            }
        }

        public static 
        void glMap1f(int target, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glMap1f((int)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glMap1f(int target, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glMap1f((int)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glMap1f(int target, Single u1, Single u2, Int32 stride, Int32 order, IntPtr points)
        {
            unsafe
            {
                Functions.glMap1f((int)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
            }
        }

        public static 
        void glMap2d(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Functions.glMap2d((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        public static 
        void glMap2d(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Functions.glMap2d((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        public static 
        void glMap2d(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, IntPtr points)
        {
            unsafe
            {
                Functions.glMap2d((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
            }
        }

        public static 
        void glMap2f(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glMap2f((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glMap2f(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glMap2f((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glMap2f(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, IntPtr points)
        {
            unsafe
            {
                Functions.glMap2f((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
            }
        }

        public static 
        void glMapGrid1d(Int32 un, Double u1, Double u2)
        {
            Functions.glMapGrid1d((Int32)un, (Double)u1, (Double)u2);
        }

        public static 
        void glMapGrid1f(Int32 un, Single u1, Single u2)
        {
            Functions.glMapGrid1f((Int32)un, (Single)u1, (Single)u2);
        }

        public static 
        void glMapGrid2d(Int32 un, Double u1, Double u2, Int32 vn, Double v1, Double v2)
        {
            Functions.glMapGrid2d((Int32)un, (Double)u1, (Double)u2, (Int32)vn, (Double)v1, (Double)v2);
        }

        public static 
        void glMapGrid2f(Int32 un, Single u1, Single u2, Int32 vn, Single v1, Single v2)
        {
            Functions.glMapGrid2f((Int32)un, (Single)u1, (Single)u2, (Int32)vn, (Single)v1, (Single)v2);
        }

        public static 
        void glEvalCoord1d(Double u)
        {
            Functions.glEvalCoord1d((Double)u);
        }

        public static 
        void glEvalCoord1dv(Double[] u)
        {
            unsafe
            {
                fixed (Double* u_ptr = u)
                {
                    Functions.glEvalCoord1dv((Double*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord1dv(ref Double u)
        {
            unsafe
            {
                fixed (Double* u_ptr = &u)
                {
                    Functions.glEvalCoord1dv((Double*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord1dv(IntPtr u)
        {
            unsafe
            {
                Functions.glEvalCoord1dv((Double*)u);
            }
        }

        public static 
        void glEvalCoord1f(Single u)
        {
            Functions.glEvalCoord1f((Single)u);
        }

        public static 
        void glEvalCoord1fv(Single[] u)
        {
            unsafe
            {
                fixed (Single* u_ptr = u)
                {
                    Functions.glEvalCoord1fv((Single*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord1fv(ref Single u)
        {
            unsafe
            {
                fixed (Single* u_ptr = &u)
                {
                    Functions.glEvalCoord1fv((Single*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord1fv(IntPtr u)
        {
            unsafe
            {
                Functions.glEvalCoord1fv((Single*)u);
            }
        }

        public static 
        void glEvalCoord2d(Double u, Double v)
        {
            Functions.glEvalCoord2d((Double)u, (Double)v);
        }

        public static 
        void glEvalCoord2dv(Double[] u)
        {
            unsafe
            {
                fixed (Double* u_ptr = u)
                {
                    Functions.glEvalCoord2dv((Double*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord2dv(ref Double u)
        {
            unsafe
            {
                fixed (Double* u_ptr = &u)
                {
                    Functions.glEvalCoord2dv((Double*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord2dv(IntPtr u)
        {
            unsafe
            {
                Functions.glEvalCoord2dv((Double*)u);
            }
        }

        public static 
        void glEvalCoord2f(Single u, Single v)
        {
            Functions.glEvalCoord2f((Single)u, (Single)v);
        }

        public static 
        void glEvalCoord2fv(Single[] u)
        {
            unsafe
            {
                fixed (Single* u_ptr = u)
                {
                    Functions.glEvalCoord2fv((Single*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord2fv(ref Single u)
        {
            unsafe
            {
                fixed (Single* u_ptr = &u)
                {
                    Functions.glEvalCoord2fv((Single*)u_ptr);
                }
            }
        }

        public static 
        void glEvalCoord2fv(IntPtr u)
        {
            unsafe
            {
                Functions.glEvalCoord2fv((Single*)u);
            }
        }

        public static 
        void glEvalMesh1(int mode, Int32 i1, Int32 i2)
        {
            Functions.glEvalMesh1((int)mode, (Int32)i1, (Int32)i2);
        }

        public static 
        void glEvalPoint1(Int32 i)
        {
            Functions.glEvalPoint1((Int32)i);
        }

        public static 
        void glEvalMesh2(int mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2)
        {
            Functions.glEvalMesh2((int)mode, (Int32)i1, (Int32)i2, (Int32)j1, (Int32)j2);
        }

        public static 
        void glEvalPoint2(Int32 i, Int32 j)
        {
            Functions.glEvalPoint2((Int32)i, (Int32)j);
        }

        public static 
        void glAlphaFunc(int func, Single @ref)
        {
            Functions.glAlphaFunc((int)func, (Single)@ref);
        }

        public static 
        void glBlendFunc(int sfactor, int dfactor)
        {
            Functions.glBlendFunc((int)sfactor, (int)dfactor);
        }

        public static 
        void glLogicOp(int opcode)
        {
            Functions.glLogicOp((int)opcode);
        }

        [System.CLSCompliant(false)]
        public static 
        void glStencilFunc(int func, Int32 @ref, UInt32 mask)
        {
            Functions.glStencilFunc((int)func, (Int32)@ref, (UInt32)mask);
        }

        public static 
        void glStencilFunc(int func, Int32 @ref, Int32 mask)
        {
            Functions.glStencilFunc((int)func, (Int32)@ref, (UInt32)mask);
        }

        public static 
        void glStencilOp(int fail, int zfail, int zpass)
        {
            Functions.glStencilOp((int)fail, (int)zfail, (int)zpass);
        }

        public static 
        void glDepthFunc(int func)
        {
            Functions.glDepthFunc((int)func);
        }

        public static 
        void glPixelZoom(Single xfactor, Single yfactor)
        {
            Functions.glPixelZoom((Single)xfactor, (Single)yfactor);
        }

        public static 
        void glPixelTransferf(int pname, Single param)
        {
            Functions.glPixelTransferf((int)pname, (Single)param);
        }

        public static 
        void glPixelTransferi(int pname, Int32 param)
        {
            Functions.glPixelTransferi((int)pname, (Int32)param);
        }

        public static 
        void glPixelStoref(int pname, Single param)
        {
            Functions.glPixelStoref((int)pname, (Single)param);
        }

        public static 
        void glPixelStorei(int pname, Int32 param)
        {
            Functions.glPixelStorei((int)pname, (Int32)param);
        }

        public static 
        void glPixelMapfv(int map, Int32 mapsize, Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Functions.glPixelMapfv((int)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapfv(int map, Int32 mapsize, ref Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Functions.glPixelMapfv((int)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapfv(int map, Int32 mapsize, IntPtr values)
        {
            unsafe
            {
                Functions.glPixelMapfv((int)map, (Int32)mapsize, (Single*)values);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glPixelMapuiv(int map, Int32 mapsize, UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Functions.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapuiv(int map, Int32 mapsize, Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Functions.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glPixelMapuiv(int map, Int32 mapsize, ref UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Functions.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapuiv(int map, Int32 mapsize, ref Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Functions.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapuiv(int map, Int32 mapsize, IntPtr values)
        {
            unsafe
            {
                Functions.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glPixelMapusv(int map, Int32 mapsize, UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Functions.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapusv(int map, Int32 mapsize, Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Functions.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glPixelMapusv(int map, Int32 mapsize, ref UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Functions.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapusv(int map, Int32 mapsize, ref Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Functions.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        public static 
        void glPixelMapusv(int map, Int32 mapsize, IntPtr values)
        {
            unsafe
            {
                Functions.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values);
            }
        }

        public static 
        void glReadBuffer(int mode)
        {
            Functions.glReadBuffer((int)mode);
        }

        public static 
        void glCopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, int type)
        {
            Functions.glCopyPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (int)type);
        }

        public static 
        void glReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, int format, int type, [Out] IntPtr pixels)
        {
            unsafe
            {
                Functions.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glDrawPixels(Int32 width, Int32 height, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glDrawPixels((Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glDrawPixels(Int32 width, Int32 height, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glDrawPixels((Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glGetBooleanv(int pname, [Out] bool[] @params)
        {
            unsafe
            {
                fixed (bool* @params_ptr = @params)
                {
                    Functions.glGetBooleanv((int)pname, (bool*)@params_ptr);
                }
            }
        }

        public static 
        void glGetBooleanv(int pname, [Out] out bool @params)
        {
            unsafe
            {
                fixed (bool* @params_ptr = &@params)
                {
                    Functions.glGetBooleanv((int)pname, (bool*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetBooleanv(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetBooleanv((int)pname, (bool*)@params);
            }
        }

        public static 
        void glGetClipPlane(int plane, [Out] Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Functions.glGetClipPlane((int)plane, (Double*)equation_ptr);
                }
            }
        }

        public static 
        void glGetClipPlane(int plane, [Out] out Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Functions.glGetClipPlane((int)plane, (Double*)equation_ptr);
                    equation = *equation_ptr;
                }
            }
        }

        public static 
        void glGetClipPlane(int plane, [Out] IntPtr equation)
        {
            unsafe
            {
                Functions.glGetClipPlane((int)plane, (Double*)equation);
            }
        }

        public static 
        void glGetDoublev(int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetDoublev((int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetDoublev(int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetDoublev((int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetDoublev(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetDoublev((int)pname, (Double*)@params);
            }
        }

        public static 
        int glGetError()
        {
            return Functions.glGetError();
        }

        public static 
        void glGetFloatv(int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetFloatv((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFloatv(int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetFloatv((int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFloatv(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFloatv((int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetIntegerv(int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetIntegerv((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetIntegerv(int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetIntegerv((int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetIntegerv(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetIntegerv((int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetLightfv(int light, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetLightfv((int)light, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetLightfv(int light, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetLightfv((int)light, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetLightfv(int light, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetLightfv((int)light, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetLightiv(int light, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetLightiv((int)light, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetLightiv(int light, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetLightiv((int)light, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetLightiv(int light, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetLightiv((int)light, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetMapdv(int target, int query, [Out] Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glGetMapdv((int)target, (int)query, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glGetMapdv(int target, int query, [Out] out Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glGetMapdv((int)target, (int)query, (Double*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        public static 
        void glGetMapdv(int target, int query, [Out] IntPtr v)
        {
            unsafe
            {
                Functions.glGetMapdv((int)target, (int)query, (Double*)v);
            }
        }

        public static 
        void glGetMapfv(int target, int query, [Out] Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glGetMapfv((int)target, (int)query, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glGetMapfv(int target, int query, [Out] out Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glGetMapfv((int)target, (int)query, (Single*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        public static 
        void glGetMapfv(int target, int query, [Out] IntPtr v)
        {
            unsafe
            {
                Functions.glGetMapfv((int)target, (int)query, (Single*)v);
            }
        }

        public static 
        void glGetMapiv(int target, int query, [Out] Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glGetMapiv((int)target, (int)query, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glGetMapiv(int target, int query, [Out] out Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glGetMapiv((int)target, (int)query, (Int32*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        public static 
        void glGetMapiv(int target, int query, [Out] IntPtr v)
        {
            unsafe
            {
                Functions.glGetMapiv((int)target, (int)query, (Int32*)v);
            }
        }

        public static 
        void glGetMaterialfv(int face, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMaterialfv(int face, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMaterialfv(int face, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMaterialfv((int)face, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetMaterialiv(int face, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMaterialiv(int face, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMaterialiv(int face, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMaterialiv((int)face, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetPixelMapfv(int map, [Out] Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Functions.glGetPixelMapfv((int)map, (Single*)values_ptr);
                }
            }
        }

        public static 
        void glGetPixelMapfv(int map, [Out] out Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Functions.glGetPixelMapfv((int)map, (Single*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        public static 
        void glGetPixelMapfv(int map, [Out] IntPtr values)
        {
            unsafe
            {
                Functions.glGetPixelMapfv((int)map, (Single*)values);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetPixelMapuiv(int map, [Out] UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Functions.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
                }
            }
        }

        public static 
        void glGetPixelMapuiv(int map, [Out] Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Functions.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetPixelMapuiv(int map, [Out] out UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Functions.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        public static 
        void glGetPixelMapuiv(int map, [Out] out Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Functions.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        public static 
        void glGetPixelMapuiv(int map, [Out] IntPtr values)
        {
            unsafe
            {
                Functions.glGetPixelMapuiv((int)map, (UInt32*)values);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetPixelMapusv(int map, [Out] UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Functions.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
                }
            }
        }

        public static 
        void glGetPixelMapusv(int map, [Out] Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Functions.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetPixelMapusv(int map, [Out] out UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Functions.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        public static 
        void glGetPixelMapusv(int map, [Out] out Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Functions.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        public static 
        void glGetPixelMapusv(int map, [Out] IntPtr values)
        {
            unsafe
            {
                Functions.glGetPixelMapusv((int)map, (UInt16*)values);
            }
        }

        public static 
        void glGetPolygonStipple([Out] Byte[] mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Functions.glGetPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        public static 
        void glGetPolygonStipple([Out] out Byte mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Functions.glGetPolygonStipple((Byte*)mask_ptr);
                    mask = *mask_ptr;
                }
            }
        }

        public static 
        void glGetPolygonStipple([Out] IntPtr mask)
        {
            unsafe
            {
                Functions.glGetPolygonStipple((Byte*)mask);
            }
        }

        public static 
        string glGetString(int name)
        {
            unsafe
            {
                return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(Functions.glGetString((int)name));
            }
        }

        public static 
        void glGetTexEnvfv(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexEnvfv(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexEnvfv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexEnvfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetTexEnviv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexEnviv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexEnviv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexEnviv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetTexGendv(int coord, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexGendv(int coord, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexGendv(int coord, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexGendv((int)coord, (int)pname, (Double*)@params);
            }
        }

        public static 
        void glGetTexGenfv(int coord, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexGenfv(int coord, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexGenfv(int coord, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexGenfv((int)coord, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetTexGeniv(int coord, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexGeniv(int coord, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexGeniv(int coord, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexGeniv((int)coord, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetTexImage(int target, Int32 level, int format, int type, [Out] IntPtr pixels)
        {
            unsafe
            {
                Functions.glGetTexImage((int)target, (Int32)level, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glGetTexImage(int target, Int32 level, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetTexImage((int)target, (Int32)level, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glGetTexParameterfv(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexParameterfv(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexParameterfv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetTexParameteriv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexParameteriv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexParameteriv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetTexLevelParameterfv(int target, Int32 level, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetTexLevelParameterfv((int)target, (Int32)level, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexLevelParameterfv(int target, Int32 level, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetTexLevelParameterfv((int)target, (Int32)level, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexLevelParameterfv(int target, Int32 level, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexLevelParameterfv((int)target, (Int32)level, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetTexLevelParameteriv(int target, Int32 level, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTexLevelParameteriv((int)target, (Int32)level, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexLevelParameteriv(int target, Int32 level, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTexLevelParameteriv((int)target, (Int32)level, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexLevelParameteriv(int target, Int32 level, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexLevelParameteriv((int)target, (Int32)level, (int)pname, (Int32*)@params);
            }
        }

        public static 
        bool glIsEnabled(int cap)
        {
            return Functions.glIsEnabled((int)cap);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsList(UInt32 list)
        {
            return Functions.glIsList((UInt32)list);
        }

        public static 
        bool glIsList(Int32 list)
        {
            return Functions.glIsList((UInt32)list);
        }

        public static 
        void glDepthRange(Double near, Double far)
        {
            Functions.glDepthRange((Double)near, (Double)far);
        }

        public static 
        void glFrustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            Functions.glFrustum((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
        }

        public static 
        void glLoadIdentity()
        {
            Functions.glLoadIdentity();
        }

        public static 
        void glLoadMatrixf(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Functions.glLoadMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glLoadMatrixf(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Functions.glLoadMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glLoadMatrixf(IntPtr m)
        {
            unsafe
            {
                Functions.glLoadMatrixf((Single*)m);
            }
        }

        public static 
        void glLoadMatrixd(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Functions.glLoadMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glLoadMatrixd(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Functions.glLoadMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glLoadMatrixd(IntPtr m)
        {
            unsafe
            {
                Functions.glLoadMatrixd((Double*)m);
            }
        }

        public static 
        void glMatrixMode(int mode)
        {
            Functions.glMatrixMode((int)mode);
        }

        public static 
        void glMultMatrixf(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Functions.glMultMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glMultMatrixf(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Functions.glMultMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glMultMatrixf(IntPtr m)
        {
            unsafe
            {
                Functions.glMultMatrixf((Single*)m);
            }
        }

        public static 
        void glMultMatrixd(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Functions.glMultMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glMultMatrixd(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Functions.glMultMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glMultMatrixd(IntPtr m)
        {
            unsafe
            {
                Functions.glMultMatrixd((Double*)m);
            }
        }

        public static 
        void glOrtho(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            Functions.glOrtho((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
        }

        public static 
        void glPopMatrix()
        {
            Functions.glPopMatrix();
        }

        public static 
        void glPushMatrix()
        {
            Functions.glPushMatrix();
        }

        public static 
        void glRotated(Double angle, Double x, Double y, Double z)
        {
            Functions.glRotated((Double)angle, (Double)x, (Double)y, (Double)z);
        }

        public static 
        void glRotatef(Single angle, Single x, Single y, Single z)
        {
            Functions.glRotatef((Single)angle, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glScaled(Double x, Double y, Double z)
        {
            Functions.glScaled((Double)x, (Double)y, (Double)z);
        }

        public static 
        void glScalef(Single x, Single y, Single z)
        {
            Functions.glScalef((Single)x, (Single)y, (Single)z);
        }

        public static 
        void glTranslated(Double x, Double y, Double z)
        {
            Functions.glTranslated((Double)x, (Double)y, (Double)z);
        }

        public static 
        void glTranslatef(Single x, Single y, Single z)
        {
            Functions.glTranslatef((Single)x, (Single)y, (Single)z);
        }

        public static 
        void glViewport(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glArrayElement(Int32 i)
        {
            Functions.glArrayElement((Int32)i);
        }

        public static 
        void glColorPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glColorPointer(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glDisableClientState(int array)
        {
            Functions.glDisableClientState((int)array);
        }

        public static 
        void glDrawArrays(int mode, Int32 first, Int32 count)
        {
            Functions.glDrawArrays((int)mode, (Int32)first, (Int32)count);
        }

        public static 
        void glDrawElements(int mode, Int32 count, int type, IntPtr indices)
        {
            unsafe
            {
                Functions.glDrawElements((int)mode, (Int32)count, (int)type, (IntPtr)indices);
            }
        }

        public static 
        void glDrawElements(int mode, Int32 count, int type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glDrawElements((int)mode, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glEdgeFlagPointer(Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glEdgeFlagPointer(Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glEnableClientState(int array)
        {
            Functions.glEnableClientState((int)array);
        }

        public static 
        void glGetPointerv(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetPointerv((int)pname, (IntPtr)@params);
            }
        }

        public static 
        void glGetPointerv(int pname, [In, Out] object @params)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetPointerv((int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }

        public static 
        void glIndexPointer(int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glIndexPointer((int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glIndexPointer(int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glIndexPointer((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glInterleavedArrays(int format, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glInterleavedArrays((int)format, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glInterleavedArrays(int format, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glInterleavedArrays((int)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glNormalPointer(int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glNormalPointer((int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glNormalPointer(int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glNormalPointer((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glTexCoordPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glTexCoordPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glTexCoordPointer(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexCoordPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexPointer(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glPolygonOffset(Single factor, Single units)
        {
            Functions.glPolygonOffset((Single)factor, (Single)units);
        }

        public static 
        void glCopyTexImage1D(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
        {
            Functions.glCopyTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
        }

        public static 
        void glCopyTexImage2D(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            Functions.glCopyTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
        }

        public static 
        void glCopyTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glCopyTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glCopyTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glAreTexturesResident(Int32 n, UInt32[] textures, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Functions.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        public static 
        bool glAreTexturesResident(Int32 n, Int32[] textures, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Functions.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glAreTexturesResident(Int32 n, ref UInt32 textures, [Out] out bool residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Functions.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        public static 
        bool glAreTexturesResident(Int32 n, ref Int32 textures, [Out] out bool residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Functions.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        public static 
        bool glAreTexturesResident(Int32 n, IntPtr textures, [Out] IntPtr residences)
        {
            unsafe
            {
                return Functions.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindTexture(int target, UInt32 texture)
        {
            Functions.glBindTexture((int)target, (UInt32)texture);
        }

        public static 
        void glBindTexture(int target, Int32 texture)
        {
            Functions.glBindTexture((int)target, (UInt32)texture);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteTextures(Int32 n, UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Functions.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glDeleteTextures(Int32 n, Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Functions.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteTextures(Int32 n, ref UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Functions.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glDeleteTextures(Int32 n, ref Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Functions.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glDeleteTextures(Int32 n, IntPtr textures)
        {
            unsafe
            {
                Functions.glDeleteTextures((Int32)n, (UInt32*)textures);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenTextures(Int32 n, [Out] UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Functions.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glGenTextures(Int32 n, [Out] Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Functions.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenTextures(Int32 n, [Out] out UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Functions.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        public static 
        void glGenTextures(Int32 n, [Out] out Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Functions.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        public static 
        void glGenTextures(Int32 n, [Out] IntPtr textures)
        {
            unsafe
            {
                Functions.glGenTextures((Int32)n, (UInt32*)textures);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsTexture(UInt32 texture)
        {
            return Functions.glIsTexture((UInt32)texture);
        }

        public static 
        bool glIsTexture(Int32 texture)
        {
            return Functions.glIsTexture((UInt32)texture);
        }

        [System.CLSCompliant(false)]
        public static 
        void glPrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Functions.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        public static 
        void glPrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Functions.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glPrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Functions.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        public static 
        void glPrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Functions.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        public static 
        void glPrioritizeTextures(Int32 n, IntPtr textures, IntPtr priorities)
        {
            unsafe
            {
                Functions.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
            }
        }

        public static 
        void glIndexub(Byte c)
        {
            Functions.glIndexub((Byte)c);
        }

        public static 
        void glIndexubv(Byte[] c)
        {
            unsafe
            {
                fixed (Byte* c_ptr = c)
                {
                    Functions.glIndexubv((Byte*)c_ptr);
                }
            }
        }

        public static 
        void glIndexubv(ref Byte c)
        {
            unsafe
            {
                fixed (Byte* c_ptr = &c)
                {
                    Functions.glIndexubv((Byte*)c_ptr);
                }
            }
        }

        public static 
        void glIndexubv(IntPtr c)
        {
            unsafe
            {
                Functions.glIndexubv((Byte*)c);
            }
        }

        public static 
        void glPopClientAttrib()
        {
            Functions.glPopClientAttrib();
        }

        public static 
        void glPushClientAttrib(int mask)
        {
            Functions.glPushClientAttrib((int)mask);
        }

        public static 
        void glBlendColor(Single red, Single green, Single blue, Single alpha)
        {
            Functions.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        public static 
        void glBlendEquation(int mode)
        {
            Functions.glBlendEquation((int)mode);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDrawRangeElements(int mode, UInt32 start, UInt32 end, Int32 count, int type, IntPtr indices)
        {
            unsafe
            {
                Functions.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
            }
        }

        public static 
        void glDrawRangeElements(int mode, Int32 start, Int32 end, Int32 count, int type, IntPtr indices)
        {
            unsafe
            {
                Functions.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDrawRangeElements(int mode, UInt32 start, UInt32 end, Int32 count, int type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glDrawRangeElements(int mode, Int32 start, Int32 end, Int32 count, int type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glColorTable(int target, int internalformat, Int32 width, int format, int type, IntPtr table)
        {
            unsafe
            {
                Functions.glColorTable((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table);
            }
        }

        public static 
        void glColorTable(int target, int internalformat, Int32 width, int format, int type, [In, Out] object table)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorTable((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }

        public static 
        void glColorTableParameterfv(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameterfv(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameterfv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glColorTableParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glColorTableParameteriv(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameteriv(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameteriv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glColorTableParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glCopyColorTable(int target, int internalformat, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyColorTable((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glGetColorTable(int target, int format, int type, [Out] IntPtr table)
        {
            unsafe
            {
                Functions.glGetColorTable((int)target, (int)format, (int)type, (IntPtr)table);
            }
        }

        public static 
        void glGetColorTable(int target, int format, int type, [In, Out] object table)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetColorTable((int)target, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }

        public static 
        void glGetColorTableParameterfv(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetColorTableParameterfv(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetColorTableParameterfv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetColorTableParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetColorTableParameteriv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetColorTableParameteriv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetColorTableParameteriv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetColorTableParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glColorSubTable(int target, Int32 start, Int32 count, int format, int type, IntPtr data)
        {
            unsafe
            {
                Functions.glColorSubTable((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data);
            }
        }

        public static 
        void glColorSubTable(int target, Int32 start, Int32 count, int format, int type, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorSubTable((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCopyColorSubTable(int target, Int32 start, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyColorSubTable((int)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glConvolutionFilter1D(int target, int internalformat, Int32 width, int format, int type, IntPtr image)
        {
            unsafe
            {
                Functions.glConvolutionFilter1D((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image);
            }
        }

        public static 
        void glConvolutionFilter1D(int target, int internalformat, Int32 width, int format, int type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glConvolutionFilter1D((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        public static 
        void glConvolutionFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr image)
        {
            unsafe
            {
                Functions.glConvolutionFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image);
            }
        }

        public static 
        void glConvolutionFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glConvolutionFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        public static 
        void glConvolutionParameterf(int target, int pname, Single @params)
        {
            Functions.glConvolutionParameterf((int)target, (int)pname, (Single)@params);
        }

        public static 
        void glConvolutionParameterfv(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameterfv(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameterfv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glConvolutionParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glConvolutionParameteri(int target, int pname, Int32 @params)
        {
            Functions.glConvolutionParameteri((int)target, (int)pname, (Int32)@params);
        }

        public static 
        void glConvolutionParameteriv(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameteriv(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameteriv(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glConvolutionParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glCopyConvolutionFilter1D(int target, int internalformat, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyConvolutionFilter1D((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glCopyConvolutionFilter2D(int target, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glCopyConvolutionFilter2D((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glGetConvolutionFilter(int target, int format, int type, [Out] IntPtr image)
        {
            unsafe
            {
                Functions.glGetConvolutionFilter((int)target, (int)format, (int)type, (IntPtr)image);
            }
        }

        public static 
        void glGetConvolutionFilter(int target, int format, int type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetConvolutionFilter((int)target, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        public static 
        void glGetConvolutionParameterfv(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetConvolutionParameterfv(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetConvolutionParameterfv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetConvolutionParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetConvolutionParameteriv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetConvolutionParameteriv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetConvolutionParameteriv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetConvolutionParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetSeparableFilter(int target, int format, int type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
        {
            unsafe
            {
                Functions.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
            }
        }

        public static 
        void glGetSeparableFilter(int target, int format, int type, [In, Out] object row, [In, Out] object column, [In, Out] object span)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
        }

        public static 
        void glGetSeparableFilter(int target, int format, int type, [Out] IntPtr row, [In, Out] object column, [In, Out] object span)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
        }

        public static 
        void glSeparableFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, IntPtr column)
        {
            unsafe
            {
                Functions.glSeparableFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row, (IntPtr)column);
            }
        }

        public static 
        void glSeparableFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, [In, Out] object row, [In, Out] object column)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSeparableFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
        }

        public static 
        void glGetHistogram(int target, bool reset, int format, int type, [Out] IntPtr values)
        {
            unsafe
            {
                Functions.glGetHistogram((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values);
            }
        }

        public static 
        void glGetHistogram(int target, bool reset, int format, int type, [In, Out] object values)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetHistogram((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }

        public static 
        void glGetHistogramParameterfv(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetHistogramParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetHistogramParameterfv(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetHistogramParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetHistogramParameterfv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetHistogramParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetHistogramParameteriv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetHistogramParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetHistogramParameteriv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetHistogramParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetHistogramParameteriv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetHistogramParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetMinmax(int target, bool reset, int format, int type, [Out] IntPtr values)
        {
            unsafe
            {
                Functions.glGetMinmax((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values);
            }
        }

        public static 
        void glGetMinmax(int target, bool reset, int format, int type, [In, Out] object values)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetMinmax((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }

        public static 
        void glGetMinmaxParameterfv(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetMinmaxParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMinmaxParameterfv(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetMinmaxParameterfv((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMinmaxParameterfv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMinmaxParameterfv((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetMinmaxParameteriv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetMinmaxParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMinmaxParameteriv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetMinmaxParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMinmaxParameteriv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMinmaxParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glHistogram(int target, Int32 width, int internalformat, bool sink)
        {
            Functions.glHistogram((int)target, (Int32)width, (int)internalformat, (bool)sink);
        }

        public static 
        void glMinmax(int target, int internalformat, bool sink)
        {
            Functions.glMinmax((int)target, (int)internalformat, (bool)sink);
        }

        public static 
        void glResetHistogram(int target)
        {
            Functions.glResetHistogram((int)target);
        }

        public static 
        void glResetMinmax(int target)
        {
            Functions.glResetMinmax((int)target);
        }

        public static 
        void glTexImage3D(int target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexImage3D((int)target, (Int32)level, (Int32)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexImage3D(int target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexImage3D((int)target, (Int32)level, (Int32)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glCopyTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glCopyTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glActiveTexture(int texture)
        {
            Functions.glActiveTexture((int)texture);
        }

        public static 
        void glClientActiveTexture(int texture)
        {
            Functions.glClientActiveTexture((int)texture);
        }

        public static 
        void glMultiTexCoord1d(int target, Double s)
        {
            Functions.glMultiTexCoord1d((int)target, (Double)s);
        }

        public static 
        void glMultiTexCoord1dv(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord1dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1dv(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1dv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1dv((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord1f(int target, Single s)
        {
            Functions.glMultiTexCoord1f((int)target, (Single)s);
        }

        public static 
        void glMultiTexCoord1fv(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord1fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1fv(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1fv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1fv((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord1i(int target, Int32 s)
        {
            Functions.glMultiTexCoord1i((int)target, (Int32)s);
        }

        public static 
        void glMultiTexCoord1iv(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord1iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1iv(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1iv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1iv((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord1s(int target, Int16 s)
        {
            Functions.glMultiTexCoord1s((int)target, (Int16)s);
        }

        public static 
        void glMultiTexCoord1sv(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord1sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1sv(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1sv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1sv((int)target, (Int16*)v);
            }
        }

        public static 
        void glMultiTexCoord2d(int target, Double s, Double t)
        {
            Functions.glMultiTexCoord2d((int)target, (Double)s, (Double)t);
        }

        public static 
        void glMultiTexCoord2dv(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord2dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2dv(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2dv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2dv((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord2f(int target, Single s, Single t)
        {
            Functions.glMultiTexCoord2f((int)target, (Single)s, (Single)t);
        }

        public static 
        void glMultiTexCoord2fv(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord2fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2fv(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2fv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2fv((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord2i(int target, Int32 s, Int32 t)
        {
            Functions.glMultiTexCoord2i((int)target, (Int32)s, (Int32)t);
        }

        public static 
        void glMultiTexCoord2iv(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord2iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2iv(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2iv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2iv((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord2s(int target, Int16 s, Int16 t)
        {
            Functions.glMultiTexCoord2s((int)target, (Int16)s, (Int16)t);
        }

        public static 
        void glMultiTexCoord2sv(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord2sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2sv(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2sv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2sv((int)target, (Int16*)v);
            }
        }

        public static 
        void glMultiTexCoord3d(int target, Double s, Double t, Double r)
        {
            Functions.glMultiTexCoord3d((int)target, (Double)s, (Double)t, (Double)r);
        }

        public static 
        void glMultiTexCoord3dv(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord3dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3dv(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3dv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3dv((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord3f(int target, Single s, Single t, Single r)
        {
            Functions.glMultiTexCoord3f((int)target, (Single)s, (Single)t, (Single)r);
        }

        public static 
        void glMultiTexCoord3fv(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord3fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3fv(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3fv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3fv((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord3i(int target, Int32 s, Int32 t, Int32 r)
        {
            Functions.glMultiTexCoord3i((int)target, (Int32)s, (Int32)t, (Int32)r);
        }

        public static 
        void glMultiTexCoord3iv(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord3iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3iv(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3iv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3iv((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord3s(int target, Int16 s, Int16 t, Int16 r)
        {
            Functions.glMultiTexCoord3s((int)target, (Int16)s, (Int16)t, (Int16)r);
        }

        public static 
        void glMultiTexCoord3sv(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord3sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3sv(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3sv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3sv((int)target, (Int16*)v);
            }
        }

        public static 
        void glMultiTexCoord4d(int target, Double s, Double t, Double r, Double q)
        {
            Functions.glMultiTexCoord4d((int)target, (Double)s, (Double)t, (Double)r, (Double)q);
        }

        public static 
        void glMultiTexCoord4dv(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord4dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4dv(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4dv((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4dv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4dv((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord4f(int target, Single s, Single t, Single r, Single q)
        {
            Functions.glMultiTexCoord4f((int)target, (Single)s, (Single)t, (Single)r, (Single)q);
        }

        public static 
        void glMultiTexCoord4fv(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord4fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4fv(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4fv((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4fv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4fv((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord4i(int target, Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Functions.glMultiTexCoord4i((int)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        public static 
        void glMultiTexCoord4iv(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord4iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4iv(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4iv((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4iv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4iv((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord4s(int target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Functions.glMultiTexCoord4s((int)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        public static 
        void glMultiTexCoord4sv(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord4sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4sv(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4sv((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4sv(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4sv((int)target, (Int16*)v);
            }
        }

        public static 
        void glLoadTransposeMatrixf(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Functions.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixf(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Functions.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixf(IntPtr m)
        {
            unsafe
            {
                Functions.glLoadTransposeMatrixf((Single*)m);
            }
        }

        public static 
        void glLoadTransposeMatrixd(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Functions.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixd(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Functions.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixd(IntPtr m)
        {
            unsafe
            {
                Functions.glLoadTransposeMatrixd((Double*)m);
            }
        }

        public static 
        void glMultTransposeMatrixf(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Functions.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixf(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Functions.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixf(IntPtr m)
        {
            unsafe
            {
                Functions.glMultTransposeMatrixf((Single*)m);
            }
        }

        public static 
        void glMultTransposeMatrixd(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Functions.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixd(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Functions.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixd(IntPtr m)
        {
            unsafe
            {
                Functions.glMultTransposeMatrixd((Double*)m);
            }
        }

        public static 
        void glSampleCoverage(Single value, bool invert)
        {
            Functions.glSampleCoverage((Single)value, (bool)invert);
        }

        public static 
        void glCompressedTexImage3D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexImage3D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexImage3D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexImage3D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexImage2D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexImage2D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexImage1D(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexImage1D(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glGetCompressedTexImage(int target, Int32 level, [Out] IntPtr img)
        {
            unsafe
            {
                Functions.glGetCompressedTexImage((int)target, (Int32)level, (IntPtr)img);
            }
        }

        public static 
        void glGetCompressedTexImage(int target, Int32 level, [In, Out] object img)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetCompressedTexImage((int)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }
        }

        public static 
        void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        {
            Functions.glBlendFuncSeparate((int)sfactorRGB, (int)dfactorRGB, (int)sfactorAlpha, (int)dfactorAlpha);
        }

        public static 
        void glFogCoordf(Single coord)
        {
            Functions.glFogCoordf((Single)coord);
        }

        public static 
        void glFogCoordfv(Single[] coord)
        {
            unsafe
            {
                fixed (Single* coord_ptr = coord)
                {
                    Functions.glFogCoordfv((Single*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoordfv(ref Single coord)
        {
            unsafe
            {
                fixed (Single* coord_ptr = &coord)
                {
                    Functions.glFogCoordfv((Single*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoordfv(IntPtr coord)
        {
            unsafe
            {
                Functions.glFogCoordfv((Single*)coord);
            }
        }

        public static 
        void glFogCoordd(Double coord)
        {
            Functions.glFogCoordd((Double)coord);
        }

        public static 
        void glFogCoorddv(Double[] coord)
        {
            unsafe
            {
                fixed (Double* coord_ptr = coord)
                {
                    Functions.glFogCoorddv((Double*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoorddv(ref Double coord)
        {
            unsafe
            {
                fixed (Double* coord_ptr = &coord)
                {
                    Functions.glFogCoorddv((Double*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoorddv(IntPtr coord)
        {
            unsafe
            {
                Functions.glFogCoorddv((Double*)coord);
            }
        }

        public static 
        void glFogCoordPointer(int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glFogCoordPointer((int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glFogCoordPointer(int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glFogCoordPointer((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glMultiDrawArrays(int mode, [Out] Int32[] first, [Out] Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawArrays(int mode, [Out] out Int32 first, [Out] out Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Functions.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    first = *first_ptr;
                    count = *count_ptr;
                }
            }
        }

        public static 
        void glMultiDrawArrays(int mode, [Out] IntPtr first, [Out] IntPtr count, Int32 primcount)
        {
            unsafe
            {
                Functions.glMultiDrawArrays((int)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            }
        }

        public static 
        void glMultiDrawElements(int mode, Int32[] count, int type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiDrawElements((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawElements(int mode, IntPtr count, int type, [In, Out] object indices, Int32 primcount)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glMultiDrawElements((int)mode, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glMultiDrawElements(int mode, ref Int32 count, int type, [In, Out] object indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Functions.glMultiDrawElements((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        public static 
        void glPointParameterf(int pname, Single param)
        {
            Functions.glPointParameterf((int)pname, (Single)param);
        }

        public static 
        void glPointParameterfv(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glPointParameterfv((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfv(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glPointParameterfv((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfv(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPointParameterfv((int)pname, (Single*)@params);
            }
        }

        public static 
        void glPointParameteri(int pname, Int32 param)
        {
            Functions.glPointParameteri((int)pname, (Int32)param);
        }

        public static 
        void glPointParameteriv(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glPointParameteriv((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameteriv(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glPointParameteriv((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameteriv(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPointParameteriv((int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3b(SByte red, SByte green, SByte blue)
        {
            Functions.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        public static 
        void glSecondaryColor3b(Byte red, Byte green, Byte blue)
        {
            Functions.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3bv(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3bv(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3bv(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3bv(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3bv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3bv((SByte*)v);
            }
        }

        public static 
        void glSecondaryColor3d(Double red, Double green, Double blue)
        {
            Functions.glSecondaryColor3d((Double)red, (Double)green, (Double)blue);
        }

        public static 
        void glSecondaryColor3dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3dv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3dv((Double*)v);
            }
        }

        public static 
        void glSecondaryColor3f(Single red, Single green, Single blue)
        {
            Functions.glSecondaryColor3f((Single)red, (Single)green, (Single)blue);
        }

        public static 
        void glSecondaryColor3fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3fv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3fv((Single*)v);
            }
        }

        public static 
        void glSecondaryColor3i(Int32 red, Int32 green, Int32 blue)
        {
            Functions.glSecondaryColor3i((Int32)red, (Int32)green, (Int32)blue);
        }

        public static 
        void glSecondaryColor3iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3iv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3iv((Int32*)v);
            }
        }

        public static 
        void glSecondaryColor3s(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glSecondaryColor3s((Int16)red, (Int16)green, (Int16)blue);
        }

        public static 
        void glSecondaryColor3sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3sv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3sv((Int16*)v);
            }
        }

        public static 
        void glSecondaryColor3ub(Byte red, Byte green, Byte blue)
        {
            Functions.glSecondaryColor3ub((Byte)red, (Byte)green, (Byte)blue);
        }

        public static 
        void glSecondaryColor3ubv(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3ubv(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3ubv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3ubv((Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3ui(UInt32 red, UInt32 green, UInt32 blue)
        {
            Functions.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        public static 
        void glSecondaryColor3ui(Int32 red, Int32 green, Int32 blue)
        {
            Functions.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3uiv(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3uiv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3uiv(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3uiv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3uiv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3uiv((UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3us(UInt16 red, UInt16 green, UInt16 blue)
        {
            Functions.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        public static 
        void glSecondaryColor3us(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3usv(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3usv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3usv(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3usv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3usv(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3usv((UInt16*)v);
            }
        }

        public static 
        void glSecondaryColorPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glSecondaryColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glSecondaryColorPointer(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSecondaryColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glWindowPos2d(Double x, Double y)
        {
            Functions.glWindowPos2d((Double)x, (Double)y);
        }

        public static 
        void glWindowPos2dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glWindowPos2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glWindowPos2dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2dv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2dv((Double*)v);
            }
        }

        public static 
        void glWindowPos2f(Single x, Single y)
        {
            Functions.glWindowPos2f((Single)x, (Single)y);
        }

        public static 
        void glWindowPos2fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glWindowPos2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glWindowPos2fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2fv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2fv((Single*)v);
            }
        }

        public static 
        void glWindowPos2i(Int32 x, Int32 y)
        {
            Functions.glWindowPos2i((Int32)x, (Int32)y);
        }

        public static 
        void glWindowPos2iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glWindowPos2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glWindowPos2iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2iv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2iv((Int32*)v);
            }
        }

        public static 
        void glWindowPos2s(Int16 x, Int16 y)
        {
            Functions.glWindowPos2s((Int16)x, (Int16)y);
        }

        public static 
        void glWindowPos2sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glWindowPos2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glWindowPos2sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2sv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2sv((Int16*)v);
            }
        }

        public static 
        void glWindowPos3d(Double x, Double y, Double z)
        {
            Functions.glWindowPos3d((Double)x, (Double)y, (Double)z);
        }

        public static 
        void glWindowPos3dv(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glWindowPos3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3dv(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glWindowPos3dv((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3dv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3dv((Double*)v);
            }
        }

        public static 
        void glWindowPos3f(Single x, Single y, Single z)
        {
            Functions.glWindowPos3f((Single)x, (Single)y, (Single)z);
        }

        public static 
        void glWindowPos3fv(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glWindowPos3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3fv(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glWindowPos3fv((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3fv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3fv((Single*)v);
            }
        }

        public static 
        void glWindowPos3i(Int32 x, Int32 y, Int32 z)
        {
            Functions.glWindowPos3i((Int32)x, (Int32)y, (Int32)z);
        }

        public static 
        void glWindowPos3iv(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glWindowPos3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3iv(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glWindowPos3iv((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3iv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3iv((Int32*)v);
            }
        }

        public static 
        void glWindowPos3s(Int16 x, Int16 y, Int16 z)
        {
            Functions.glWindowPos3s((Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glWindowPos3sv(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glWindowPos3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3sv(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glWindowPos3sv((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3sv(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3sv((Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenQueries(Int32 n, [Out] UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Functions.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glGenQueries(Int32 n, [Out] Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Functions.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenQueries(Int32 n, [Out] out UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Functions.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        public static 
        void glGenQueries(Int32 n, [Out] out Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Functions.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        public static 
        void glGenQueries(Int32 n, [Out] IntPtr ids)
        {
            unsafe
            {
                Functions.glGenQueries((Int32)n, (UInt32*)ids);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteQueries(Int32 n, UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Functions.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteQueries(Int32 n, Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Functions.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteQueries(Int32 n, ref UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Functions.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteQueries(Int32 n, ref Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Functions.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteQueries(Int32 n, IntPtr ids)
        {
            unsafe
            {
                Functions.glDeleteQueries((Int32)n, (UInt32*)ids);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsQuery(UInt32 id)
        {
            return Functions.glIsQuery((UInt32)id);
        }

        public static 
        bool glIsQuery(Int32 id)
        {
            return Functions.glIsQuery((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBeginQuery(int target, UInt32 id)
        {
            Functions.glBeginQuery((int)target, (UInt32)id);
        }

        public static 
        void glBeginQuery(int target, Int32 id)
        {
            Functions.glBeginQuery((int)target, (UInt32)id);
        }

        public static 
        void glEndQuery(int target)
        {
            Functions.glEndQuery((int)target);
        }

        public static 
        void glGetQueryiv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryiv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryiv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryiv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryiv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryiv((int)target, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectiv(UInt32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryObjectiv(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectiv(UInt32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryObjectiv(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectiv(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetQueryObjectiv(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectuiv(UInt32 id, int pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryObjectuiv(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectuiv(UInt32 id, int pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryObjectuiv(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectuiv(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params);
            }
        }

        public static 
        void glGetQueryObjectuiv(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindBuffer(int target, UInt32 buffer)
        {
            Functions.glBindBuffer((int)target, (UInt32)buffer);
        }

        public static 
        void glBindBuffer(int target, Int32 buffer)
        {
            Functions.glBindBuffer((int)target, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteBuffers(Int32 n, UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Functions.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glDeleteBuffers(Int32 n, Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Functions.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteBuffers(Int32 n, ref UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Functions.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glDeleteBuffers(Int32 n, ref Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Functions.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glDeleteBuffers(Int32 n, IntPtr buffers)
        {
            unsafe
            {
                Functions.glDeleteBuffers((Int32)n, (UInt32*)buffers);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenBuffers(Int32 n, [Out] UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Functions.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glGenBuffers(Int32 n, [Out] Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Functions.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenBuffers(Int32 n, [Out] out UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Functions.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        public static 
        void glGenBuffers(Int32 n, [Out] out Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Functions.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        public static 
        void glGenBuffers(Int32 n, [Out] IntPtr buffers)
        {
            unsafe
            {
                Functions.glGenBuffers((Int32)n, (UInt32*)buffers);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsBuffer(UInt32 buffer)
        {
            return Functions.glIsBuffer((UInt32)buffer);
        }

        public static 
        bool glIsBuffer(Int32 buffer)
        {
            return Functions.glIsBuffer((UInt32)buffer);
        }

        public static 
        void glBufferData(int target, IntPtr size, IntPtr data, int usage)
        {
            unsafe
            {
                Functions.glBufferData((int)target, (IntPtr)size, (IntPtr)data, (int)usage);
            }
        }

        public static 
        void glBufferData(int target, IntPtr size, [In, Out] object data, int usage)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glBufferData((int)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (int)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glBufferSubData(int target, IntPtr offset, IntPtr size, IntPtr data)
        {
            unsafe
            {
                Functions.glBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
        }

        public static 
        void glBufferSubData(int target, IntPtr offset, IntPtr size, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glGetBufferSubData(int target, IntPtr offset, IntPtr size, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
        }

        public static 
        void glGetBufferSubData(int target, IntPtr offset, IntPtr size, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        IntPtr glMapBuffer(int target, int access)
        {
            return Functions.glMapBuffer((int)target, (int)access);
        }

        public static 
        bool glUnmapBuffer(int target)
        {
            return Functions.glUnmapBuffer((int)target);
        }

        public static 
        void glGetBufferParameteriv(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetBufferParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetBufferParameteriv(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetBufferParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetBufferParameteriv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetBufferParameteriv((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetBufferPointerv(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetBufferPointerv((int)target, (int)pname, (IntPtr)@params);
            }
        }

        public static 
        void glGetBufferPointerv(int target, int pname, [In, Out] object @params)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetBufferPointerv((int)target, (int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }

        public static 
        void glBlendEquationSeparate(int modeRGB, int modeAlpha)
        {
            Functions.glBlendEquationSeparate((int)modeRGB, (int)modeAlpha);
        }

        public static 
        void glDrawBuffers(Int32 n, int[] bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = bufs)
                {
                    Functions.glDrawBuffers((Int32)n, (int*)bufs_ptr);
                }
            }
        }

        public static 
        void glDrawBuffers(Int32 n, ref int bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = &bufs)
                {
                    Functions.glDrawBuffers((Int32)n, (int*)bufs_ptr);
                }
            }
        }

        public static 
        void glDrawBuffers(Int32 n, IntPtr bufs)
        {
            unsafe
            {
                Functions.glDrawBuffers((Int32)n, (int*)bufs);
            }
        }

        public static 
        void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass)
        {
            Functions.glStencilOpSeparate((int)face, (int)sfail, (int)dpfail, (int)dppass);
        }

        [System.CLSCompliant(false)]
        public static 
        void glStencilFuncSeparate(int frontfunc, int backfunc, Int32 @ref, UInt32 mask)
        {
            Functions.glStencilFuncSeparate((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
        }

        public static 
        void glStencilFuncSeparate(int frontfunc, int backfunc, Int32 @ref, Int32 mask)
        {
            Functions.glStencilFuncSeparate((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        public static 
        void glStencilMaskSeparate(int face, UInt32 mask)
        {
            Functions.glStencilMaskSeparate((int)face, (UInt32)mask);
        }

        public static 
        void glStencilMaskSeparate(int face, Int32 mask)
        {
            Functions.glStencilMaskSeparate((int)face, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        public static 
        void glAttachShader(UInt32 program, UInt32 shader)
        {
            Functions.glAttachShader((UInt32)program, (UInt32)shader);
        }

        public static 
        void glAttachShader(Int32 program, Int32 shader)
        {
            Functions.glAttachShader((UInt32)program, (UInt32)shader);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindAttribLocation(UInt32 program, UInt32 index, System.String name)
        {
            Functions.glBindAttribLocation((UInt32)program, (UInt32)index, (System.String)name);
        }

        public static 
        void glBindAttribLocation(Int32 program, Int32 index, System.String name)
        {
            Functions.glBindAttribLocation((UInt32)program, (UInt32)index, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glCompileShader(UInt32 shader)
        {
            Functions.glCompileShader((UInt32)shader);
        }

        public static 
        void glCompileShader(Int32 shader)
        {
            Functions.glCompileShader((UInt32)shader);
        }

        public static 
        Int32 glCreateProgram()
        {
            return Functions.glCreateProgram();
        }

        public static 
        Int32 glCreateShader(int type)
        {
            return Functions.glCreateShader((int)type);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteProgram(UInt32 program)
        {
            Functions.glDeleteProgram((UInt32)program);
        }

        public static 
        void glDeleteProgram(Int32 program)
        {
            Functions.glDeleteProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteShader(UInt32 shader)
        {
            Functions.glDeleteShader((UInt32)shader);
        }

        public static 
        void glDeleteShader(Int32 shader)
        {
            Functions.glDeleteShader((UInt32)shader);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDetachShader(UInt32 program, UInt32 shader)
        {
            Functions.glDetachShader((UInt32)program, (UInt32)shader);
        }

        public static 
        void glDetachShader(Int32 program, Int32 shader)
        {
            Functions.glDetachShader((UInt32)program, (UInt32)shader);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDisableVertexAttribArray(UInt32 index)
        {
            Functions.glDisableVertexAttribArray((UInt32)index);
        }

        public static 
        void glDisableVertexAttribArray(Int32 index)
        {
            Functions.glDisableVertexAttribArray((UInt32)index);
        }

        [System.CLSCompliant(false)]
        public static 
        void glEnableVertexAttribArray(UInt32 index)
        {
            Functions.glEnableVertexAttribArray((UInt32)index);
        }

        public static 
        void glEnableVertexAttribArray(Int32 index)
        {
            Functions.glEnableVertexAttribArray((UInt32)index);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        public static 
        void glGetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        public static 
        void glGetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        public static 
        void glGetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        public static 
        void glGetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        public static 
        void glGetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        public static 
        void glGetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetAttachedShaders(UInt32 program, Int32 maxCount, [Out] Int32[] count, [Out] UInt32[] obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (UInt32* obj_ptr = obj)
                {
                    Functions.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                }
            }
        }

        public static 
        void glGetAttachedShaders(Int32 program, Int32 maxCount, [Out] Int32[] count, [Out] Int32[] obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* obj_ptr = obj)
                {
                    Functions.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetAttachedShaders(UInt32 program, Int32 maxCount, [Out] out Int32 count, [Out] out UInt32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (UInt32* obj_ptr = &obj)
                {
                    Functions.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        public static 
        void glGetAttachedShaders(Int32 program, Int32 maxCount, [Out] out Int32 count, [Out] out Int32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* obj_ptr = &obj)
                {
                    Functions.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetAttachedShaders(UInt32 program, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
        {
            unsafe
            {
                Functions.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }
        }

        public static 
        void glGetAttachedShaders(Int32 program, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
        {
            unsafe
            {
                Functions.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGetAttribLocation(UInt32 program, System.String name)
        {
            return Functions.glGetAttribLocation((UInt32)program, (System.String)name);
        }

        public static 
        Int32 glGetAttribLocation(Int32 program, System.String name)
        {
            return Functions.glGetAttribLocation((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramiv(UInt32 program, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramiv(Int32 program, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramiv(UInt32 program, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramiv(Int32 program, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramiv(UInt32 program, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetProgramiv(Int32 program, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        public static 
        void glGetProgramInfoLog(Int32 program, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        public static 
        void glGetProgramInfoLog(Int32 program, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                Functions.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }
        }

        public static 
        void glGetProgramInfoLog(Int32 program, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                Functions.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderiv(UInt32 shader, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetShaderiv(Int32 shader, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderiv(UInt32 shader, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetShaderiv(Int32 shader, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderiv(UInt32 shader, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetShaderiv(Int32 shader, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        public static 
        void glGetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        public static 
        void glGetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                Functions.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }
        }

        public static 
        void glGetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                Functions.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderSource(UInt32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                }
            }
        }

        public static 
        void glGetShaderSource(Int32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderSource(UInt32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    length = *length_ptr;
                }
            }
        }

        public static 
        void glGetShaderSource(Int32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderSource(UInt32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                Functions.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder[])source);
            }
        }

        public static 
        void glGetShaderSource(Int32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                Functions.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder[])source);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGetUniformLocation(UInt32 program, System.String name)
        {
            return Functions.glGetUniformLocation((UInt32)program, (System.String)name);
        }

        public static 
        Int32 glGetUniformLocation(Int32 program, System.String name)
        {
            return Functions.glGetUniformLocation((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformfv(UInt32 program, Int32 location, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetUniformfv(Int32 program, Int32 location, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformfv(UInt32 program, Int32 location, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetUniformfv(Int32 program, Int32 location, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformfv(UInt32 program, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
            }
        }

        public static 
        void glGetUniformfv(Int32 program, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformiv(UInt32 program, Int32 location, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetUniformiv(Int32 program, Int32 location, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformiv(UInt32 program, Int32 location, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetUniformiv(Int32 program, Int32 location, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformiv(UInt32 program, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
            }
        }

        public static 
        void glGetUniformiv(Int32 program, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdv(UInt32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribdv(Int32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdv(UInt32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribdv(Int32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdv(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params);
            }
        }

        public static 
        void glGetVertexAttribdv(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfv(UInt32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribfv(Int32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfv(UInt32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribfv(Int32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfv(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetVertexAttribfv(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribiv(UInt32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribiv(Int32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribiv(UInt32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribiv(Int32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribiv(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetVertexAttribiv(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribPointerv(UInt32 index, int pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer);
            }
        }

        public static 
        void glGetVertexAttribPointerv(Int32 index, int pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribPointerv(UInt32 index, int pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glGetVertexAttribPointerv(Int32 index, int pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsProgram(UInt32 program)
        {
            return Functions.glIsProgram((UInt32)program);
        }

        public static 
        bool glIsProgram(Int32 program)
        {
            return Functions.glIsProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsShader(UInt32 shader)
        {
            return Functions.glIsShader((UInt32)shader);
        }

        public static 
        bool glIsShader(Int32 shader)
        {
            return Functions.glIsShader((UInt32)shader);
        }

        [System.CLSCompliant(false)]
        public static 
        void glLinkProgram(UInt32 program)
        {
            Functions.glLinkProgram((UInt32)program);
        }

        public static 
        void glLinkProgram(Int32 program)
        {
            Functions.glLinkProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderSource(UInt32 shader, Int32 count, System.String[] @string, Int32[] length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        public static 
        void glShaderSource(Int32 shader, Int32 count, System.String[] @string, Int32[] length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderSource(UInt32 shader, Int32 count, System.String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        public static 
        void glShaderSource(Int32 shader, Int32 count, System.String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderSource(UInt32 shader, Int32 count, System.String[] @string, IntPtr length)
        {
            unsafe
            {
                Functions.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length);
            }
        }

        public static 
        void glShaderSource(Int32 shader, Int32 count, System.String[] @string, IntPtr length)
        {
            unsafe
            {
                Functions.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUseProgram(UInt32 program)
        {
            Functions.glUseProgram((UInt32)program);
        }

        public static 
        void glUseProgram(Int32 program)
        {
            Functions.glUseProgram((UInt32)program);
        }

        public static 
        void glUniform1f(Int32 location, Single v0)
        {
            Functions.glUniform1f((Int32)location, (Single)v0);
        }

        public static 
        void glUniform2f(Int32 location, Single v0, Single v1)
        {
            Functions.glUniform2f((Int32)location, (Single)v0, (Single)v1);
        }

        public static 
        void glUniform3f(Int32 location, Single v0, Single v1, Single v2)
        {
            Functions.glUniform3f((Int32)location, (Single)v0, (Single)v1, (Single)v2);
        }

        public static 
        void glUniform4f(Int32 location, Single v0, Single v1, Single v2, Single v3)
        {
            Functions.glUniform4f((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
        }

        public static 
        void glUniform1i(Int32 location, Int32 v0)
        {
            Functions.glUniform1i((Int32)location, (Int32)v0);
        }

        public static 
        void glUniform2i(Int32 location, Int32 v0, Int32 v1)
        {
            Functions.glUniform2i((Int32)location, (Int32)v0, (Int32)v1);
        }

        public static 
        void glUniform3i(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
            Functions.glUniform3i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
        }

        public static 
        void glUniform4i(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
            Functions.glUniform4i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
        }

        public static 
        void glUniform1fv(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1fv(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1fv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform1fv((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform2fv(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2fv(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2fv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform2fv((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform3fv(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3fv(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3fv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform3fv((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform4fv(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4fv(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4fv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform4fv((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform1iv(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1iv(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1iv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform1iv((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniform2iv(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2iv(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2iv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform2iv((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniform3iv(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3iv(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3iv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform3iv((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniform4iv(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4iv(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4iv(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform4iv((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniformMatrix2fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix3fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix4fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glValidateProgram(UInt32 program)
        {
            Functions.glValidateProgram((UInt32)program);
        }

        public static 
        void glValidateProgram(Int32 program)
        {
            Functions.glValidateProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1d(UInt32 index, Double x)
        {
            Functions.glVertexAttrib1d((UInt32)index, (Double)x);
        }

        public static 
        void glVertexAttrib1d(Int32 index, Double x)
        {
            Functions.glVertexAttrib1d((UInt32)index, (Double)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dv(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1dv(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dv(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1dv(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1dv((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib1dv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1dv((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1f(UInt32 index, Single x)
        {
            Functions.glVertexAttrib1f((UInt32)index, (Single)x);
        }

        public static 
        void glVertexAttrib1f(Int32 index, Single x)
        {
            Functions.glVertexAttrib1f((UInt32)index, (Single)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fv(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1fv(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fv(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1fv(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1fv((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib1fv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1fv((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1s(UInt32 index, Int16 x)
        {
            Functions.glVertexAttrib1s((UInt32)index, (Int16)x);
        }

        public static 
        void glVertexAttrib1s(Int32 index, Int16 x)
        {
            Functions.glVertexAttrib1s((UInt32)index, (Int16)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1sv(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1sv(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1sv(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1sv(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1sv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1sv((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib1sv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1sv((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2d(UInt32 index, Double x, Double y)
        {
            Functions.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
        }

        public static 
        void glVertexAttrib2d(Int32 index, Double x, Double y)
        {
            Functions.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dv(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2dv(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dv(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2dv(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2dv((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib2dv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2dv((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2f(UInt32 index, Single x, Single y)
        {
            Functions.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
        }

        public static 
        void glVertexAttrib2f(Int32 index, Single x, Single y)
        {
            Functions.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fv(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2fv(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fv(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2fv(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2fv((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib2fv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2fv((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2s(UInt32 index, Int16 x, Int16 y)
        {
            Functions.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
        }

        public static 
        void glVertexAttrib2s(Int32 index, Int16 x, Int16 y)
        {
            Functions.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2sv(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2sv(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2sv(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2sv(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2sv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2sv((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib2sv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2sv((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3d(UInt32 index, Double x, Double y, Double z)
        {
            Functions.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        public static 
        void glVertexAttrib3d(Int32 index, Double x, Double y, Double z)
        {
            Functions.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dv(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3dv(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dv(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3dv(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3dv((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib3dv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3dv((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3f(UInt32 index, Single x, Single y, Single z)
        {
            Functions.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glVertexAttrib3f(Int32 index, Single x, Single y, Single z)
        {
            Functions.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fv(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3fv(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fv(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3fv(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3fv((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib3fv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3fv((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3s(UInt32 index, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glVertexAttrib3s(Int32 index, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3sv(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3sv(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3sv(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3sv(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3sv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3sv((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib3sv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3sv((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nbv(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nbv(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nbv(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nbv(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nbv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
            }
        }

        public static 
        void glVertexAttrib4Nbv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Niv(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Niv(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Niv(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Niv(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Niv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttrib4Niv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nsv(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nsv(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nsv(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nsv(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nsv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib4Nsv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nub(UInt32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Functions.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        public static 
        void glVertexAttrib4Nub(Int32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Functions.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nubv(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nubv(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nubv(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nubv(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nubv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
            }
        }

        public static 
        void glVertexAttrib4Nubv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nuiv(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nuiv(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nuiv(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nuiv(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nuiv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttrib4Nuiv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nusv(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nusv(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nusv(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4Nusv(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4Nusv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib4Nusv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4bv(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4bv(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4bv(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4bv(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4bv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4bv((UInt32)index, (SByte*)v);
            }
        }

        public static 
        void glVertexAttrib4bv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4bv((UInt32)index, (SByte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4d(UInt32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glVertexAttrib4d(Int32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dv(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4dv(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dv(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4dv(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4dv((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib4dv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4dv((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4f(UInt32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glVertexAttrib4f(Int32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fv(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4fv(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fv(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4fv(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4fv((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib4fv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4fv((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4iv(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4iv(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4iv(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4iv(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4iv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4iv((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttrib4iv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4iv((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4s(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        public static 
        void glVertexAttrib4s(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4sv(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4sv(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4sv(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4sv(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4sv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4sv((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib4sv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4sv((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubv(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ubv(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubv(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ubv(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
            }
        }

        public static 
        void glVertexAttrib4ubv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4uiv(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4uiv(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4uiv(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4uiv(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4uiv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttrib4uiv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4usv(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4usv(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4usv(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4usv(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4usv(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib4usv(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribPointer(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexAttribPointer(Int32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribPointer(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexAttribPointer(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glUniformMatrix2x3fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2x3fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2x3fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix3x2fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3x2fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3x2fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix2x4fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2x4fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2x4fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix4x2fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4x2fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4x2fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix3x4fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3x4fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3x4fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix4x3fv(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4x3fv(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4x3fv(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glActiveTextureARB(int texture)
        {
            Functions.glActiveTextureARB((int)texture);
        }

        public static 
        void glClientActiveTextureARB(int texture)
        {
            Functions.glClientActiveTextureARB((int)texture);
        }

        public static 
        void glMultiTexCoord1dARB(int target, Double s)
        {
            Functions.glMultiTexCoord1dARB((int)target, (Double)s);
        }

        public static 
        void glMultiTexCoord1dvARB(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord1dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1dvARB(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1dvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1dvARB((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord1fARB(int target, Single s)
        {
            Functions.glMultiTexCoord1fARB((int)target, (Single)s);
        }

        public static 
        void glMultiTexCoord1fvARB(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord1fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1fvARB(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1fvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1fvARB((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord1iARB(int target, Int32 s)
        {
            Functions.glMultiTexCoord1iARB((int)target, (Int32)s);
        }

        public static 
        void glMultiTexCoord1ivARB(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord1ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1ivARB(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1ivARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1ivARB((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord1sARB(int target, Int16 s)
        {
            Functions.glMultiTexCoord1sARB((int)target, (Int16)s);
        }

        public static 
        void glMultiTexCoord1svARB(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord1svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1svARB(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1svARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1svARB((int)target, (Int16*)v);
            }
        }

        public static 
        void glMultiTexCoord2dARB(int target, Double s, Double t)
        {
            Functions.glMultiTexCoord2dARB((int)target, (Double)s, (Double)t);
        }

        public static 
        void glMultiTexCoord2dvARB(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord2dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2dvARB(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2dvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2dvARB((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord2fARB(int target, Single s, Single t)
        {
            Functions.glMultiTexCoord2fARB((int)target, (Single)s, (Single)t);
        }

        public static 
        void glMultiTexCoord2fvARB(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord2fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2fvARB(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2fvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2fvARB((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord2iARB(int target, Int32 s, Int32 t)
        {
            Functions.glMultiTexCoord2iARB((int)target, (Int32)s, (Int32)t);
        }

        public static 
        void glMultiTexCoord2ivARB(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord2ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2ivARB(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2ivARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2ivARB((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord2sARB(int target, Int16 s, Int16 t)
        {
            Functions.glMultiTexCoord2sARB((int)target, (Int16)s, (Int16)t);
        }

        public static 
        void glMultiTexCoord2svARB(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord2svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2svARB(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2svARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2svARB((int)target, (Int16*)v);
            }
        }

        public static 
        void glMultiTexCoord3dARB(int target, Double s, Double t, Double r)
        {
            Functions.glMultiTexCoord3dARB((int)target, (Double)s, (Double)t, (Double)r);
        }

        public static 
        void glMultiTexCoord3dvARB(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord3dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3dvARB(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3dvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3dvARB((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord3fARB(int target, Single s, Single t, Single r)
        {
            Functions.glMultiTexCoord3fARB((int)target, (Single)s, (Single)t, (Single)r);
        }

        public static 
        void glMultiTexCoord3fvARB(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord3fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3fvARB(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3fvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3fvARB((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord3iARB(int target, Int32 s, Int32 t, Int32 r)
        {
            Functions.glMultiTexCoord3iARB((int)target, (Int32)s, (Int32)t, (Int32)r);
        }

        public static 
        void glMultiTexCoord3ivARB(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord3ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3ivARB(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3ivARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3ivARB((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord3sARB(int target, Int16 s, Int16 t, Int16 r)
        {
            Functions.glMultiTexCoord3sARB((int)target, (Int16)s, (Int16)t, (Int16)r);
        }

        public static 
        void glMultiTexCoord3svARB(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord3svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3svARB(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3svARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3svARB((int)target, (Int16*)v);
            }
        }

        public static 
        void glMultiTexCoord4dARB(int target, Double s, Double t, Double r, Double q)
        {
            Functions.glMultiTexCoord4dARB((int)target, (Double)s, (Double)t, (Double)r, (Double)q);
        }

        public static 
        void glMultiTexCoord4dvARB(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glMultiTexCoord4dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4dvARB(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4dvARB((int)target, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4dvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4dvARB((int)target, (Double*)v);
            }
        }

        public static 
        void glMultiTexCoord4fARB(int target, Single s, Single t, Single r, Single q)
        {
            Functions.glMultiTexCoord4fARB((int)target, (Single)s, (Single)t, (Single)r, (Single)q);
        }

        public static 
        void glMultiTexCoord4fvARB(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glMultiTexCoord4fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4fvARB(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4fvARB((int)target, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4fvARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4fvARB((int)target, (Single*)v);
            }
        }

        public static 
        void glMultiTexCoord4iARB(int target, Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Functions.glMultiTexCoord4iARB((int)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        public static 
        void glMultiTexCoord4ivARB(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glMultiTexCoord4ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4ivARB(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4ivARB((int)target, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4ivARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4ivARB((int)target, (Int32*)v);
            }
        }

        public static 
        void glMultiTexCoord4sARB(int target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Functions.glMultiTexCoord4sARB((int)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        public static 
        void glMultiTexCoord4svARB(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord4svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4svARB(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4svARB((int)target, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4svARB(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4svARB((int)target, (Int16*)v);
            }
        }

        public static 
        void glLoadTransposeMatrixfARB(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Functions.glLoadTransposeMatrixfARB((Single*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixfARB(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Functions.glLoadTransposeMatrixfARB((Single*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixfARB(IntPtr m)
        {
            unsafe
            {
                Functions.glLoadTransposeMatrixfARB((Single*)m);
            }
        }

        public static 
        void glLoadTransposeMatrixdARB(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Functions.glLoadTransposeMatrixdARB((Double*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixdARB(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Functions.glLoadTransposeMatrixdARB((Double*)m_ptr);
                }
            }
        }

        public static 
        void glLoadTransposeMatrixdARB(IntPtr m)
        {
            unsafe
            {
                Functions.glLoadTransposeMatrixdARB((Double*)m);
            }
        }

        public static 
        void glMultTransposeMatrixfARB(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Functions.glMultTransposeMatrixfARB((Single*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixfARB(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Functions.glMultTransposeMatrixfARB((Single*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixfARB(IntPtr m)
        {
            unsafe
            {
                Functions.glMultTransposeMatrixfARB((Single*)m);
            }
        }

        public static 
        void glMultTransposeMatrixdARB(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Functions.glMultTransposeMatrixdARB((Double*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixdARB(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Functions.glMultTransposeMatrixdARB((Double*)m_ptr);
                }
            }
        }

        public static 
        void glMultTransposeMatrixdARB(IntPtr m)
        {
            unsafe
            {
                Functions.glMultTransposeMatrixdARB((Double*)m);
            }
        }

        public static 
        void glSampleCoverageARB(Single value, bool invert)
        {
            Functions.glSampleCoverageARB((Single)value, (bool)invert);
        }

        public static 
        void glCompressedTexImage3DARB(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexImage3DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexImage3DARB(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexImage3DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexImage2DARB(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexImage2DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexImage2DARB(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexImage2DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexImage1DARB(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexImage1DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexImage1DARB(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexImage1DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexSubImage3DARB(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexSubImage3DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexSubImage3DARB(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexSubImage3DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexSubImage2DARB(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexSubImage2DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexSubImage2DARB(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexSubImage2DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCompressedTexSubImage1DARB(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Functions.glCompressedTexSubImage1DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        public static 
        void glCompressedTexSubImage1DARB(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glCompressedTexSubImage1DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glGetCompressedTexImageARB(int target, Int32 level, [Out] IntPtr img)
        {
            unsafe
            {
                Functions.glGetCompressedTexImageARB((int)target, (Int32)level, (IntPtr)img);
            }
        }

        public static 
        void glGetCompressedTexImageARB(int target, Int32 level, [In, Out] object img)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetCompressedTexImageARB((int)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }
        }

        public static 
        void glPointParameterfARB(int pname, Single param)
        {
            Functions.glPointParameterfARB((int)pname, (Single)param);
        }

        public static 
        void glPointParameterfvARB(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glPointParameterfvARB((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfvARB(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glPointParameterfvARB((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfvARB(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPointParameterfvARB((int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glWeightbvARB(Int32 size, SByte[] weights)
        {
            unsafe
            {
                fixed (SByte* weights_ptr = weights)
                {
                    Functions.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightbvARB(Int32 size, Byte[] weights)
        {
            unsafe
            {
                fixed (Byte* weights_ptr = weights)
                {
                    Functions.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glWeightbvARB(Int32 size, ref SByte weights)
        {
            unsafe
            {
                fixed (SByte* weights_ptr = &weights)
                {
                    Functions.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightbvARB(Int32 size, ref Byte weights)
        {
            unsafe
            {
                fixed (Byte* weights_ptr = &weights)
                {
                    Functions.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightbvARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightbvARB((Int32)size, (SByte*)weights);
            }
        }

        public static 
        void glWeightsvARB(Int32 size, Int16[] weights)
        {
            unsafe
            {
                fixed (Int16* weights_ptr = weights)
                {
                    Functions.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightsvARB(Int32 size, ref Int16 weights)
        {
            unsafe
            {
                fixed (Int16* weights_ptr = &weights)
                {
                    Functions.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightsvARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightsvARB((Int32)size, (Int16*)weights);
            }
        }

        public static 
        void glWeightivARB(Int32 size, Int32[] weights)
        {
            unsafe
            {
                fixed (Int32* weights_ptr = weights)
                {
                    Functions.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightivARB(Int32 size, ref Int32 weights)
        {
            unsafe
            {
                fixed (Int32* weights_ptr = &weights)
                {
                    Functions.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightivARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightivARB((Int32)size, (Int32*)weights);
            }
        }

        public static 
        void glWeightfvARB(Int32 size, Single[] weights)
        {
            unsafe
            {
                fixed (Single* weights_ptr = weights)
                {
                    Functions.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightfvARB(Int32 size, ref Single weights)
        {
            unsafe
            {
                fixed (Single* weights_ptr = &weights)
                {
                    Functions.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightfvARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightfvARB((Int32)size, (Single*)weights);
            }
        }

        public static 
        void glWeightdvARB(Int32 size, Double[] weights)
        {
            unsafe
            {
                fixed (Double* weights_ptr = weights)
                {
                    Functions.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightdvARB(Int32 size, ref Double weights)
        {
            unsafe
            {
                fixed (Double* weights_ptr = &weights)
                {
                    Functions.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightdvARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightdvARB((Int32)size, (Double*)weights);
            }
        }

        public static 
        void glWeightubvARB(Int32 size, Byte[] weights)
        {
            unsafe
            {
                fixed (Byte* weights_ptr = weights)
                {
                    Functions.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightubvARB(Int32 size, ref Byte weights)
        {
            unsafe
            {
                fixed (Byte* weights_ptr = &weights)
                {
                    Functions.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightubvARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightubvARB((Int32)size, (Byte*)weights);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glWeightusvARB(Int32 size, UInt16[] weights)
        {
            unsafe
            {
                fixed (UInt16* weights_ptr = weights)
                {
                    Functions.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightusvARB(Int32 size, Int16[] weights)
        {
            unsafe
            {
                fixed (Int16* weights_ptr = weights)
                {
                    Functions.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glWeightusvARB(Int32 size, ref UInt16 weights)
        {
            unsafe
            {
                fixed (UInt16* weights_ptr = &weights)
                {
                    Functions.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightusvARB(Int32 size, ref Int16 weights)
        {
            unsafe
            {
                fixed (Int16* weights_ptr = &weights)
                {
                    Functions.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightusvARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightusvARB((Int32)size, (UInt16*)weights);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glWeightuivARB(Int32 size, UInt32[] weights)
        {
            unsafe
            {
                fixed (UInt32* weights_ptr = weights)
                {
                    Functions.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightuivARB(Int32 size, Int32[] weights)
        {
            unsafe
            {
                fixed (Int32* weights_ptr = weights)
                {
                    Functions.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glWeightuivARB(Int32 size, ref UInt32 weights)
        {
            unsafe
            {
                fixed (UInt32* weights_ptr = &weights)
                {
                    Functions.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightuivARB(Int32 size, ref Int32 weights)
        {
            unsafe
            {
                fixed (Int32* weights_ptr = &weights)
                {
                    Functions.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                }
            }
        }

        public static 
        void glWeightuivARB(Int32 size, IntPtr weights)
        {
            unsafe
            {
                Functions.glWeightuivARB((Int32)size, (UInt32*)weights);
            }
        }

        public static 
        void glWeightPointerARB(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glWeightPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glWeightPointerARB(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glWeightPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexBlendARB(Int32 count)
        {
            Functions.glVertexBlendARB((Int32)count);
        }

        public static 
        void glCurrentPaletteMatrixARB(Int32 index)
        {
            Functions.glCurrentPaletteMatrixARB((Int32)index);
        }

        public static 
        void glMatrixIndexubvARB(Int32 size, Byte[] indices)
        {
            unsafe
            {
                fixed (Byte* indices_ptr = indices)
                {
                    Functions.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexubvARB(Int32 size, ref Byte indices)
        {
            unsafe
            {
                fixed (Byte* indices_ptr = &indices)
                {
                    Functions.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexubvARB(Int32 size, IntPtr indices)
        {
            unsafe
            {
                Functions.glMatrixIndexubvARB((Int32)size, (Byte*)indices);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMatrixIndexusvARB(Int32 size, UInt16[] indices)
        {
            unsafe
            {
                fixed (UInt16* indices_ptr = indices)
                {
                    Functions.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexusvARB(Int32 size, Int16[] indices)
        {
            unsafe
            {
                fixed (Int16* indices_ptr = indices)
                {
                    Functions.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMatrixIndexusvARB(Int32 size, ref UInt16 indices)
        {
            unsafe
            {
                fixed (UInt16* indices_ptr = &indices)
                {
                    Functions.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexusvARB(Int32 size, ref Int16 indices)
        {
            unsafe
            {
                fixed (Int16* indices_ptr = &indices)
                {
                    Functions.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexusvARB(Int32 size, IntPtr indices)
        {
            unsafe
            {
                Functions.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMatrixIndexuivARB(Int32 size, UInt32[] indices)
        {
            unsafe
            {
                fixed (UInt32* indices_ptr = indices)
                {
                    Functions.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexuivARB(Int32 size, Int32[] indices)
        {
            unsafe
            {
                fixed (Int32* indices_ptr = indices)
                {
                    Functions.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMatrixIndexuivARB(Int32 size, ref UInt32 indices)
        {
            unsafe
            {
                fixed (UInt32* indices_ptr = &indices)
                {
                    Functions.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexuivARB(Int32 size, ref Int32 indices)
        {
            unsafe
            {
                fixed (Int32* indices_ptr = &indices)
                {
                    Functions.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                }
            }
        }

        public static 
        void glMatrixIndexuivARB(Int32 size, IntPtr indices)
        {
            unsafe
            {
                Functions.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
            }
        }

        public static 
        void glMatrixIndexPointerARB(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glMatrixIndexPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glMatrixIndexPointerARB(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glMatrixIndexPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glWindowPos2dARB(Double x, Double y)
        {
            Functions.glWindowPos2dARB((Double)x, (Double)y);
        }

        public static 
        void glWindowPos2dvARB(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glWindowPos2dvARB((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2dvARB(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glWindowPos2dvARB((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2dvARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2dvARB((Double*)v);
            }
        }

        public static 
        void glWindowPos2fARB(Single x, Single y)
        {
            Functions.glWindowPos2fARB((Single)x, (Single)y);
        }

        public static 
        void glWindowPos2fvARB(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glWindowPos2fvARB((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2fvARB(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glWindowPos2fvARB((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2fvARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2fvARB((Single*)v);
            }
        }

        public static 
        void glWindowPos2iARB(Int32 x, Int32 y)
        {
            Functions.glWindowPos2iARB((Int32)x, (Int32)y);
        }

        public static 
        void glWindowPos2ivARB(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glWindowPos2ivARB((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2ivARB(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glWindowPos2ivARB((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2ivARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2ivARB((Int32*)v);
            }
        }

        public static 
        void glWindowPos2sARB(Int16 x, Int16 y)
        {
            Functions.glWindowPos2sARB((Int16)x, (Int16)y);
        }

        public static 
        void glWindowPos2svARB(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glWindowPos2svARB((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2svARB(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glWindowPos2svARB((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2svARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2svARB((Int16*)v);
            }
        }

        public static 
        void glWindowPos3dARB(Double x, Double y, Double z)
        {
            Functions.glWindowPos3dARB((Double)x, (Double)y, (Double)z);
        }

        public static 
        void glWindowPos3dvARB(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glWindowPos3dvARB((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3dvARB(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glWindowPos3dvARB((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3dvARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3dvARB((Double*)v);
            }
        }

        public static 
        void glWindowPos3fARB(Single x, Single y, Single z)
        {
            Functions.glWindowPos3fARB((Single)x, (Single)y, (Single)z);
        }

        public static 
        void glWindowPos3fvARB(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glWindowPos3fvARB((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3fvARB(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glWindowPos3fvARB((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3fvARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3fvARB((Single*)v);
            }
        }

        public static 
        void glWindowPos3iARB(Int32 x, Int32 y, Int32 z)
        {
            Functions.glWindowPos3iARB((Int32)x, (Int32)y, (Int32)z);
        }

        public static 
        void glWindowPos3ivARB(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glWindowPos3ivARB((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3ivARB(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glWindowPos3ivARB((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3ivARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3ivARB((Int32*)v);
            }
        }

        public static 
        void glWindowPos3sARB(Int16 x, Int16 y, Int16 z)
        {
            Functions.glWindowPos3sARB((Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glWindowPos3svARB(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glWindowPos3svARB((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3svARB(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glWindowPos3svARB((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3svARB(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3svARB((Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dARB(UInt32 index, Double x)
        {
            Functions.glVertexAttrib1dARB((UInt32)index, (Double)x);
        }

        public static 
        void glVertexAttrib1dARB(Int32 index, Double x)
        {
            Functions.glVertexAttrib1dARB((UInt32)index, (Double)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dvARB(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1dvARB(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dvARB(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1dvARB(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib1dvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fARB(UInt32 index, Single x)
        {
            Functions.glVertexAttrib1fARB((UInt32)index, (Single)x);
        }

        public static 
        void glVertexAttrib1fARB(Int32 index, Single x)
        {
            Functions.glVertexAttrib1fARB((UInt32)index, (Single)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fvARB(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1fvARB(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fvARB(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1fvARB(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib1fvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1sARB(UInt32 index, Int16 x)
        {
            Functions.glVertexAttrib1sARB((UInt32)index, (Int16)x);
        }

        public static 
        void glVertexAttrib1sARB(Int32 index, Int16 x)
        {
            Functions.glVertexAttrib1sARB((UInt32)index, (Int16)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1svARB(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1svARB(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1svARB(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1svARB(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1svARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib1svARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dARB(UInt32 index, Double x, Double y)
        {
            Functions.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
        }

        public static 
        void glVertexAttrib2dARB(Int32 index, Double x, Double y)
        {
            Functions.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dvARB(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2dvARB(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dvARB(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2dvARB(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib2dvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fARB(UInt32 index, Single x, Single y)
        {
            Functions.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
        }

        public static 
        void glVertexAttrib2fARB(Int32 index, Single x, Single y)
        {
            Functions.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fvARB(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2fvARB(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fvARB(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2fvARB(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib2fvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2sARB(UInt32 index, Int16 x, Int16 y)
        {
            Functions.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
        }

        public static 
        void glVertexAttrib2sARB(Int32 index, Int16 x, Int16 y)
        {
            Functions.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2svARB(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2svARB(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2svARB(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2svARB(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2svARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib2svARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dARB(UInt32 index, Double x, Double y, Double z)
        {
            Functions.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        public static 
        void glVertexAttrib3dARB(Int32 index, Double x, Double y, Double z)
        {
            Functions.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dvARB(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3dvARB(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dvARB(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3dvARB(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib3dvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fARB(UInt32 index, Single x, Single y, Single z)
        {
            Functions.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glVertexAttrib3fARB(Int32 index, Single x, Single y, Single z)
        {
            Functions.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fvARB(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3fvARB(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fvARB(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3fvARB(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib3fvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3sARB(UInt32 index, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glVertexAttrib3sARB(Int32 index, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3svARB(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3svARB(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3svARB(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3svARB(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3svARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib3svARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NbvARB(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NbvARB(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NbvARB(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NbvARB(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NbvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v);
            }
        }

        public static 
        void glVertexAttrib4NbvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NivARB(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NivARB(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NivARB(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NivARB(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NivARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttrib4NivARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NsvARB(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NsvARB(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NsvARB(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NsvARB(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NsvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib4NsvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NubARB(UInt32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Functions.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        public static 
        void glVertexAttrib4NubARB(Int32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Functions.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NubvARB(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NubvARB(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NubvARB(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NubvARB(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NubvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
            }
        }

        public static 
        void glVertexAttrib4NubvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NuivARB(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NuivARB(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NuivARB(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NuivARB(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NuivARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttrib4NuivARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NusvARB(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NusvARB(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NusvARB(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4NusvARB(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4NusvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib4NusvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4bvARB(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4bvARB(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4bvARB(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4bvARB(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4bvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4bvARB((UInt32)index, (SByte*)v);
            }
        }

        public static 
        void glVertexAttrib4bvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4bvARB((UInt32)index, (SByte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dARB(UInt32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glVertexAttrib4dARB(Int32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dvARB(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4dvARB(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dvARB(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4dvARB(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib4dvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fARB(UInt32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glVertexAttrib4fARB(Int32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fvARB(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4fvARB(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fvARB(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4fvARB(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib4fvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ivARB(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ivARB(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ivARB(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ivARB(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ivARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttrib4ivARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4sARB(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        public static 
        void glVertexAttrib4sARB(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4svARB(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4svARB(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4svARB(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4svARB(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4svARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib4svARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubvARB(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ubvARB(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubvARB(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ubvARB(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
            }
        }

        public static 
        void glVertexAttrib4ubvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4uivARB(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4uivARB(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4uivARB(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4uivARB(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4uivARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttrib4uivARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4usvARB(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4usvARB(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4usvARB(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4usvARB(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4usvARB(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib4usvARB(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribPointerARB(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexAttribPointerARB(Int32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribPointerARB(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexAttribPointerARB(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glEnableVertexAttribArrayARB(UInt32 index)
        {
            Functions.glEnableVertexAttribArrayARB((UInt32)index);
        }

        public static 
        void glEnableVertexAttribArrayARB(Int32 index)
        {
            Functions.glEnableVertexAttribArrayARB((UInt32)index);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDisableVertexAttribArrayARB(UInt32 index)
        {
            Functions.glDisableVertexAttribArrayARB((UInt32)index);
        }

        public static 
        void glDisableVertexAttribArrayARB(Int32 index)
        {
            Functions.glDisableVertexAttribArrayARB((UInt32)index);
        }

        public static 
        void glProgramStringARB(int target, int format, Int32 len, IntPtr @string)
        {
            unsafe
            {
                Functions.glProgramStringARB((int)target, (int)format, (Int32)len, (IntPtr)@string);
            }
        }

        public static 
        void glProgramStringARB(int target, int format, Int32 len, [In, Out] object @string)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glProgramStringARB((int)target, (int)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindProgramARB(int target, UInt32 program)
        {
            Functions.glBindProgramARB((int)target, (UInt32)program);
        }

        public static 
        void glBindProgramARB(int target, Int32 program)
        {
            Functions.glBindProgramARB((int)target, (UInt32)program);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteProgramsARB(Int32 n, UInt32[] programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = programs)
                {
                    Functions.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glDeleteProgramsARB(Int32 n, Int32[] programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = programs)
                {
                    Functions.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteProgramsARB(Int32 n, ref UInt32 programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = &programs)
                {
                    Functions.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glDeleteProgramsARB(Int32 n, ref Int32 programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = &programs)
                {
                    Functions.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glDeleteProgramsARB(Int32 n, IntPtr programs)
        {
            unsafe
            {
                Functions.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenProgramsARB(Int32 n, [Out] UInt32[] programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = programs)
                {
                    Functions.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glGenProgramsARB(Int32 n, [Out] Int32[] programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = programs)
                {
                    Functions.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenProgramsARB(Int32 n, [Out] out UInt32 programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = &programs)
                {
                    Functions.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    programs = *programs_ptr;
                }
            }
        }

        public static 
        void glGenProgramsARB(Int32 n, [Out] out Int32 programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = &programs)
                {
                    Functions.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    programs = *programs_ptr;
                }
            }
        }

        public static 
        void glGenProgramsARB(Int32 n, [Out] IntPtr programs)
        {
            unsafe
            {
                Functions.glGenProgramsARB((Int32)n, (UInt32*)programs);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4dARB(int target, UInt32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glProgramEnvParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glProgramEnvParameter4dARB(int target, Int32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glProgramEnvParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4dvARB(int target, UInt32 index, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameter4dvARB(int target, Int32 index, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4dvARB(int target, UInt32 index, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameter4dvARB(int target, Int32 index, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4dvARB(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        public static 
        void glProgramEnvParameter4dvARB(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4fARB(int target, UInt32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glProgramEnvParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glProgramEnvParameter4fARB(int target, Int32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glProgramEnvParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4fvARB(int target, UInt32 index, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameter4fvARB(int target, Int32 index, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4fvARB(int target, UInt32 index, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameter4fvARB(int target, Int32 index, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameter4fvARB(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        public static 
        void glProgramEnvParameter4fvARB(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4dARB(int target, UInt32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glProgramLocalParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glProgramLocalParameter4dARB(int target, Int32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glProgramLocalParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4dvARB(int target, UInt32 index, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameter4dvARB(int target, Int32 index, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4dvARB(int target, UInt32 index, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameter4dvARB(int target, Int32 index, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4dvARB(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        public static 
        void glProgramLocalParameter4dvARB(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4fARB(int target, UInt32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glProgramLocalParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glProgramLocalParameter4fARB(int target, Int32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glProgramLocalParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4fvARB(int target, UInt32 index, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameter4fvARB(int target, Int32 index, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4fvARB(int target, UInt32 index, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameter4fvARB(int target, Int32 index, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameter4fvARB(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        public static 
        void glProgramLocalParameter4fvARB(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterdvARB(int target, UInt32 index, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramEnvParameterdvARB(int target, Int32 index, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterdvARB(int target, UInt32 index, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramEnvParameterdvARB(int target, Int32 index, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterdvARB(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        public static 
        void glGetProgramEnvParameterdvARB(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterfvARB(int target, UInt32 index, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramEnvParameterfvARB(int target, Int32 index, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterfvARB(int target, UInt32 index, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramEnvParameterfvARB(int target, Int32 index, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterfvARB(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        public static 
        void glGetProgramEnvParameterfvARB(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterdvARB(int target, UInt32 index, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramLocalParameterdvARB(int target, Int32 index, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterdvARB(int target, UInt32 index, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramLocalParameterdvARB(int target, Int32 index, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterdvARB(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        public static 
        void glGetProgramLocalParameterdvARB(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterfvARB(int target, UInt32 index, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramLocalParameterfvARB(int target, Int32 index, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterfvARB(int target, UInt32 index, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramLocalParameterfvARB(int target, Int32 index, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterfvARB(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        public static 
        void glGetProgramLocalParameterfvARB(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params);
            }
        }

        public static 
        void glGetProgramivARB(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramivARB((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramivARB(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramivARB((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramivARB(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramivARB((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetProgramStringARB(int target, int pname, [Out] IntPtr @string)
        {
            unsafe
            {
                Functions.glGetProgramStringARB((int)target, (int)pname, (IntPtr)@string);
            }
        }

        public static 
        void glGetProgramStringARB(int target, int pname, [In, Out] object @string)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetProgramStringARB((int)target, (int)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdvARB(UInt32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribdvARB(Int32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdvARB(UInt32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribdvARB(Int32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdvARB(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params);
            }
        }

        public static 
        void glGetVertexAttribdvARB(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfvARB(UInt32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribfvARB(Int32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfvARB(UInt32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribfvARB(Int32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfvARB(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetVertexAttribfvARB(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribivARB(UInt32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribivARB(Int32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribivARB(UInt32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribivARB(Int32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribivARB(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetVertexAttribivARB(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribPointervARB(UInt32 index, int pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer);
            }
        }

        public static 
        void glGetVertexAttribPointervARB(Int32 index, int pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribPointervARB(UInt32 index, int pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glGetVertexAttribPointervARB(Int32 index, int pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsProgramARB(UInt32 program)
        {
            return Functions.glIsProgramARB((UInt32)program);
        }

        public static 
        bool glIsProgramARB(Int32 program)
        {
            return Functions.glIsProgramARB((UInt32)program);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindBufferARB(int target, UInt32 buffer)
        {
            Functions.glBindBufferARB((int)target, (UInt32)buffer);
        }

        public static 
        void glBindBufferARB(int target, Int32 buffer)
        {
            Functions.glBindBufferARB((int)target, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteBuffersARB(Int32 n, UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Functions.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glDeleteBuffersARB(Int32 n, Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Functions.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteBuffersARB(Int32 n, ref UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Functions.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glDeleteBuffersARB(Int32 n, ref Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Functions.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glDeleteBuffersARB(Int32 n, IntPtr buffers)
        {
            unsafe
            {
                Functions.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenBuffersARB(Int32 n, [Out] UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Functions.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        public static 
        void glGenBuffersARB(Int32 n, [Out] Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Functions.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenBuffersARB(Int32 n, [Out] out UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Functions.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        public static 
        void glGenBuffersARB(Int32 n, [Out] out Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Functions.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        public static 
        void glGenBuffersARB(Int32 n, [Out] IntPtr buffers)
        {
            unsafe
            {
                Functions.glGenBuffersARB((Int32)n, (UInt32*)buffers);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsBufferARB(UInt32 buffer)
        {
            return Functions.glIsBufferARB((UInt32)buffer);
        }

        public static 
        bool glIsBufferARB(Int32 buffer)
        {
            return Functions.glIsBufferARB((UInt32)buffer);
        }

        public static 
        void glBufferDataARB(int target, IntPtr size, IntPtr data, int usage)
        {
            unsafe
            {
                Functions.glBufferDataARB((int)target, (IntPtr)size, (IntPtr)data, (int)usage);
            }
        }

        public static 
        void glBufferDataARB(int target, IntPtr size, [In, Out] object data, int usage)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glBufferDataARB((int)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (int)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glBufferSubDataARB(int target, IntPtr offset, IntPtr size, IntPtr data)
        {
            unsafe
            {
                Functions.glBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
        }

        public static 
        void glBufferSubDataARB(int target, IntPtr offset, IntPtr size, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glGetBufferSubDataARB(int target, IntPtr offset, IntPtr size, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
        }

        public static 
        void glGetBufferSubDataARB(int target, IntPtr offset, IntPtr size, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        IntPtr glMapBufferARB(int target, int access)
        {
            return Functions.glMapBufferARB((int)target, (int)access);
        }

        public static 
        bool glUnmapBufferARB(int target)
        {
            return Functions.glUnmapBufferARB((int)target);
        }

        public static 
        void glGetBufferParameterivARB(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetBufferParameterivARB((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetBufferParameterivARB(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetBufferParameterivARB((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetBufferParameterivARB(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetBufferParameterivARB((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetBufferPointervARB(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetBufferPointervARB((int)target, (int)pname, (IntPtr)@params);
            }
        }

        public static 
        void glGetBufferPointervARB(int target, int pname, [In, Out] object @params)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetBufferPointervARB((int)target, (int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenQueriesARB(Int32 n, [Out] UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Functions.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glGenQueriesARB(Int32 n, [Out] Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Functions.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenQueriesARB(Int32 n, [Out] out UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Functions.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        public static 
        void glGenQueriesARB(Int32 n, [Out] out Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Functions.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        public static 
        void glGenQueriesARB(Int32 n, [Out] IntPtr ids)
        {
            unsafe
            {
                Functions.glGenQueriesARB((Int32)n, (UInt32*)ids);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteQueriesARB(Int32 n, UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Functions.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteQueriesARB(Int32 n, Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Functions.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteQueriesARB(Int32 n, ref UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Functions.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteQueriesARB(Int32 n, ref Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Functions.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteQueriesARB(Int32 n, IntPtr ids)
        {
            unsafe
            {
                Functions.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsQueryARB(UInt32 id)
        {
            return Functions.glIsQueryARB((UInt32)id);
        }

        public static 
        bool glIsQueryARB(Int32 id)
        {
            return Functions.glIsQueryARB((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBeginQueryARB(int target, UInt32 id)
        {
            Functions.glBeginQueryARB((int)target, (UInt32)id);
        }

        public static 
        void glBeginQueryARB(int target, Int32 id)
        {
            Functions.glBeginQueryARB((int)target, (UInt32)id);
        }

        public static 
        void glEndQueryARB(int target)
        {
            Functions.glEndQueryARB((int)target);
        }

        public static 
        void glGetQueryivARB(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryivARB((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryivARB(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryivARB((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryivARB(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryivARB((int)target, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectivARB(UInt32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryObjectivARB(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectivARB(UInt32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryObjectivARB(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectivARB(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetQueryObjectivARB(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectuivARB(UInt32 id, int pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryObjectuivARB(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectuivARB(UInt32 id, int pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryObjectuivARB(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectuivARB(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params);
            }
        }

        public static 
        void glGetQueryObjectuivARB(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteObjectARB(UInt32 obj)
        {
            Functions.glDeleteObjectARB((UInt32)obj);
        }

        public static 
        void glDeleteObjectARB(Int32 obj)
        {
            Functions.glDeleteObjectARB((UInt32)obj);
        }

        public static 
        Int32 glGetHandleARB(int pname)
        {
            return Functions.glGetHandleARB((int)pname);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDetachObjectARB(UInt32 containerObj, UInt32 attachedObj)
        {
            Functions.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
        }

        public static 
        void glDetachObjectARB(Int32 containerObj, Int32 attachedObj)
        {
            Functions.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
        }

        public static 
        Int32 glCreateShaderObjectARB(int shaderType)
        {
            return Functions.glCreateShaderObjectARB((int)shaderType);
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderSourceARB(UInt32 shaderObj, Int32 count, System.String[] @string, Int32[] length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        public static 
        void glShaderSourceARB(Int32 shaderObj, Int32 count, System.String[] @string, Int32[] length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderSourceARB(UInt32 shaderObj, Int32 count, System.String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        public static 
        void glShaderSourceARB(Int32 shaderObj, Int32 count, System.String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderSourceARB(UInt32 shaderObj, Int32 count, System.String[] @string, IntPtr length)
        {
            unsafe
            {
                Functions.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length);
            }
        }

        public static 
        void glShaderSourceARB(Int32 shaderObj, Int32 count, System.String[] @string, IntPtr length)
        {
            unsafe
            {
                Functions.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glCompileShaderARB(UInt32 shaderObj)
        {
            Functions.glCompileShaderARB((UInt32)shaderObj);
        }

        public static 
        void glCompileShaderARB(Int32 shaderObj)
        {
            Functions.glCompileShaderARB((UInt32)shaderObj);
        }

        public static 
        Int32 glCreateProgramObjectARB()
        {
            return Functions.glCreateProgramObjectARB();
        }

        [System.CLSCompliant(false)]
        public static 
        void glAttachObjectARB(UInt32 containerObj, UInt32 obj)
        {
            Functions.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
        }

        public static 
        void glAttachObjectARB(Int32 containerObj, Int32 obj)
        {
            Functions.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
        }

        [System.CLSCompliant(false)]
        public static 
        void glLinkProgramARB(UInt32 programObj)
        {
            Functions.glLinkProgramARB((UInt32)programObj);
        }

        public static 
        void glLinkProgramARB(Int32 programObj)
        {
            Functions.glLinkProgramARB((UInt32)programObj);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUseProgramObjectARB(UInt32 programObj)
        {
            Functions.glUseProgramObjectARB((UInt32)programObj);
        }

        public static 
        void glUseProgramObjectARB(Int32 programObj)
        {
            Functions.glUseProgramObjectARB((UInt32)programObj);
        }

        [System.CLSCompliant(false)]
        public static 
        void glValidateProgramARB(UInt32 programObj)
        {
            Functions.glValidateProgramARB((UInt32)programObj);
        }

        public static 
        void glValidateProgramARB(Int32 programObj)
        {
            Functions.glValidateProgramARB((UInt32)programObj);
        }

        public static 
        void glUniform1fARB(Int32 location, Single v0)
        {
            Functions.glUniform1fARB((Int32)location, (Single)v0);
        }

        public static 
        void glUniform2fARB(Int32 location, Single v0, Single v1)
        {
            Functions.glUniform2fARB((Int32)location, (Single)v0, (Single)v1);
        }

        public static 
        void glUniform3fARB(Int32 location, Single v0, Single v1, Single v2)
        {
            Functions.glUniform3fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2);
        }

        public static 
        void glUniform4fARB(Int32 location, Single v0, Single v1, Single v2, Single v3)
        {
            Functions.glUniform4fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
        }

        public static 
        void glUniform1iARB(Int32 location, Int32 v0)
        {
            Functions.glUniform1iARB((Int32)location, (Int32)v0);
        }

        public static 
        void glUniform2iARB(Int32 location, Int32 v0, Int32 v1)
        {
            Functions.glUniform2iARB((Int32)location, (Int32)v0, (Int32)v1);
        }

        public static 
        void glUniform3iARB(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
            Functions.glUniform3iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
        }

        public static 
        void glUniform4iARB(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
            Functions.glUniform4iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
        }

        public static 
        void glUniform1fvARB(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1fvARB(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1fvARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform2fvARB(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2fvARB(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2fvARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform3fvARB(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3fvARB(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3fvARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform4fvARB(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4fvARB(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4fvARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value);
            }
        }

        public static 
        void glUniform1ivARB(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1ivARB(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1ivARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniform2ivARB(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2ivARB(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2ivARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniform3ivARB(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3ivARB(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3ivARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniform4ivARB(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4ivARB(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4ivARB(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value);
            }
        }

        public static 
        void glUniformMatrix2fvARB(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2fvARB(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix2fvARB(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix3fvARB(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3fvARB(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix3fvARB(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        public static 
        void glUniformMatrix4fvARB(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4fvARB(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glUniformMatrix4fvARB(Int32 location, Int32 count, bool transpose, IntPtr value)
        {
            unsafe
            {
                Functions.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectParameterfvARB(UInt32 obj, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetObjectParameterfvARB(Int32 obj, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectParameterfvARB(UInt32 obj, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetObjectParameterfvARB(Int32 obj, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectParameterfvARB(UInt32 obj, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetObjectParameterfvARB(Int32 obj, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectParameterivARB(UInt32 obj, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetObjectParameterivARB(Int32 obj, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectParameterivARB(UInt32 obj, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetObjectParameterivARB(Int32 obj, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectParameterivARB(UInt32 obj, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetObjectParameterivARB(Int32 obj, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInfoLogARB(UInt32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        public static 
        void glGetInfoLogARB(Int32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInfoLogARB(UInt32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        public static 
        void glGetInfoLogARB(Int32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInfoLogARB(UInt32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                Functions.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }
        }

        public static 
        void glGetInfoLogARB(Int32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                Functions.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] UInt32[] obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (UInt32* obj_ptr = obj)
                {
                    Functions.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                }
            }
        }

        public static 
        void glGetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] Int32[] obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* obj_ptr = obj)
                {
                    Functions.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] out UInt32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (UInt32* obj_ptr = &obj)
                {
                    Functions.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        public static 
        void glGetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] out Int32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* obj_ptr = &obj)
                {
                    Functions.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
        {
            unsafe
            {
                Functions.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }
        }

        public static 
        void glGetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
        {
            unsafe
            {
                Functions.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGetUniformLocationARB(UInt32 programObj, System.String name)
        {
            return Functions.glGetUniformLocationARB((UInt32)programObj, (System.String)name);
        }

        public static 
        Int32 glGetUniformLocationARB(Int32 programObj, System.String name)
        {
            return Functions.glGetUniformLocationARB((UInt32)programObj, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        public static 
        void glGetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        public static 
        void glGetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        public static 
        void glGetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformfvARB(UInt32 programObj, Int32 location, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetUniformfvARB(Int32 programObj, Int32 location, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformfvARB(UInt32 programObj, Int32 location, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetUniformfvARB(Int32 programObj, Int32 location, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformfvARB(UInt32 programObj, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
            }
        }

        public static 
        void glGetUniformfvARB(Int32 programObj, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformivARB(UInt32 programObj, Int32 location, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetUniformivARB(Int32 programObj, Int32 location, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformivARB(UInt32 programObj, Int32 location, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetUniformivARB(Int32 programObj, Int32 location, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformivARB(UInt32 programObj, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
            }
        }

        public static 
        void glGetUniformivARB(Int32 programObj, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderSourceARB(UInt32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                }
            }
        }

        public static 
        void glGetShaderSourceARB(Int32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Functions.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderSourceARB(UInt32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    length = *length_ptr;
                }
            }
        }

        public static 
        void glGetShaderSourceARB(Int32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Functions.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetShaderSourceARB(UInt32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                Functions.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder[])source);
            }
        }

        public static 
        void glGetShaderSourceARB(Int32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                Functions.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder[])source);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindAttribLocationARB(UInt32 programObj, UInt32 index, System.String name)
        {
            Functions.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (System.String)name);
        }

        public static 
        void glBindAttribLocationARB(Int32 programObj, Int32 index, System.String name)
        {
            Functions.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        public static 
        void glGetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        public static 
        void glGetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        public static 
        void glGetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGetAttribLocationARB(UInt32 programObj, System.String name)
        {
            return Functions.glGetAttribLocationARB((UInt32)programObj, (System.String)name);
        }

        public static 
        Int32 glGetAttribLocationARB(Int32 programObj, System.String name)
        {
            return Functions.glGetAttribLocationARB((UInt32)programObj, (System.String)name);
        }

        public static 
        void glDrawBuffersARB(Int32 n, int[] bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = bufs)
                {
                    Functions.glDrawBuffersARB((Int32)n, (int*)bufs_ptr);
                }
            }
        }

        public static 
        void glDrawBuffersARB(Int32 n, ref int bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = &bufs)
                {
                    Functions.glDrawBuffersARB((Int32)n, (int*)bufs_ptr);
                }
            }
        }

        public static 
        void glDrawBuffersARB(Int32 n, IntPtr bufs)
        {
            unsafe
            {
                Functions.glDrawBuffersARB((Int32)n, (int*)bufs);
            }
        }

        public static 
        void glClampColorARB(int target, int clamp)
        {
            Functions.glClampColorARB((int)target, (int)clamp);
        }

        public static 
        void glBlendColorEXT(Single red, Single green, Single blue, Single alpha)
        {
            Functions.glBlendColorEXT((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        public static 
        void glPolygonOffsetEXT(Single factor, Single bias)
        {
            Functions.glPolygonOffsetEXT((Single)factor, (Single)bias);
        }

        public static 
        void glTexImage3DEXT(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexImage3DEXT((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexImage3DEXT(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexImage3DEXT((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexSubImage3DEXT(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexSubImage3DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexSubImage3DEXT(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexSubImage3DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexSubImage1DEXT(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexSubImage1DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexSubImage1DEXT(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexSubImage1DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexSubImage2DEXT(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexSubImage2DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexSubImage2DEXT(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexSubImage2DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glCopyTexImage1DEXT(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
        {
            Functions.glCopyTexImage1DEXT((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
        }

        public static 
        void glCopyTexImage2DEXT(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            Functions.glCopyTexImage2DEXT((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
        }

        public static 
        void glCopyTexSubImage1DEXT(int target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyTexSubImage1DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glCopyTexSubImage2DEXT(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glCopyTexSubImage2DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glCopyTexSubImage3DEXT(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glCopyTexSubImage3DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] IntPtr values)
        {
            unsafe
            {
                Functions.glGetHistogramEXT((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values);
            }
        }

        public static 
        void glGetHistogramEXT(int target, bool reset, int format, int type, [In, Out] object values)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetHistogramEXT((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }

        public static 
        void glGetHistogramParameterfvEXT(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetHistogramParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetHistogramParameterfvEXT(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetHistogramParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetHistogramParameterfvEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetHistogramParameterfvEXT((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetHistogramParameterivEXT(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetHistogramParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetHistogramParameterivEXT(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetHistogramParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetHistogramParameterivEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetHistogramParameterivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] IntPtr values)
        {
            unsafe
            {
                Functions.glGetMinmaxEXT((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values);
            }
        }

        public static 
        void glGetMinmaxEXT(int target, bool reset, int format, int type, [In, Out] object values)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetMinmaxEXT((int)target, (bool)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }

        public static 
        void glGetMinmaxParameterfvEXT(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetMinmaxParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMinmaxParameterfvEXT(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetMinmaxParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMinmaxParameterfvEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMinmaxParameterfvEXT((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetMinmaxParameterivEXT(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetMinmaxParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMinmaxParameterivEXT(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetMinmaxParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMinmaxParameterivEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMinmaxParameterivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glHistogramEXT(int target, Int32 width, int internalformat, bool sink)
        {
            Functions.glHistogramEXT((int)target, (Int32)width, (int)internalformat, (bool)sink);
        }

        public static 
        void glMinmaxEXT(int target, int internalformat, bool sink)
        {
            Functions.glMinmaxEXT((int)target, (int)internalformat, (bool)sink);
        }

        public static 
        void glResetHistogramEXT(int target)
        {
            Functions.glResetHistogramEXT((int)target);
        }

        public static 
        void glResetMinmaxEXT(int target)
        {
            Functions.glResetMinmaxEXT((int)target);
        }

        public static 
        void glConvolutionFilter1DEXT(int target, int internalformat, Int32 width, int format, int type, IntPtr image)
        {
            unsafe
            {
                Functions.glConvolutionFilter1DEXT((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image);
            }
        }

        public static 
        void glConvolutionFilter1DEXT(int target, int internalformat, Int32 width, int format, int type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glConvolutionFilter1DEXT((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        public static 
        void glConvolutionFilter2DEXT(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr image)
        {
            unsafe
            {
                Functions.glConvolutionFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image);
            }
        }

        public static 
        void glConvolutionFilter2DEXT(int target, int internalformat, Int32 width, Int32 height, int format, int type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glConvolutionFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        public static 
        void glConvolutionParameterfEXT(int target, int pname, Single @params)
        {
            Functions.glConvolutionParameterfEXT((int)target, (int)pname, (Single)@params);
        }

        public static 
        void glConvolutionParameterfvEXT(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameterfvEXT(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameterfvEXT(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glConvolutionParameteriEXT(int target, int pname, Int32 @params)
        {
            Functions.glConvolutionParameteriEXT((int)target, (int)pname, (Int32)@params);
        }

        public static 
        void glConvolutionParameterivEXT(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameterivEXT(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glConvolutionParameterivEXT(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glCopyConvolutionFilter1DEXT(int target, int internalformat, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyConvolutionFilter1DEXT((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glCopyConvolutionFilter2DEXT(int target, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Functions.glCopyConvolutionFilter2DEXT((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        public static 
        void glGetConvolutionFilterEXT(int target, int format, int type, [Out] IntPtr image)
        {
            unsafe
            {
                Functions.glGetConvolutionFilterEXT((int)target, (int)format, (int)type, (IntPtr)image);
            }
        }

        public static 
        void glGetConvolutionFilterEXT(int target, int format, int type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetConvolutionFilterEXT((int)target, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        public static 
        void glGetConvolutionParameterfvEXT(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetConvolutionParameterfvEXT(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetConvolutionParameterfvEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetConvolutionParameterivEXT(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetConvolutionParameterivEXT(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetConvolutionParameterivEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetSeparableFilterEXT(int target, int format, int type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
        {
            unsafe
            {
                Functions.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
            }
        }

        public static 
        void glGetSeparableFilterEXT(int target, int format, int type, [In, Out] object row, [In, Out] object column, [In, Out] object span)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
        }

        public static 
        void glGetSeparableFilterEXT(int target, int format, int type, [Out] IntPtr row, [In, Out] object column, [In, Out] object span)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
        }

        public static 
        void glSeparableFilter2DEXT(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, IntPtr column)
        {
            unsafe
            {
                Functions.glSeparableFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row, (IntPtr)column);
            }
        }

        public static 
        void glSeparableFilter2DEXT(int target, int internalformat, Int32 width, Int32 height, int format, int type, [In, Out] object row, [In, Out] object column)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSeparableFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glAreTexturesResidentEXT(Int32 n, UInt32[] textures, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Functions.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        public static 
        bool glAreTexturesResidentEXT(Int32 n, Int32[] textures, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Functions.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glAreTexturesResidentEXT(Int32 n, ref UInt32 textures, [Out] out bool residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Functions.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        public static 
        bool glAreTexturesResidentEXT(Int32 n, ref Int32 textures, [Out] out bool residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Functions.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        public static 
        bool glAreTexturesResidentEXT(Int32 n, IntPtr textures, [Out] IntPtr residences)
        {
            unsafe
            {
                return Functions.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (bool*)residences);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindTextureEXT(int target, UInt32 texture)
        {
            Functions.glBindTextureEXT((int)target, (UInt32)texture);
        }

        public static 
        void glBindTextureEXT(int target, Int32 texture)
        {
            Functions.glBindTextureEXT((int)target, (UInt32)texture);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteTexturesEXT(Int32 n, UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Functions.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glDeleteTexturesEXT(Int32 n, Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Functions.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteTexturesEXT(Int32 n, ref UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Functions.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glDeleteTexturesEXT(Int32 n, ref Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Functions.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glDeleteTexturesEXT(Int32 n, IntPtr textures)
        {
            unsafe
            {
                Functions.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenTexturesEXT(Int32 n, [Out] UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Functions.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        public static 
        void glGenTexturesEXT(Int32 n, [Out] Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Functions.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenTexturesEXT(Int32 n, [Out] out UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Functions.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        public static 
        void glGenTexturesEXT(Int32 n, [Out] out Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Functions.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        public static 
        void glGenTexturesEXT(Int32 n, [Out] IntPtr textures)
        {
            unsafe
            {
                Functions.glGenTexturesEXT((Int32)n, (UInt32*)textures);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsTextureEXT(UInt32 texture)
        {
            return Functions.glIsTextureEXT((UInt32)texture);
        }

        public static 
        bool glIsTextureEXT(Int32 texture)
        {
            return Functions.glIsTextureEXT((UInt32)texture);
        }

        [System.CLSCompliant(false)]
        public static 
        void glPrioritizeTexturesEXT(Int32 n, UInt32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Functions.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        public static 
        void glPrioritizeTexturesEXT(Int32 n, Int32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Functions.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glPrioritizeTexturesEXT(Int32 n, ref UInt32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Functions.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        public static 
        void glPrioritizeTexturesEXT(Int32 n, ref Int32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Functions.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        public static 
        void glPrioritizeTexturesEXT(Int32 n, IntPtr textures, IntPtr priorities)
        {
            unsafe
            {
                Functions.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
            }
        }

        public static 
        void glArrayElementEXT(Int32 i)
        {
            Functions.glArrayElementEXT((Int32)i);
        }

        public static 
        void glColorPointerEXT(Int32 size, int type, Int32 stride, Int32 count, IntPtr pointer)
        {
            unsafe
            {
                Functions.glColorPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }
        }

        public static 
        void glColorPointerEXT(Int32 size, int type, Int32 stride, Int32 count, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glDrawArraysEXT(int mode, Int32 first, Int32 count)
        {
            Functions.glDrawArraysEXT((int)mode, (Int32)first, (Int32)count);
        }

        public static 
        void glEdgeFlagPointerEXT(Int32 stride, Int32 count, bool[] pointer)
        {
            unsafe
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    Functions.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                }
            }
        }

        public static 
        void glEdgeFlagPointerEXT(Int32 stride, Int32 count, ref bool pointer)
        {
            unsafe
            {
                fixed (bool* pointer_ptr = &pointer)
                {
                    Functions.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                }
            }
        }

        public static 
        void glEdgeFlagPointerEXT(Int32 stride, Int32 count, IntPtr pointer)
        {
            unsafe
            {
                Functions.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer);
            }
        }

        public static 
        void glGetPointervEXT(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetPointervEXT((int)pname, (IntPtr)@params);
            }
        }

        public static 
        void glGetPointervEXT(int pname, [In, Out] object @params)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetPointervEXT((int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }

        public static 
        void glIndexPointerEXT(int type, Int32 stride, Int32 count, IntPtr pointer)
        {
            unsafe
            {
                Functions.glIndexPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }
        }

        public static 
        void glIndexPointerEXT(int type, Int32 stride, Int32 count, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glIndexPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glNormalPointerEXT(int type, Int32 stride, Int32 count, IntPtr pointer)
        {
            unsafe
            {
                Functions.glNormalPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }
        }

        public static 
        void glNormalPointerEXT(int type, Int32 stride, Int32 count, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glNormalPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glTexCoordPointerEXT(Int32 size, int type, Int32 stride, Int32 count, IntPtr pointer)
        {
            unsafe
            {
                Functions.glTexCoordPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }
        }

        public static 
        void glTexCoordPointerEXT(Int32 size, int type, Int32 stride, Int32 count, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexCoordPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexPointerEXT(Int32 size, int type, Int32 stride, Int32 count, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexPointerEXT(Int32 size, int type, Int32 stride, Int32 count, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glBlendEquationEXT(int mode)
        {
            Functions.glBlendEquationEXT((int)mode);
        }

        public static 
        void glPointParameterfEXT(int pname, Single param)
        {
            Functions.glPointParameterfEXT((int)pname, (Single)param);
        }

        public static 
        void glPointParameterfvEXT(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glPointParameterfvEXT((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfvEXT(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glPointParameterfvEXT((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfvEXT(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPointParameterfvEXT((int)pname, (Single*)@params);
            }
        }

        public static 
        void glColorSubTableEXT(int target, Int32 start, Int32 count, int format, int type, IntPtr data)
        {
            unsafe
            {
                Functions.glColorSubTableEXT((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data);
            }
        }

        public static 
        void glColorSubTableEXT(int target, Int32 start, Int32 count, int format, int type, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorSubTableEXT((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glCopyColorSubTableEXT(int target, Int32 start, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyColorSubTableEXT((int)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glColorTableEXT(int target, int internalFormat, Int32 width, int format, int type, IntPtr table)
        {
            unsafe
            {
                Functions.glColorTableEXT((int)target, (int)internalFormat, (Int32)width, (int)format, (int)type, (IntPtr)table);
            }
        }

        public static 
        void glColorTableEXT(int target, int internalFormat, Int32 width, int format, int type, [In, Out] object table)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorTableEXT((int)target, (int)internalFormat, (Int32)width, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }

        public static 
        void glGetColorTableEXT(int target, int format, int type, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetColorTableEXT((int)target, (int)format, (int)type, (IntPtr)data);
            }
        }

        public static 
        void glGetColorTableEXT(int target, int format, int type, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetColorTableEXT((int)target, (int)format, (int)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glGetColorTableParameterivEXT(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetColorTableParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetColorTableParameterivEXT(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetColorTableParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetColorTableParameterivEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetColorTableParameterivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetColorTableParameterfvEXT(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetColorTableParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetColorTableParameterfvEXT(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetColorTableParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetColorTableParameterfvEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetColorTableParameterfvEXT((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glIndexMaterialEXT(int face, int mode)
        {
            Functions.glIndexMaterialEXT((int)face, (int)mode);
        }

        public static 
        void glIndexFuncEXT(int func, Single @ref)
        {
            Functions.glIndexFuncEXT((int)func, (Single)@ref);
        }

        public static 
        void glLockArraysEXT(Int32 first, Int32 count)
        {
            Functions.glLockArraysEXT((Int32)first, (Int32)count);
        }

        public static 
        void glUnlockArraysEXT()
        {
            Functions.glUnlockArraysEXT();
        }

        public static 
        void glCullParameterdvEXT(int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glCullParameterdvEXT((int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glCullParameterdvEXT(int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glCullParameterdvEXT((int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glCullParameterdvEXT(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glCullParameterdvEXT((int)pname, (Double*)@params);
            }
        }

        public static 
        void glCullParameterfvEXT(int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glCullParameterfvEXT((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glCullParameterfvEXT(int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glCullParameterfvEXT((int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glCullParameterfvEXT(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glCullParameterfvEXT((int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDrawRangeElementsEXT(int mode, UInt32 start, UInt32 end, Int32 count, int type, IntPtr indices)
        {
            unsafe
            {
                Functions.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
            }
        }

        public static 
        void glDrawRangeElementsEXT(int mode, Int32 start, Int32 end, Int32 count, int type, IntPtr indices)
        {
            unsafe
            {
                Functions.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDrawRangeElementsEXT(int mode, UInt32 start, UInt32 end, Int32 count, int type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glDrawRangeElementsEXT(int mode, Int32 start, Int32 end, Int32 count, int type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glApplyTextureEXT(int mode)
        {
            Functions.glApplyTextureEXT((int)mode);
        }

        public static 
        void glTextureLightEXT(int pname)
        {
            Functions.glTextureLightEXT((int)pname);
        }

        public static 
        void glTextureMaterialEXT(int face, int mode)
        {
            Functions.glTextureMaterialEXT((int)face, (int)mode);
        }

        public static 
        void glPixelTransformParameteriEXT(int target, int pname, Int32 param)
        {
            Functions.glPixelTransformParameteriEXT((int)target, (int)pname, (Int32)param);
        }

        public static 
        void glPixelTransformParameterfEXT(int target, int pname, Single param)
        {
            Functions.glPixelTransformParameterfEXT((int)target, (int)pname, (Single)param);
        }

        public static 
        void glPixelTransformParameterivEXT(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glPixelTransformParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTransformParameterivEXT(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glPixelTransformParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTransformParameterivEXT(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPixelTransformParameterivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glPixelTransformParameterfvEXT(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glPixelTransformParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTransformParameterfvEXT(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glPixelTransformParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTransformParameterfvEXT(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPixelTransformParameterfvEXT((int)target, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3bEXT(SByte red, SByte green, SByte blue)
        {
            Functions.glSecondaryColor3bEXT((SByte)red, (SByte)green, (SByte)blue);
        }

        public static 
        void glSecondaryColor3bEXT(Byte red, Byte green, Byte blue)
        {
            Functions.glSecondaryColor3bEXT((SByte)red, (SByte)green, (SByte)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3bvEXT(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glSecondaryColor3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3bvEXT(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glSecondaryColor3bvEXT((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3bvEXT(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glSecondaryColor3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3bvEXT(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glSecondaryColor3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3bvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3bvEXT((SByte*)v);
            }
        }

        public static 
        void glSecondaryColor3dEXT(Double red, Double green, Double blue)
        {
            Functions.glSecondaryColor3dEXT((Double)red, (Double)green, (Double)blue);
        }

        public static 
        void glSecondaryColor3dvEXT(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glSecondaryColor3dvEXT((Double*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3dvEXT(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glSecondaryColor3dvEXT((Double*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3dvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3dvEXT((Double*)v);
            }
        }

        public static 
        void glSecondaryColor3fEXT(Single red, Single green, Single blue)
        {
            Functions.glSecondaryColor3fEXT((Single)red, (Single)green, (Single)blue);
        }

        public static 
        void glSecondaryColor3fvEXT(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glSecondaryColor3fvEXT((Single*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3fvEXT(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glSecondaryColor3fvEXT((Single*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3fvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3fvEXT((Single*)v);
            }
        }

        public static 
        void glSecondaryColor3iEXT(Int32 red, Int32 green, Int32 blue)
        {
            Functions.glSecondaryColor3iEXT((Int32)red, (Int32)green, (Int32)blue);
        }

        public static 
        void glSecondaryColor3ivEXT(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glSecondaryColor3ivEXT((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3ivEXT(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glSecondaryColor3ivEXT((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3ivEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3ivEXT((Int32*)v);
            }
        }

        public static 
        void glSecondaryColor3sEXT(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glSecondaryColor3sEXT((Int16)red, (Int16)green, (Int16)blue);
        }

        public static 
        void glSecondaryColor3svEXT(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glSecondaryColor3svEXT((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3svEXT(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3svEXT((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3svEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3svEXT((Int16*)v);
            }
        }

        public static 
        void glSecondaryColor3ubEXT(Byte red, Byte green, Byte blue)
        {
            Functions.glSecondaryColor3ubEXT((Byte)red, (Byte)green, (Byte)blue);
        }

        public static 
        void glSecondaryColor3ubvEXT(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3ubvEXT(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3ubvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3ubvEXT((Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3uiEXT(UInt32 red, UInt32 green, UInt32 blue)
        {
            Functions.glSecondaryColor3uiEXT((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        public static 
        void glSecondaryColor3uiEXT(Int32 red, Int32 green, Int32 blue)
        {
            Functions.glSecondaryColor3uiEXT((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3uivEXT(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3uivEXT(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3uivEXT(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3uivEXT(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3uivEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3uivEXT((UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3usEXT(UInt16 red, UInt16 green, UInt16 blue)
        {
            Functions.glSecondaryColor3usEXT((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        public static 
        void glSecondaryColor3usEXT(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glSecondaryColor3usEXT((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3usvEXT(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3usvEXT(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3usvEXT(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3usvEXT(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3usvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3usvEXT((UInt16*)v);
            }
        }

        public static 
        void glSecondaryColorPointerEXT(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glSecondaryColorPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glSecondaryColorPointerEXT(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSecondaryColorPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glTextureNormalEXT(int mode)
        {
            Functions.glTextureNormalEXT((int)mode);
        }

        public static 
        void glMultiDrawArraysEXT(int mode, [Out] Int32[] first, [Out] Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawArraysEXT(int mode, [Out] out Int32 first, [Out] out Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Functions.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    first = *first_ptr;
                    count = *count_ptr;
                }
            }
        }

        public static 
        void glMultiDrawArraysEXT(int mode, [Out] IntPtr first, [Out] IntPtr count, Int32 primcount)
        {
            unsafe
            {
                Functions.glMultiDrawArraysEXT((int)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            }
        }

        public static 
        void glMultiDrawElementsEXT(int mode, Int32[] count, int type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiDrawElementsEXT((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawElementsEXT(int mode, IntPtr count, int type, [In, Out] object indices, Int32 primcount)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glMultiDrawElementsEXT((int)mode, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glMultiDrawElementsEXT(int mode, ref Int32 count, int type, [In, Out] object indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Functions.glMultiDrawElementsEXT((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        public static 
        void glFogCoordfEXT(Single coord)
        {
            Functions.glFogCoordfEXT((Single)coord);
        }

        public static 
        void glFogCoordfvEXT(Single[] coord)
        {
            unsafe
            {
                fixed (Single* coord_ptr = coord)
                {
                    Functions.glFogCoordfvEXT((Single*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoordfvEXT(ref Single coord)
        {
            unsafe
            {
                fixed (Single* coord_ptr = &coord)
                {
                    Functions.glFogCoordfvEXT((Single*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoordfvEXT(IntPtr coord)
        {
            unsafe
            {
                Functions.glFogCoordfvEXT((Single*)coord);
            }
        }

        public static 
        void glFogCoorddEXT(Double coord)
        {
            Functions.glFogCoorddEXT((Double)coord);
        }

        public static 
        void glFogCoorddvEXT(Double[] coord)
        {
            unsafe
            {
                fixed (Double* coord_ptr = coord)
                {
                    Functions.glFogCoorddvEXT((Double*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoorddvEXT(ref Double coord)
        {
            unsafe
            {
                fixed (Double* coord_ptr = &coord)
                {
                    Functions.glFogCoorddvEXT((Double*)coord_ptr);
                }
            }
        }

        public static 
        void glFogCoorddvEXT(IntPtr coord)
        {
            unsafe
            {
                Functions.glFogCoorddvEXT((Double*)coord);
            }
        }

        public static 
        void glFogCoordPointerEXT(int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glFogCoordPointerEXT((int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glFogCoordPointerEXT(int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glFogCoordPointerEXT((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTangent3bEXT(SByte tx, SByte ty, SByte tz)
        {
            Functions.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
        }

        public static 
        void glTangent3bEXT(Byte tx, Byte ty, Byte tz)
        {
            Functions.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
        }

        [System.CLSCompliant(false)]
        public static 
        void glTangent3bvEXT(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glTangent3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3bvEXT(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glTangent3bvEXT((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTangent3bvEXT(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glTangent3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3bvEXT(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glTangent3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3bvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glTangent3bvEXT((SByte*)v);
            }
        }

        public static 
        void glTangent3dEXT(Double tx, Double ty, Double tz)
        {
            Functions.glTangent3dEXT((Double)tx, (Double)ty, (Double)tz);
        }

        public static 
        void glTangent3dvEXT(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glTangent3dvEXT((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3dvEXT(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glTangent3dvEXT((Double*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3dvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glTangent3dvEXT((Double*)v);
            }
        }

        public static 
        void glTangent3fEXT(Single tx, Single ty, Single tz)
        {
            Functions.glTangent3fEXT((Single)tx, (Single)ty, (Single)tz);
        }

        public static 
        void glTangent3fvEXT(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glTangent3fvEXT((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3fvEXT(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTangent3fvEXT((Single*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3fvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glTangent3fvEXT((Single*)v);
            }
        }

        public static 
        void glTangent3iEXT(Int32 tx, Int32 ty, Int32 tz)
        {
            Functions.glTangent3iEXT((Int32)tx, (Int32)ty, (Int32)tz);
        }

        public static 
        void glTangent3ivEXT(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glTangent3ivEXT((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3ivEXT(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glTangent3ivEXT((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3ivEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glTangent3ivEXT((Int32*)v);
            }
        }

        public static 
        void glTangent3sEXT(Int16 tx, Int16 ty, Int16 tz)
        {
            Functions.glTangent3sEXT((Int16)tx, (Int16)ty, (Int16)tz);
        }

        public static 
        void glTangent3svEXT(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTangent3svEXT((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3svEXT(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTangent3svEXT((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glTangent3svEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glTangent3svEXT((Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBinormal3bEXT(SByte bx, SByte by, SByte bz)
        {
            Functions.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
        }

        public static 
        void glBinormal3bEXT(Byte bx, Byte by, Byte bz)
        {
            Functions.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBinormal3bvEXT(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glBinormal3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3bvEXT(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glBinormal3bvEXT((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBinormal3bvEXT(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glBinormal3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3bvEXT(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glBinormal3bvEXT((SByte*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3bvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glBinormal3bvEXT((SByte*)v);
            }
        }

        public static 
        void glBinormal3dEXT(Double bx, Double by, Double bz)
        {
            Functions.glBinormal3dEXT((Double)bx, (Double)by, (Double)bz);
        }

        public static 
        void glBinormal3dvEXT(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glBinormal3dvEXT((Double*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3dvEXT(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glBinormal3dvEXT((Double*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3dvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glBinormal3dvEXT((Double*)v);
            }
        }

        public static 
        void glBinormal3fEXT(Single bx, Single by, Single bz)
        {
            Functions.glBinormal3fEXT((Single)bx, (Single)by, (Single)bz);
        }

        public static 
        void glBinormal3fvEXT(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glBinormal3fvEXT((Single*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3fvEXT(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glBinormal3fvEXT((Single*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3fvEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glBinormal3fvEXT((Single*)v);
            }
        }

        public static 
        void glBinormal3iEXT(Int32 bx, Int32 by, Int32 bz)
        {
            Functions.glBinormal3iEXT((Int32)bx, (Int32)by, (Int32)bz);
        }

        public static 
        void glBinormal3ivEXT(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glBinormal3ivEXT((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3ivEXT(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glBinormal3ivEXT((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3ivEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glBinormal3ivEXT((Int32*)v);
            }
        }

        public static 
        void glBinormal3sEXT(Int16 bx, Int16 by, Int16 bz)
        {
            Functions.glBinormal3sEXT((Int16)bx, (Int16)by, (Int16)bz);
        }

        public static 
        void glBinormal3svEXT(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glBinormal3svEXT((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3svEXT(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glBinormal3svEXT((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glBinormal3svEXT(IntPtr v)
        {
            unsafe
            {
                Functions.glBinormal3svEXT((Int16*)v);
            }
        }

        public static 
        void glTangentPointerEXT(int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glTangentPointerEXT((int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glTangentPointerEXT(int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTangentPointerEXT((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glBinormalPointerEXT(int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glBinormalPointerEXT((int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glBinormalPointerEXT(int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glBinormalPointerEXT((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        {
            Functions.glBlendFuncSeparateEXT((int)sfactorRGB, (int)dfactorRGB, (int)sfactorAlpha, (int)dfactorAlpha);
        }

        public static 
        void glVertexWeightfEXT(Single weight)
        {
            Functions.glVertexWeightfEXT((Single)weight);
        }

        public static 
        void glVertexWeightfvEXT(Single[] weight)
        {
            unsafe
            {
                fixed (Single* weight_ptr = weight)
                {
                    Functions.glVertexWeightfvEXT((Single*)weight_ptr);
                }
            }
        }

        public static 
        void glVertexWeightfvEXT(ref Single weight)
        {
            unsafe
            {
                fixed (Single* weight_ptr = &weight)
                {
                    Functions.glVertexWeightfvEXT((Single*)weight_ptr);
                }
            }
        }

        public static 
        void glVertexWeightfvEXT(IntPtr weight)
        {
            unsafe
            {
                Functions.glVertexWeightfvEXT((Single*)weight);
            }
        }

        public static 
        void glVertexWeightPointerEXT(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexWeightPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexWeightPointerEXT(Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexWeightPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glSampleMaskEXT(Single value, bool invert)
        {
            Functions.glSampleMaskEXT((Single)value, (bool)invert);
        }

        public static 
        void glSamplePatternEXT(int pattern)
        {
            Functions.glSamplePatternEXT((int)pattern);
        }

        public static 
        void glBeginVertexShaderEXT()
        {
            Functions.glBeginVertexShaderEXT();
        }

        public static 
        void glEndVertexShaderEXT()
        {
            Functions.glEndVertexShaderEXT();
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindVertexShaderEXT(UInt32 id)
        {
            Functions.glBindVertexShaderEXT((UInt32)id);
        }

        public static 
        void glBindVertexShaderEXT(Int32 id)
        {
            Functions.glBindVertexShaderEXT((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGenVertexShadersEXT(UInt32 range)
        {
            return Functions.glGenVertexShadersEXT((UInt32)range);
        }

        public static 
        Int32 glGenVertexShadersEXT(Int32 range)
        {
            return Functions.glGenVertexShadersEXT((UInt32)range);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteVertexShaderEXT(UInt32 id)
        {
            Functions.glDeleteVertexShaderEXT((UInt32)id);
        }

        public static 
        void glDeleteVertexShaderEXT(Int32 id)
        {
            Functions.glDeleteVertexShaderEXT((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderOp1EXT(int op, UInt32 res, UInt32 arg1)
        {
            Functions.glShaderOp1EXT((int)op, (UInt32)res, (UInt32)arg1);
        }

        public static 
        void glShaderOp1EXT(int op, Int32 res, Int32 arg1)
        {
            Functions.glShaderOp1EXT((int)op, (UInt32)res, (UInt32)arg1);
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderOp2EXT(int op, UInt32 res, UInt32 arg1, UInt32 arg2)
        {
            Functions.glShaderOp2EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
        }

        public static 
        void glShaderOp2EXT(int op, Int32 res, Int32 arg1, Int32 arg2)
        {
            Functions.glShaderOp2EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
        }

        [System.CLSCompliant(false)]
        public static 
        void glShaderOp3EXT(int op, UInt32 res, UInt32 arg1, UInt32 arg2, UInt32 arg3)
        {
            Functions.glShaderOp3EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
        }

        public static 
        void glShaderOp3EXT(int op, Int32 res, Int32 arg1, Int32 arg2, Int32 arg3)
        {
            Functions.glShaderOp3EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSwizzleEXT(UInt32 res, UInt32 @in, int outX, int outY, int outZ, int outW)
        {
            Functions.glSwizzleEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
        }

        public static 
        void glSwizzleEXT(Int32 res, Int32 @in, int outX, int outY, int outZ, int outW)
        {
            Functions.glSwizzleEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
        }

        [System.CLSCompliant(false)]
        public static 
        void glWriteMaskEXT(UInt32 res, UInt32 @in, int outX, int outY, int outZ, int outW)
        {
            Functions.glWriteMaskEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
        }

        public static 
        void glWriteMaskEXT(Int32 res, Int32 @in, int outX, int outY, int outZ, int outW)
        {
            Functions.glWriteMaskEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
        }

        [System.CLSCompliant(false)]
        public static 
        void glInsertComponentEXT(UInt32 res, UInt32 src, UInt32 num)
        {
            Functions.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
        }

        public static 
        void glInsertComponentEXT(Int32 res, Int32 src, Int32 num)
        {
            Functions.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
        }

        [System.CLSCompliant(false)]
        public static 
        void glExtractComponentEXT(UInt32 res, UInt32 src, UInt32 num)
        {
            Functions.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
        }

        public static 
        void glExtractComponentEXT(Int32 res, Int32 src, Int32 num)
        {
            Functions.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGenSymbolsEXT(int datatype, int storagetype, int range, UInt32 components)
        {
            return Functions.glGenSymbolsEXT((int)datatype, (int)storagetype, (int)range, (UInt32)components);
        }

        public static 
        Int32 glGenSymbolsEXT(int datatype, int storagetype, int range, Int32 components)
        {
            return Functions.glGenSymbolsEXT((int)datatype, (int)storagetype, (int)range, (UInt32)components);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetInvariantEXT(UInt32 id, int type, IntPtr addr)
        {
            unsafe
            {
                Functions.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr);
            }
        }

        public static 
        void glSetInvariantEXT(Int32 id, int type, IntPtr addr)
        {
            unsafe
            {
                Functions.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetInvariantEXT(UInt32 id, int type, [In, Out] object addr)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }
        }

        public static 
        void glSetInvariantEXT(Int32 id, int type, [In, Out] object addr)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetLocalConstantEXT(UInt32 id, int type, IntPtr addr)
        {
            unsafe
            {
                Functions.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr);
            }
        }

        public static 
        void glSetLocalConstantEXT(Int32 id, int type, IntPtr addr)
        {
            unsafe
            {
                Functions.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetLocalConstantEXT(UInt32 id, int type, [In, Out] object addr)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }
        }

        public static 
        void glSetLocalConstantEXT(Int32 id, int type, [In, Out] object addr)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantbvEXT(UInt32 id, SByte[] addr)
        {
            unsafe
            {
                fixed (SByte* addr_ptr = addr)
                {
                    Functions.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantbvEXT(Int32 id, Byte[] addr)
        {
            unsafe
            {
                fixed (Byte* addr_ptr = addr)
                {
                    Functions.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantbvEXT(UInt32 id, ref SByte addr)
        {
            unsafe
            {
                fixed (SByte* addr_ptr = &addr)
                {
                    Functions.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantbvEXT(Int32 id, ref Byte addr)
        {
            unsafe
            {
                fixed (Byte* addr_ptr = &addr)
                {
                    Functions.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantbvEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantbvEXT((UInt32)id, (SByte*)addr);
            }
        }

        public static 
        void glVariantbvEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantbvEXT((UInt32)id, (SByte*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantsvEXT(UInt32 id, Int16[] addr)
        {
            unsafe
            {
                fixed (Int16* addr_ptr = addr)
                {
                    Functions.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantsvEXT(Int32 id, Int16[] addr)
        {
            unsafe
            {
                fixed (Int16* addr_ptr = addr)
                {
                    Functions.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantsvEXT(UInt32 id, ref Int16 addr)
        {
            unsafe
            {
                fixed (Int16* addr_ptr = &addr)
                {
                    Functions.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantsvEXT(Int32 id, ref Int16 addr)
        {
            unsafe
            {
                fixed (Int16* addr_ptr = &addr)
                {
                    Functions.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantsvEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantsvEXT((UInt32)id, (Int16*)addr);
            }
        }

        public static 
        void glVariantsvEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantsvEXT((UInt32)id, (Int16*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantivEXT(UInt32 id, Int32[] addr)
        {
            unsafe
            {
                fixed (Int32* addr_ptr = addr)
                {
                    Functions.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantivEXT(Int32 id, Int32[] addr)
        {
            unsafe
            {
                fixed (Int32* addr_ptr = addr)
                {
                    Functions.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantivEXT(UInt32 id, ref Int32 addr)
        {
            unsafe
            {
                fixed (Int32* addr_ptr = &addr)
                {
                    Functions.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantivEXT(Int32 id, ref Int32 addr)
        {
            unsafe
            {
                fixed (Int32* addr_ptr = &addr)
                {
                    Functions.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantivEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantivEXT((UInt32)id, (Int32*)addr);
            }
        }

        public static 
        void glVariantivEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantivEXT((UInt32)id, (Int32*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantfvEXT(UInt32 id, Single[] addr)
        {
            unsafe
            {
                fixed (Single* addr_ptr = addr)
                {
                    Functions.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantfvEXT(Int32 id, Single[] addr)
        {
            unsafe
            {
                fixed (Single* addr_ptr = addr)
                {
                    Functions.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantfvEXT(UInt32 id, ref Single addr)
        {
            unsafe
            {
                fixed (Single* addr_ptr = &addr)
                {
                    Functions.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantfvEXT(Int32 id, ref Single addr)
        {
            unsafe
            {
                fixed (Single* addr_ptr = &addr)
                {
                    Functions.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantfvEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantfvEXT((UInt32)id, (Single*)addr);
            }
        }

        public static 
        void glVariantfvEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantfvEXT((UInt32)id, (Single*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantdvEXT(UInt32 id, Double[] addr)
        {
            unsafe
            {
                fixed (Double* addr_ptr = addr)
                {
                    Functions.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantdvEXT(Int32 id, Double[] addr)
        {
            unsafe
            {
                fixed (Double* addr_ptr = addr)
                {
                    Functions.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantdvEXT(UInt32 id, ref Double addr)
        {
            unsafe
            {
                fixed (Double* addr_ptr = &addr)
                {
                    Functions.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantdvEXT(Int32 id, ref Double addr)
        {
            unsafe
            {
                fixed (Double* addr_ptr = &addr)
                {
                    Functions.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantdvEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantdvEXT((UInt32)id, (Double*)addr);
            }
        }

        public static 
        void glVariantdvEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantdvEXT((UInt32)id, (Double*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantubvEXT(UInt32 id, Byte[] addr)
        {
            unsafe
            {
                fixed (Byte* addr_ptr = addr)
                {
                    Functions.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantubvEXT(Int32 id, Byte[] addr)
        {
            unsafe
            {
                fixed (Byte* addr_ptr = addr)
                {
                    Functions.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantubvEXT(UInt32 id, ref Byte addr)
        {
            unsafe
            {
                fixed (Byte* addr_ptr = &addr)
                {
                    Functions.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantubvEXT(Int32 id, ref Byte addr)
        {
            unsafe
            {
                fixed (Byte* addr_ptr = &addr)
                {
                    Functions.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantubvEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantubvEXT((UInt32)id, (Byte*)addr);
            }
        }

        public static 
        void glVariantubvEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantubvEXT((UInt32)id, (Byte*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantusvEXT(UInt32 id, UInt16[] addr)
        {
            unsafe
            {
                fixed (UInt16* addr_ptr = addr)
                {
                    Functions.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantusvEXT(Int32 id, Int16[] addr)
        {
            unsafe
            {
                fixed (Int16* addr_ptr = addr)
                {
                    Functions.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantusvEXT(UInt32 id, ref UInt16 addr)
        {
            unsafe
            {
                fixed (UInt16* addr_ptr = &addr)
                {
                    Functions.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantusvEXT(Int32 id, ref Int16 addr)
        {
            unsafe
            {
                fixed (Int16* addr_ptr = &addr)
                {
                    Functions.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantusvEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantusvEXT((UInt32)id, (UInt16*)addr);
            }
        }

        public static 
        void glVariantusvEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantusvEXT((UInt32)id, (UInt16*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantuivEXT(UInt32 id, UInt32[] addr)
        {
            unsafe
            {
                fixed (UInt32* addr_ptr = addr)
                {
                    Functions.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantuivEXT(Int32 id, Int32[] addr)
        {
            unsafe
            {
                fixed (Int32* addr_ptr = addr)
                {
                    Functions.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantuivEXT(UInt32 id, ref UInt32 addr)
        {
            unsafe
            {
                fixed (UInt32* addr_ptr = &addr)
                {
                    Functions.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                }
            }
        }

        public static 
        void glVariantuivEXT(Int32 id, ref Int32 addr)
        {
            unsafe
            {
                fixed (Int32* addr_ptr = &addr)
                {
                    Functions.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantuivEXT(UInt32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantuivEXT((UInt32)id, (UInt32*)addr);
            }
        }

        public static 
        void glVariantuivEXT(Int32 id, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantuivEXT((UInt32)id, (UInt32*)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantPointerEXT(UInt32 id, int type, UInt32 stride, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr);
            }
        }

        public static 
        void glVariantPointerEXT(Int32 id, int type, Int32 stride, IntPtr addr)
        {
            unsafe
            {
                Functions.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantPointerEXT(UInt32 id, int type, UInt32 stride, [In, Out] object addr)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }
        }

        public static 
        void glVariantPointerEXT(Int32 id, int type, Int32 stride, [In, Out] object addr)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glEnableVariantClientStateEXT(UInt32 id)
        {
            Functions.glEnableVariantClientStateEXT((UInt32)id);
        }

        public static 
        void glEnableVariantClientStateEXT(Int32 id)
        {
            Functions.glEnableVariantClientStateEXT((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDisableVariantClientStateEXT(UInt32 id)
        {
            Functions.glDisableVariantClientStateEXT((UInt32)id);
        }

        public static 
        void glDisableVariantClientStateEXT(Int32 id)
        {
            Functions.glDisableVariantClientStateEXT((UInt32)id);
        }

        public static 
        Int32 glBindLightParameterEXT(int light, int value)
        {
            return Functions.glBindLightParameterEXT((int)light, (int)value);
        }

        public static 
        Int32 glBindMaterialParameterEXT(int face, int value)
        {
            return Functions.glBindMaterialParameterEXT((int)face, (int)value);
        }

        public static 
        Int32 glBindTexGenParameterEXT(int unit, int coord, int value)
        {
            return Functions.glBindTexGenParameterEXT((int)unit, (int)coord, (int)value);
        }

        public static 
        Int32 glBindTextureUnitParameterEXT(int unit, int value)
        {
            return Functions.glBindTextureUnitParameterEXT((int)unit, (int)value);
        }

        public static 
        Int32 glBindParameterEXT(int value)
        {
            return Functions.glBindParameterEXT((int)value);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsVariantEnabledEXT(UInt32 id, int cap)
        {
            return Functions.glIsVariantEnabledEXT((UInt32)id, (int)cap);
        }

        public static 
        bool glIsVariantEnabledEXT(Int32 id, int cap)
        {
            return Functions.glIsVariantEnabledEXT((UInt32)id, (int)cap);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantBooleanvEXT(UInt32 id, int value, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetVariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                }
            }
        }

        public static 
        void glGetVariantBooleanvEXT(Int32 id, int value, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetVariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantBooleanvEXT(UInt32 id, int value, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetVariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetVariantBooleanvEXT(Int32 id, int value, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetVariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantBooleanvEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantBooleanvEXT((UInt32)id, (int)value, (bool*)data);
            }
        }

        public static 
        void glGetVariantBooleanvEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantBooleanvEXT((UInt32)id, (int)value, (bool*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantIntegervEXT(UInt32 id, int value, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                }
            }
        }

        public static 
        void glGetVariantIntegervEXT(Int32 id, int value, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantIntegervEXT(UInt32 id, int value, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetVariantIntegervEXT(Int32 id, int value, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantIntegervEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
            }
        }

        public static 
        void glGetVariantIntegervEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantFloatvEXT(UInt32 id, int value, [Out] Single[] data)
        {
            unsafe
            {
                fixed (Single* data_ptr = data)
                {
                    Functions.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                }
            }
        }

        public static 
        void glGetVariantFloatvEXT(Int32 id, int value, [Out] Single[] data)
        {
            unsafe
            {
                fixed (Single* data_ptr = data)
                {
                    Functions.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantFloatvEXT(UInt32 id, int value, [Out] out Single data)
        {
            unsafe
            {
                fixed (Single* data_ptr = &data)
                {
                    Functions.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetVariantFloatvEXT(Int32 id, int value, [Out] out Single data)
        {
            unsafe
            {
                fixed (Single* data_ptr = &data)
                {
                    Functions.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantFloatvEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
            }
        }

        public static 
        void glGetVariantFloatvEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantPointervEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data);
            }
        }

        public static 
        void glGetVariantPointervEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantPointervEXT(UInt32 id, int value, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        public static 
        void glGetVariantPointervEXT(Int32 id, int value, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantBooleanvEXT(UInt32 id, int value, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                }
            }
        }

        public static 
        void glGetInvariantBooleanvEXT(Int32 id, int value, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantBooleanvEXT(UInt32 id, int value, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetInvariantBooleanvEXT(Int32 id, int value, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantBooleanvEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (bool*)data);
            }
        }

        public static 
        void glGetInvariantBooleanvEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (bool*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantIntegervEXT(UInt32 id, int value, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                }
            }
        }

        public static 
        void glGetInvariantIntegervEXT(Int32 id, int value, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantIntegervEXT(UInt32 id, int value, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetInvariantIntegervEXT(Int32 id, int value, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantIntegervEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
            }
        }

        public static 
        void glGetInvariantIntegervEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantFloatvEXT(UInt32 id, int value, [Out] Single[] data)
        {
            unsafe
            {
                fixed (Single* data_ptr = data)
                {
                    Functions.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                }
            }
        }

        public static 
        void glGetInvariantFloatvEXT(Int32 id, int value, [Out] Single[] data)
        {
            unsafe
            {
                fixed (Single* data_ptr = data)
                {
                    Functions.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantFloatvEXT(UInt32 id, int value, [Out] out Single data)
        {
            unsafe
            {
                fixed (Single* data_ptr = &data)
                {
                    Functions.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetInvariantFloatvEXT(Int32 id, int value, [Out] out Single data)
        {
            unsafe
            {
                fixed (Single* data_ptr = &data)
                {
                    Functions.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetInvariantFloatvEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
            }
        }

        public static 
        void glGetInvariantFloatvEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantBooleanvEXT(UInt32 id, int value, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                }
            }
        }

        public static 
        void glGetLocalConstantBooleanvEXT(Int32 id, int value, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantBooleanvEXT(UInt32 id, int value, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetLocalConstantBooleanvEXT(Int32 id, int value, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantBooleanvEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (bool*)data);
            }
        }

        public static 
        void glGetLocalConstantBooleanvEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (bool*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantIntegervEXT(UInt32 id, int value, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                }
            }
        }

        public static 
        void glGetLocalConstantIntegervEXT(Int32 id, int value, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantIntegervEXT(UInt32 id, int value, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetLocalConstantIntegervEXT(Int32 id, int value, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantIntegervEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
            }
        }

        public static 
        void glGetLocalConstantIntegervEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantFloatvEXT(UInt32 id, int value, [Out] Single[] data)
        {
            unsafe
            {
                fixed (Single* data_ptr = data)
                {
                    Functions.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                }
            }
        }

        public static 
        void glGetLocalConstantFloatvEXT(Int32 id, int value, [Out] Single[] data)
        {
            unsafe
            {
                fixed (Single* data_ptr = data)
                {
                    Functions.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantFloatvEXT(UInt32 id, int value, [Out] out Single data)
        {
            unsafe
            {
                fixed (Single* data_ptr = &data)
                {
                    Functions.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetLocalConstantFloatvEXT(Int32 id, int value, [Out] out Single data)
        {
            unsafe
            {
                fixed (Single* data_ptr = &data)
                {
                    Functions.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetLocalConstantFloatvEXT(UInt32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data);
            }
        }

        public static 
        void glGetLocalConstantFloatvEXT(Int32 id, int value, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data);
            }
        }

        public static 
        void glActiveStencilFaceEXT(int face)
        {
            Functions.glActiveStencilFaceEXT((int)face);
        }

        public static 
        void glDepthBoundsEXT(Double zmin, Double zmax)
        {
            Functions.glDepthBoundsEXT((Double)zmin, (Double)zmax);
        }

        public static 
        void glBlendEquationSeparateEXT(int modeRGB, int modeAlpha)
        {
            Functions.glBlendEquationSeparateEXT((int)modeRGB, (int)modeAlpha);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsRenderbufferEXT(UInt32 renderbuffer)
        {
            return Functions.glIsRenderbufferEXT((UInt32)renderbuffer);
        }

        public static 
        bool glIsRenderbufferEXT(Int32 renderbuffer)
        {
            return Functions.glIsRenderbufferEXT((UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindRenderbufferEXT(int target, UInt32 renderbuffer)
        {
            Functions.glBindRenderbufferEXT((int)target, (UInt32)renderbuffer);
        }

        public static 
        void glBindRenderbufferEXT(int target, Int32 renderbuffer)
        {
            Functions.glBindRenderbufferEXT((int)target, (UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteRenderbuffersEXT(Int32 n, UInt32[] renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Functions.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        public static 
        void glDeleteRenderbuffersEXT(Int32 n, Int32[] renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Functions.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteRenderbuffersEXT(Int32 n, ref UInt32 renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Functions.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        public static 
        void glDeleteRenderbuffersEXT(Int32 n, ref Int32 renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Functions.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        public static 
        void glDeleteRenderbuffersEXT(Int32 n, IntPtr renderbuffers)
        {
            unsafe
            {
                Functions.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenRenderbuffersEXT(Int32 n, [Out] UInt32[] renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Functions.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        public static 
        void glGenRenderbuffersEXT(Int32 n, [Out] Int32[] renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Functions.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenRenderbuffersEXT(Int32 n, [Out] out UInt32 renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Functions.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
        }

        public static 
        void glGenRenderbuffersEXT(Int32 n, [Out] out Int32 renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Functions.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
        }

        public static 
        void glGenRenderbuffersEXT(Int32 n, [Out] IntPtr renderbuffers)
        {
            unsafe
            {
                Functions.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }
        }

        public static 
        void glRenderbufferStorageEXT(int target, int internalformat, Int32 width, Int32 height)
        {
            Functions.glRenderbufferStorageEXT((int)target, (int)internalformat, (Int32)width, (Int32)height);
        }

        public static 
        void glGetRenderbufferParameterivEXT(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetRenderbufferParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetRenderbufferParameterivEXT(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetRenderbufferParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetRenderbufferParameterivEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetRenderbufferParameterivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsFramebufferEXT(UInt32 framebuffer)
        {
            return Functions.glIsFramebufferEXT((UInt32)framebuffer);
        }

        public static 
        bool glIsFramebufferEXT(Int32 framebuffer)
        {
            return Functions.glIsFramebufferEXT((UInt32)framebuffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindFramebufferEXT(int target, UInt32 framebuffer)
        {
            Functions.glBindFramebufferEXT((int)target, (UInt32)framebuffer);
        }

        public static 
        void glBindFramebufferEXT(int target, Int32 framebuffer)
        {
            Functions.glBindFramebufferEXT((int)target, (UInt32)framebuffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteFramebuffersEXT(Int32 n, UInt32[] framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Functions.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        public static 
        void glDeleteFramebuffersEXT(Int32 n, Int32[] framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Functions.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteFramebuffersEXT(Int32 n, ref UInt32 framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Functions.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        public static 
        void glDeleteFramebuffersEXT(Int32 n, ref Int32 framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Functions.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        public static 
        void glDeleteFramebuffersEXT(Int32 n, IntPtr framebuffers)
        {
            unsafe
            {
                Functions.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenFramebuffersEXT(Int32 n, [Out] UInt32[] framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Functions.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        public static 
        void glGenFramebuffersEXT(Int32 n, [Out] Int32[] framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Functions.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenFramebuffersEXT(Int32 n, [Out] out UInt32 framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Functions.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
        }

        public static 
        void glGenFramebuffersEXT(Int32 n, [Out] out Int32 framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Functions.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
        }

        public static 
        void glGenFramebuffersEXT(Int32 n, [Out] IntPtr framebuffers)
        {
            unsafe
            {
                Functions.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }
        }

        public static 
        int glCheckFramebufferStatusEXT(int target)
        {
            return Functions.glCheckFramebufferStatusEXT((int)target);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFramebufferTexture1DEXT(int target, int attachment, int textarget, UInt32 texture, Int32 level)
        {
            Functions.glFramebufferTexture1DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
        }

        public static 
        void glFramebufferTexture1DEXT(int target, int attachment, int textarget, Int32 texture, Int32 level)
        {
            Functions.glFramebufferTexture1DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFramebufferTexture2DEXT(int target, int attachment, int textarget, UInt32 texture, Int32 level)
        {
            Functions.glFramebufferTexture2DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
        }

        public static 
        void glFramebufferTexture2DEXT(int target, int attachment, int textarget, Int32 texture, Int32 level)
        {
            Functions.glFramebufferTexture2DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFramebufferTexture3DEXT(int target, int attachment, int textarget, UInt32 texture, Int32 level, Int32 zoffset)
        {
            Functions.glFramebufferTexture3DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        public static 
        void glFramebufferTexture3DEXT(int target, int attachment, int textarget, Int32 texture, Int32 level, Int32 zoffset)
        {
            Functions.glFramebufferTexture3DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, UInt32 renderbuffer)
        {
            Functions.glFramebufferRenderbufferEXT((int)target, (int)attachment, (int)renderbuffertarget, (UInt32)renderbuffer);
        }

        public static 
        void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, Int32 renderbuffer)
        {
            Functions.glFramebufferRenderbufferEXT((int)target, (int)attachment, (int)renderbuffertarget, (UInt32)renderbuffer);
        }

        public static 
        void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetFramebufferAttachmentParameterivEXT((int)target, (int)attachment, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetFramebufferAttachmentParameterivEXT((int)target, (int)attachment, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFramebufferAttachmentParameterivEXT((int)target, (int)attachment, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGenerateMipmapEXT(int target)
        {
            Functions.glGenerateMipmapEXT((int)target);
        }

        [System.CLSCompliant(false)]
        public static 
        void glStencilClearTagEXT(Int32 stencilTagBits, UInt32 stencilClearTag)
        {
            Functions.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
        }

        public static 
        void glStencilClearTagEXT(Int32 stencilTagBits, Int32 stencilClearTag)
        {
            Functions.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
        }

        public static 
        void glBlitFramebufferEXT(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, int mask, int filter)
        {
            Functions.glBlitFramebufferEXT((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (int)mask, (int)filter);
        }

        public static 
        void glRenderbufferStorageMultisampleEXT(int target, Int32 samples, int internalformat, Int32 width, Int32 height)
        {
            Functions.glRenderbufferStorageMultisampleEXT((int)target, (Int32)samples, (int)internalformat, (Int32)width, (Int32)height);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjecti64vEXT(UInt32 id, int pname, [Out] Int64[] @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Functions.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryObjecti64vEXT(Int32 id, int pname, [Out] Int64[] @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Functions.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjecti64vEXT(UInt32 id, int pname, [Out] out Int64 @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryObjecti64vEXT(Int32 id, int pname, [Out] out Int64 @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjecti64vEXT(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params);
            }
        }

        public static 
        void glGetQueryObjecti64vEXT(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectui64vEXT(UInt32 id, int pname, [Out] UInt64[] @params)
        {
            unsafe
            {
                fixed (UInt64* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
                }
            }
        }

        public static 
        void glGetQueryObjectui64vEXT(Int32 id, int pname, [Out] Int64[] @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Functions.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectui64vEXT(UInt32 id, int pname, [Out] out UInt64 @params)
        {
            unsafe
            {
                fixed (UInt64* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetQueryObjectui64vEXT(Int32 id, int pname, [Out] out Int64 @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Functions.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetQueryObjectui64vEXT(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params);
            }
        }

        public static 
        void glGetQueryObjectui64vEXT(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameters4fvEXT(int target, UInt32 index, Int32 count, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameters4fvEXT(int target, Int32 index, Int32 count, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameters4fvEXT(int target, UInt32 index, Int32 count, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameters4fvEXT(int target, Int32 index, Int32 count, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameters4fvEXT(int target, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
            }
        }

        public static 
        void glProgramEnvParameters4fvEXT(int target, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameters4fvEXT(int target, UInt32 index, Int32 count, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameters4fvEXT(int target, Int32 index, Int32 count, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameters4fvEXT(int target, UInt32 index, Int32 count, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameters4fvEXT(int target, Int32 index, Int32 count, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameters4fvEXT(int target, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
            }
        }

        public static 
        void glProgramLocalParameters4fvEXT(int target, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glFramebufferTextureEXT(int target, int attachment, UInt32 texture, Int32 level)
        {
            Functions.glFramebufferTextureEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level);
        }

        public static 
        void glFramebufferTextureEXT(int target, int attachment, Int32 texture, Int32 level)
        {
            Functions.glFramebufferTextureEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFramebufferTextureLayerEXT(int target, int attachment, UInt32 texture, Int32 level, Int32 layer)
        {
            Functions.glFramebufferTextureLayerEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        public static 
        void glFramebufferTextureLayerEXT(int target, int attachment, Int32 texture, Int32 level, Int32 layer)
        {
            Functions.glFramebufferTextureLayerEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFramebufferTextureFaceEXT(int target, int attachment, UInt32 texture, Int32 level, int face)
        {
            Functions.glFramebufferTextureFaceEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (int)face);
        }

        public static 
        void glFramebufferTextureFaceEXT(int target, int attachment, Int32 texture, Int32 level, int face)
        {
            Functions.glFramebufferTextureFaceEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (int)face);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameteriEXT(UInt32 program, int pname, Int32 value)
        {
            Functions.glProgramParameteriEXT((UInt32)program, (int)pname, (Int32)value);
        }

        public static 
        void glProgramParameteriEXT(Int32 program, int pname, Int32 value)
        {
            Functions.glProgramParameteriEXT((UInt32)program, (int)pname, (Int32)value);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1iEXT(UInt32 index, Int32 x)
        {
            Functions.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
        }

        public static 
        void glVertexAttribI1iEXT(Int32 index, Int32 x)
        {
            Functions.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2iEXT(UInt32 index, Int32 x, Int32 y)
        {
            Functions.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
        }

        public static 
        void glVertexAttribI2iEXT(Int32 index, Int32 x, Int32 y)
        {
            Functions.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3iEXT(UInt32 index, Int32 x, Int32 y, Int32 z)
        {
            Functions.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
        }

        public static 
        void glVertexAttribI3iEXT(Int32 index, Int32 x, Int32 y, Int32 z)
        {
            Functions.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4iEXT(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        public static 
        void glVertexAttribI4iEXT(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1uiEXT(UInt32 index, UInt32 x)
        {
            Functions.glVertexAttribI1uiEXT((UInt32)index, (UInt32)x);
        }

        public static 
        void glVertexAttribI1uiEXT(Int32 index, Int32 x)
        {
            Functions.glVertexAttribI1uiEXT((UInt32)index, (UInt32)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2uiEXT(UInt32 index, UInt32 x, UInt32 y)
        {
            Functions.glVertexAttribI2uiEXT((UInt32)index, (UInt32)x, (UInt32)y);
        }

        public static 
        void glVertexAttribI2uiEXT(Int32 index, Int32 x, Int32 y)
        {
            Functions.glVertexAttribI2uiEXT((UInt32)index, (UInt32)x, (UInt32)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3uiEXT(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
        {
            Functions.glVertexAttribI3uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
        }

        public static 
        void glVertexAttribI3uiEXT(Int32 index, Int32 x, Int32 y, Int32 z)
        {
            Functions.glVertexAttribI3uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4uiEXT(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
        {
            Functions.glVertexAttribI4uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        public static 
        void glVertexAttribI4uiEXT(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glVertexAttribI4uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1ivEXT(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI1ivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1ivEXT(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI1ivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1ivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttribI1ivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2ivEXT(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI2ivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2ivEXT(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI2ivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2ivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttribI2ivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3ivEXT(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI3ivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3ivEXT(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI3ivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3ivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttribI3ivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4ivEXT(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4ivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4ivEXT(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4ivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4ivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
            }
        }

        public static 
        void glVertexAttribI4ivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1uivEXT(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI1uivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1uivEXT(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI1uivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI1uivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttribI1uivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2uivEXT(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI2uivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2uivEXT(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI2uivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI2uivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttribI2uivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3uivEXT(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI3uivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3uivEXT(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI3uivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI3uivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttribI3uivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4uivEXT(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Functions.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4uivEXT(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4uivEXT(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Functions.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4uivEXT(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4uivEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        public static 
        void glVertexAttribI4uivEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4bvEXT(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Functions.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4bvEXT(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4bvEXT(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Functions.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4bvEXT(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4bvEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v);
            }
        }

        public static 
        void glVertexAttribI4bvEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4svEXT(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4svEXT(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4svEXT(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4svEXT(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4svEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttribI4svEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4ubvEXT(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4ubvEXT(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4ubvEXT(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4ubvEXT(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4ubvEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
            }
        }

        public static 
        void glVertexAttribI4ubvEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4usvEXT(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4usvEXT(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4usvEXT(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribI4usvEXT(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribI4usvEXT(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttribI4usvEXT(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribIPointerEXT(UInt32 index, Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexAttribIPointerEXT(Int32 index, Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribIPointerEXT(UInt32 index, Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexAttribIPointerEXT(Int32 index, Int32 size, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribIivEXT(UInt32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribIivEXT(Int32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribIivEXT(UInt32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribIivEXT(Int32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribIivEXT(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetVertexAttribIivEXT(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribIuivEXT(UInt32 index, int pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribIuivEXT(Int32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribIuivEXT(UInt32 index, int pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribIuivEXT(Int32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribIuivEXT(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params);
            }
        }

        public static 
        void glGetVertexAttribIuivEXT(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformuivEXT(UInt32 program, Int32 location, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetUniformuivEXT(Int32 program, Int32 location, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformuivEXT(UInt32 program, Int32 location, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetUniformuivEXT(Int32 program, Int32 location, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetUniformuivEXT(UInt32 program, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
            }
        }

        public static 
        void glGetUniformuivEXT(Int32 program, Int32 location, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindFragDataLocationEXT(UInt32 program, UInt32 color, System.String name)
        {
            Functions.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (System.String)name);
        }

        public static 
        void glBindFragDataLocationEXT(Int32 program, Int32 color, System.String name)
        {
            Functions.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGetFragDataLocationEXT(UInt32 program, System.String name)
        {
            return Functions.glGetFragDataLocationEXT((UInt32)program, (System.String)name);
        }

        public static 
        Int32 glGetFragDataLocationEXT(Int32 program, System.String name)
        {
            return Functions.glGetFragDataLocationEXT((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform1uiEXT(Int32 location, UInt32 v0)
        {
            Functions.glUniform1uiEXT((Int32)location, (UInt32)v0);
        }

        public static 
        void glUniform1uiEXT(Int32 location, Int32 v0)
        {
            Functions.glUniform1uiEXT((Int32)location, (UInt32)v0);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform2uiEXT(Int32 location, UInt32 v0, UInt32 v1)
        {
            Functions.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
        }

        public static 
        void glUniform2uiEXT(Int32 location, Int32 v0, Int32 v1)
        {
            Functions.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform3uiEXT(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
        {
            Functions.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
        }

        public static 
        void glUniform3uiEXT(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
            Functions.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform4uiEXT(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
        {
            Functions.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
        }

        public static 
        void glUniform4uiEXT(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
            Functions.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform1uivEXT(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Functions.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1uivEXT(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform1uivEXT(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Functions.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1uivEXT(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform1uivEXT(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform2uivEXT(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Functions.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2uivEXT(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform2uivEXT(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Functions.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2uivEXT(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform2uivEXT(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform3uivEXT(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Functions.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3uivEXT(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform3uivEXT(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Functions.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3uivEXT(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform3uivEXT(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform4uivEXT(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Functions.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4uivEXT(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Functions.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniform4uivEXT(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Functions.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4uivEXT(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Functions.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        public static 
        void glUniform4uivEXT(Int32 location, Int32 count, IntPtr value)
        {
            unsafe
            {
                Functions.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }
        }

        public static 
        void glDrawArraysInstancedEXT(int mode, Int32 start, Int32 count, Int32 primcount)
        {
            Functions.glDrawArraysInstancedEXT((int)mode, (Int32)start, (Int32)count, (Int32)primcount);
        }

        public static 
        void glDrawElementsInstancedEXT(int mode, Int32 count, int type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                Functions.glDrawElementsInstancedEXT((int)mode, (Int32)count, (int)type, (IntPtr)indices, (Int32)primcount);
            }
        }

        public static 
        void glDrawElementsInstancedEXT(int mode, Int32 count, int type, [In, Out] object indices, Int32 primcount)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glDrawElementsInstancedEXT((int)mode, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexBufferEXT(int target, int internalformat, UInt32 buffer)
        {
            Functions.glTexBufferEXT((int)target, (int)internalformat, (UInt32)buffer);
        }

        public static 
        void glTexBufferEXT(int target, int internalformat, Int32 buffer)
        {
            Functions.glTexBufferEXT((int)target, (int)internalformat, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColorMaskIndexedEXT(UInt32 index, bool r, bool g, bool b, bool a)
        {
            Functions.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
        }

        public static 
        void glColorMaskIndexedEXT(Int32 index, bool r, bool g, bool b, bool a)
        {
            Functions.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetBooleanIndexedvEXT(int target, UInt32 index, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        public static 
        void glGetBooleanIndexedvEXT(int target, Int32 index, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Functions.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetBooleanIndexedvEXT(int target, UInt32 index, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetBooleanIndexedvEXT(int target, Int32 index, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Functions.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetBooleanIndexedvEXT(int target, UInt32 index, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (bool*)data);
            }
        }

        public static 
        void glGetBooleanIndexedvEXT(int target, Int32 index, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (bool*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetIntegerIndexedvEXT(int target, UInt32 index, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        public static 
        void glGetIntegerIndexedvEXT(int target, Int32 index, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Functions.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetIntegerIndexedvEXT(int target, UInt32 index, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        public static 
        void glGetIntegerIndexedvEXT(int target, Int32 index, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Functions.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetIntegerIndexedvEXT(int target, UInt32 index, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data);
            }
        }

        public static 
        void glGetIntegerIndexedvEXT(int target, Int32 index, [Out] IntPtr data)
        {
            unsafe
            {
                Functions.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glEnableIndexedEXT(int target, UInt32 index)
        {
            Functions.glEnableIndexedEXT((int)target, (UInt32)index);
        }

        public static 
        void glEnableIndexedEXT(int target, Int32 index)
        {
            Functions.glEnableIndexedEXT((int)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDisableIndexedEXT(int target, UInt32 index)
        {
            Functions.glDisableIndexedEXT((int)target, (UInt32)index);
        }

        public static 
        void glDisableIndexedEXT(int target, Int32 index)
        {
            Functions.glDisableIndexedEXT((int)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsEnabledIndexedEXT(int target, UInt32 index)
        {
            return Functions.glIsEnabledIndexedEXT((int)target, (UInt32)index);
        }

        public static 
        bool glIsEnabledIndexedEXT(int target, Int32 index)
        {
            return Functions.glIsEnabledIndexedEXT((int)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUniformBufferEXT(UInt32 program, Int32 location, UInt32 buffer)
        {
            Functions.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
        }

        public static 
        void glUniformBufferEXT(Int32 program, Int32 location, Int32 buffer)
        {
            Functions.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGetUniformBufferSizeEXT(UInt32 program, Int32 location)
        {
            return Functions.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
        }

        public static 
        Int32 glGetUniformBufferSizeEXT(Int32 program, Int32 location)
        {
            return Functions.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
        }

        [System.CLSCompliant(false)]
        public static 
        IntPtr glGetUniformOffsetEXT(UInt32 program, Int32 location)
        {
            return Functions.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
        }

        public static 
        IntPtr glGetUniformOffsetEXT(Int32 program, Int32 location)
        {
            return Functions.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
        }

        public static 
        void glTexParameterIivEXT(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameterIivEXT(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameterIivEXT(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexParameterIivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexParameterIuivEXT(int target, int pname, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameterIuivEXT(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexParameterIuivEXT(int target, int pname, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameterIuivEXT(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glTexParameterIuivEXT(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params);
            }
        }

        public static 
        void glGetTexParameterIivEXT(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexParameterIivEXT(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexParameterIivEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexParameterIivEXT((int)target, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTexParameterIuivEXT(int target, int pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTexParameterIuivEXT(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTexParameterIuivEXT(int target, int pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexParameterIuivEXT(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTexParameterIuivEXT(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params);
            }
        }

        public static 
        void glClearColorIiEXT(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            Functions.glClearColorIiEXT((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
        }

        [System.CLSCompliant(false)]
        public static 
        void glClearColorIuiEXT(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
        {
            Functions.glClearColorIuiEXT((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
        }

        public static 
        void glClearColorIuiEXT(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            Functions.glClearColorIuiEXT((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
        }

        public static 
        void glGetTexFilterFuncSGIS(int target, int filter, [Out] Single[] weights)
        {
            unsafe
            {
                fixed (Single* weights_ptr = weights)
                {
                    Functions.glGetTexFilterFuncSGIS((int)target, (int)filter, (Single*)weights_ptr);
                }
            }
        }

        public static 
        void glGetTexFilterFuncSGIS(int target, int filter, [Out] out Single weights)
        {
            unsafe
            {
                fixed (Single* weights_ptr = &weights)
                {
                    Functions.glGetTexFilterFuncSGIS((int)target, (int)filter, (Single*)weights_ptr);
                    weights = *weights_ptr;
                }
            }
        }

        public static 
        void glGetTexFilterFuncSGIS(int target, int filter, [Out] IntPtr weights)
        {
            unsafe
            {
                Functions.glGetTexFilterFuncSGIS((int)target, (int)filter, (Single*)weights);
            }
        }

        public static 
        void glTexFilterFuncSGIS(int target, int filter, Int32 n, Single[] weights)
        {
            unsafe
            {
                fixed (Single* weights_ptr = weights)
                {
                    Functions.glTexFilterFuncSGIS((int)target, (int)filter, (Int32)n, (Single*)weights_ptr);
                }
            }
        }

        public static 
        void glTexFilterFuncSGIS(int target, int filter, Int32 n, ref Single weights)
        {
            unsafe
            {
                fixed (Single* weights_ptr = &weights)
                {
                    Functions.glTexFilterFuncSGIS((int)target, (int)filter, (Int32)n, (Single*)weights_ptr);
                }
            }
        }

        public static 
        void glTexFilterFuncSGIS(int target, int filter, Int32 n, IntPtr weights)
        {
            unsafe
            {
                Functions.glTexFilterFuncSGIS((int)target, (int)filter, (Int32)n, (Single*)weights);
            }
        }

        public static 
        void glPixelTexGenParameteriSGIS(int pname, Int32 param)
        {
            Functions.glPixelTexGenParameteriSGIS((int)pname, (Int32)param);
        }

        public static 
        void glPixelTexGenParameterivSGIS(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTexGenParameterivSGIS(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTexGenParameterivSGIS(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPixelTexGenParameterivSGIS((int)pname, (Int32*)@params);
            }
        }

        public static 
        void glPixelTexGenParameterfSGIS(int pname, Single param)
        {
            Functions.glPixelTexGenParameterfSGIS((int)pname, (Single)param);
        }

        public static 
        void glPixelTexGenParameterfvSGIS(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTexGenParameterfvSGIS(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPixelTexGenParameterfvSGIS(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPixelTexGenParameterfvSGIS((int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetPixelTexGenParameterivSGIS(int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetPixelTexGenParameterivSGIS(int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetPixelTexGenParameterivSGIS(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetPixelTexGenParameterivSGIS((int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetPixelTexGenParameterfvSGIS(int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetPixelTexGenParameterfvSGIS(int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetPixelTexGenParameterfvSGIS(int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetPixelTexGenParameterfvSGIS((int)pname, (Single*)@params);
            }
        }

        public static 
        void glTexImage4DSGIS(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexImage4DSGIS((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexImage4DSGIS(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexImage4DSGIS((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glTexSubImage4DSGIS(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, int format, int type, IntPtr pixels)
        {
            unsafe
            {
                Functions.glTexSubImage4DSGIS((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (int)format, (int)type, (IntPtr)pixels);
            }
        }

        public static 
        void glTexSubImage4DSGIS(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, int format, int type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexSubImage4DSGIS((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        public static 
        void glDetailTexFuncSGIS(int target, Int32 n, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glDetailTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glDetailTexFuncSGIS(int target, Int32 n, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glDetailTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glDetailTexFuncSGIS(int target, Int32 n, IntPtr points)
        {
            unsafe
            {
                Functions.glDetailTexFuncSGIS((int)target, (Int32)n, (Single*)points);
            }
        }

        public static 
        void glGetDetailTexFuncSGIS(int target, [Out] Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glGetDetailTexFuncSGIS((int)target, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glGetDetailTexFuncSGIS(int target, [Out] out Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glGetDetailTexFuncSGIS((int)target, (Single*)points_ptr);
                    points = *points_ptr;
                }
            }
        }

        public static 
        void glGetDetailTexFuncSGIS(int target, [Out] IntPtr points)
        {
            unsafe
            {
                Functions.glGetDetailTexFuncSGIS((int)target, (Single*)points);
            }
        }

        public static 
        void glSharpenTexFuncSGIS(int target, Int32 n, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glSharpenTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glSharpenTexFuncSGIS(int target, Int32 n, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glSharpenTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glSharpenTexFuncSGIS(int target, Int32 n, IntPtr points)
        {
            unsafe
            {
                Functions.glSharpenTexFuncSGIS((int)target, (Int32)n, (Single*)points);
            }
        }

        public static 
        void glGetSharpenTexFuncSGIS(int target, [Out] Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glGetSharpenTexFuncSGIS((int)target, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glGetSharpenTexFuncSGIS(int target, [Out] out Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glGetSharpenTexFuncSGIS((int)target, (Single*)points_ptr);
                    points = *points_ptr;
                }
            }
        }

        public static 
        void glGetSharpenTexFuncSGIS(int target, [Out] IntPtr points)
        {
            unsafe
            {
                Functions.glGetSharpenTexFuncSGIS((int)target, (Single*)points);
            }
        }

        public static 
        void glSampleMaskSGIS(Single value, bool invert)
        {
            Functions.glSampleMaskSGIS((Single)value, (bool)invert);
        }

        public static 
        void glSamplePatternSGIS(int pattern)
        {
            Functions.glSamplePatternSGIS((int)pattern);
        }

        public static 
        void glPointParameterfSGIS(int pname, Single param)
        {
            Functions.glPointParameterfSGIS((int)pname, (Single)param);
        }

        public static 
        void glPointParameterfvSGIS(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glPointParameterfvSGIS((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfvSGIS(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glPointParameterfvSGIS((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterfvSGIS(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPointParameterfvSGIS((int)pname, (Single*)@params);
            }
        }

        public static 
        void glFogFuncSGIS(Int32 n, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glFogFuncSGIS(Int32 n, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glFogFuncSGIS(Int32 n, IntPtr points)
        {
            unsafe
            {
                Functions.glFogFuncSGIS((Int32)n, (Single*)points);
            }
        }

        public static 
        void glGetFogFuncSGIS([Out] Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glGetFogFuncSGIS((Single*)points_ptr);
                }
            }
        }

        public static 
        void glGetFogFuncSGIS([Out] out Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glGetFogFuncSGIS((Single*)points_ptr);
                    points = *points_ptr;
                }
            }
        }

        public static 
        void glGetFogFuncSGIS([Out] IntPtr points)
        {
            unsafe
            {
                Functions.glGetFogFuncSGIS((Single*)points);
            }
        }

        public static 
        void glTextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha)
        {
            Functions.glTextureColorMaskSGIS((bool)red, (bool)green, (bool)blue, (bool)alpha);
        }

        public static 
        void glColorTableSGI(int target, int internalformat, Int32 width, int format, int type, IntPtr table)
        {
            unsafe
            {
                Functions.glColorTableSGI((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table);
            }
        }

        public static 
        void glColorTableSGI(int target, int internalformat, Int32 width, int format, int type, [In, Out] object table)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorTableSGI((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }

        public static 
        void glColorTableParameterfvSGI(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameterfvSGI(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameterfvSGI(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glColorTableParameterivSGI(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameterivSGI(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glColorTableParameterivSGI(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glCopyColorTableSGI(int target, int internalformat, Int32 x, Int32 y, Int32 width)
        {
            Functions.glCopyColorTableSGI((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        public static 
        void glGetColorTableSGI(int target, int format, int type, [Out] IntPtr table)
        {
            unsafe
            {
                Functions.glGetColorTableSGI((int)target, (int)format, (int)type, (IntPtr)table);
            }
        }

        public static 
        void glGetColorTableSGI(int target, int format, int type, [In, Out] object table)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetColorTableSGI((int)target, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }

        public static 
        void glGetColorTableParameterfvSGI(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetColorTableParameterfvSGI(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetColorTableParameterfvSGI(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetColorTableParameterivSGI(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetColorTableParameterivSGI(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetColorTableParameterivSGI(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glPixelTexGenSGIX(int mode)
        {
            Functions.glPixelTexGenSGIX((int)mode);
        }

        public static 
        void glSpriteParameterfSGIX(int pname, Single param)
        {
            Functions.glSpriteParameterfSGIX((int)pname, (Single)param);
        }

        public static 
        void glSpriteParameterfvSGIX(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glSpriteParameterfvSGIX((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glSpriteParameterfvSGIX(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glSpriteParameterfvSGIX((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glSpriteParameterfvSGIX(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glSpriteParameterfvSGIX((int)pname, (Single*)@params);
            }
        }

        public static 
        void glSpriteParameteriSGIX(int pname, Int32 param)
        {
            Functions.glSpriteParameteriSGIX((int)pname, (Int32)param);
        }

        public static 
        void glSpriteParameterivSGIX(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glSpriteParameterivSGIX((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glSpriteParameterivSGIX(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glSpriteParameterivSGIX((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glSpriteParameterivSGIX(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glSpriteParameterivSGIX((int)pname, (Int32*)@params);
            }
        }

        public static 
        Int32 glGetInstrumentsSGIX()
        {
            return Functions.glGetInstrumentsSGIX();
        }

        public static 
        void glInstrumentsBufferSGIX(Int32 size, [Out] Int32[] buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = buffer)
                {
                    Functions.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
                }
            }
        }

        public static 
        void glInstrumentsBufferSGIX(Int32 size, [Out] out Int32 buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = &buffer)
                {
                    Functions.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        public static 
        void glInstrumentsBufferSGIX(Int32 size, [Out] IntPtr buffer)
        {
            unsafe
            {
                Functions.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer);
            }
        }

        public static 
        Int32 glPollInstrumentsSGIX([Out] Int32[] marker_p)
        {
            unsafe
            {
                fixed (Int32* marker_p_ptr = marker_p)
                {
                    return Functions.glPollInstrumentsSGIX((Int32*)marker_p_ptr);
                }
            }
        }

        public static 
        Int32 glPollInstrumentsSGIX([Out] out Int32 marker_p)
        {
            unsafe
            {
                fixed (Int32* marker_p_ptr = &marker_p)
                {
                    Int32 retval = Functions.glPollInstrumentsSGIX((Int32*)marker_p_ptr);
                    marker_p = *marker_p_ptr;
                    return retval;
                }
            }
        }

        public static 
        Int32 glPollInstrumentsSGIX([Out] IntPtr marker_p)
        {
            unsafe
            {
                return Functions.glPollInstrumentsSGIX((Int32*)marker_p);
            }
        }

        public static 
        void glReadInstrumentsSGIX(Int32 marker)
        {
            Functions.glReadInstrumentsSGIX((Int32)marker);
        }

        public static 
        void glStartInstrumentsSGIX()
        {
            Functions.glStartInstrumentsSGIX();
        }

        public static 
        void glStopInstrumentsSGIX(Int32 marker)
        {
            Functions.glStopInstrumentsSGIX((Int32)marker);
        }

        public static 
        void glFrameZoomSGIX(Int32 factor)
        {
            Functions.glFrameZoomSGIX((Int32)factor);
        }

        public static 
        void glTagSampleBufferSGIX()
        {
            Functions.glTagSampleBufferSGIX();
        }

        public static 
        void glDeformationMap3dSGIX(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Functions.glDeformationMap3dSGIX((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
                }
            }
        }

        public static 
        void glDeformationMap3dSGIX(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Functions.glDeformationMap3dSGIX((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
                }
            }
        }

        public static 
        void glDeformationMap3dSGIX(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, IntPtr points)
        {
            unsafe
            {
                Functions.glDeformationMap3dSGIX((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points);
            }
        }

        public static 
        void glDeformationMap3fSGIX(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Functions.glDeformationMap3fSGIX((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glDeformationMap3fSGIX(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Functions.glDeformationMap3fSGIX((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
                }
            }
        }

        public static 
        void glDeformationMap3fSGIX(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, IntPtr points)
        {
            unsafe
            {
                Functions.glDeformationMap3fSGIX((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points);
            }
        }

        public static 
        void glDeformSGIX(int mask)
        {
            Functions.glDeformSGIX((int)mask);
        }

        public static 
        void glLoadIdentityDeformationMapSGIX(int mask)
        {
            Functions.glLoadIdentityDeformationMapSGIX((int)mask);
        }

        public static 
        void glReferencePlaneSGIX(Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Functions.glReferencePlaneSGIX((Double*)equation_ptr);
                }
            }
        }

        public static 
        void glReferencePlaneSGIX(ref Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Functions.glReferencePlaneSGIX((Double*)equation_ptr);
                }
            }
        }

        public static 
        void glReferencePlaneSGIX(IntPtr equation)
        {
            unsafe
            {
                Functions.glReferencePlaneSGIX((Double*)equation);
            }
        }

        public static 
        void glFlushRasterSGIX()
        {
            Functions.glFlushRasterSGIX();
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetListParameterfvSGIX(UInt32 list, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetListParameterfvSGIX(Int32 list, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetListParameterfvSGIX(UInt32 list, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetListParameterfvSGIX(Int32 list, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetListParameterfvSGIX(UInt32 list, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetListParameterfvSGIX(Int32 list, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetListParameterivSGIX(UInt32 list, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetListParameterivSGIX(Int32 list, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetListParameterivSGIX(UInt32 list, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetListParameterivSGIX(Int32 list, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetListParameterivSGIX(UInt32 list, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetListParameterivSGIX(Int32 list, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameterfSGIX(UInt32 list, int pname, Single param)
        {
            Functions.glListParameterfSGIX((UInt32)list, (int)pname, (Single)param);
        }

        public static 
        void glListParameterfSGIX(Int32 list, int pname, Single param)
        {
            Functions.glListParameterfSGIX((UInt32)list, (int)pname, (Single)param);
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameterfvSGIX(UInt32 list, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glListParameterfvSGIX(Int32 list, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameterfvSGIX(UInt32 list, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glListParameterfvSGIX(Int32 list, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameterfvSGIX(UInt32 list, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glListParameterfvSGIX(Int32 list, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameteriSGIX(UInt32 list, int pname, Int32 param)
        {
            Functions.glListParameteriSGIX((UInt32)list, (int)pname, (Int32)param);
        }

        public static 
        void glListParameteriSGIX(Int32 list, int pname, Int32 param)
        {
            Functions.glListParameteriSGIX((UInt32)list, (int)pname, (Int32)param);
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameterivSGIX(UInt32 list, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glListParameterivSGIX(Int32 list, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameterivSGIX(UInt32 list, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glListParameterivSGIX(Int32 list, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glListParameterivSGIX(UInt32 list, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glListParameterivSGIX(Int32 list, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glFragmentColorMaterialSGIX(int face, int mode)
        {
            Functions.glFragmentColorMaterialSGIX((int)face, (int)mode);
        }

        public static 
        void glFragmentLightfSGIX(int light, int pname, Single param)
        {
            Functions.glFragmentLightfSGIX((int)light, (int)pname, (Single)param);
        }

        public static 
        void glFragmentLightfvSGIX(int light, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightfvSGIX(int light, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightfvSGIX(int light, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glFragmentLightiSGIX(int light, int pname, Int32 param)
        {
            Functions.glFragmentLightiSGIX((int)light, (int)pname, (Int32)param);
        }

        public static 
        void glFragmentLightivSGIX(int light, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightivSGIX(int light, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightivSGIX(int light, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glFragmentLightModelfSGIX(int pname, Single param)
        {
            Functions.glFragmentLightModelfSGIX((int)pname, (Single)param);
        }

        public static 
        void glFragmentLightModelfvSGIX(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glFragmentLightModelfvSGIX((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightModelfvSGIX(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glFragmentLightModelfvSGIX((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightModelfvSGIX(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFragmentLightModelfvSGIX((int)pname, (Single*)@params);
            }
        }

        public static 
        void glFragmentLightModeliSGIX(int pname, Int32 param)
        {
            Functions.glFragmentLightModeliSGIX((int)pname, (Int32)param);
        }

        public static 
        void glFragmentLightModelivSGIX(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glFragmentLightModelivSGIX((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightModelivSGIX(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glFragmentLightModelivSGIX((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentLightModelivSGIX(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFragmentLightModelivSGIX((int)pname, (Int32*)@params);
            }
        }

        public static 
        void glFragmentMaterialfSGIX(int face, int pname, Single param)
        {
            Functions.glFragmentMaterialfSGIX((int)face, (int)pname, (Single)param);
        }

        public static 
        void glFragmentMaterialfvSGIX(int face, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentMaterialfvSGIX(int face, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentMaterialfvSGIX(int face, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glFragmentMaterialiSGIX(int face, int pname, Int32 param)
        {
            Functions.glFragmentMaterialiSGIX((int)face, (int)pname, (Int32)param);
        }

        public static 
        void glFragmentMaterialivSGIX(int face, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentMaterialivSGIX(int face, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glFragmentMaterialivSGIX(int face, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetFragmentLightfvSGIX(int light, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFragmentLightfvSGIX(int light, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFragmentLightfvSGIX(int light, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetFragmentLightivSGIX(int light, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFragmentLightivSGIX(int light, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFragmentLightivSGIX(int light, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetFragmentMaterialfvSGIX(int face, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFragmentMaterialfvSGIX(int face, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFragmentMaterialfvSGIX(int face, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetFragmentMaterialivSGIX(int face, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFragmentMaterialivSGIX(int face, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFragmentMaterialivSGIX(int face, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glLightEnviSGIX(int pname, Int32 param)
        {
            Functions.glLightEnviSGIX((int)pname, (Int32)param);
        }

        [System.CLSCompliant(false)]
        public static 
        void glAsyncMarkerSGIX(UInt32 marker)
        {
            Functions.glAsyncMarkerSGIX((UInt32)marker);
        }

        public static 
        void glAsyncMarkerSGIX(Int32 marker)
        {
            Functions.glAsyncMarkerSGIX((UInt32)marker);
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glFinishAsyncSGIX([Out] UInt32[] markerp)
        {
            unsafe
            {
                fixed (UInt32* markerp_ptr = markerp)
                {
                    return Functions.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                }
            }
        }

        public static 
        Int32 glFinishAsyncSGIX([Out] Int32[] markerp)
        {
            unsafe
            {
                fixed (Int32* markerp_ptr = markerp)
                {
                    return Functions.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glFinishAsyncSGIX([Out] out UInt32 markerp)
        {
            unsafe
            {
                fixed (UInt32* markerp_ptr = &markerp)
                {
                    Int32 retval = Functions.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                    markerp = *markerp_ptr;
                    return retval;
                }
            }
        }

        public static 
        Int32 glFinishAsyncSGIX([Out] out Int32 markerp)
        {
            unsafe
            {
                fixed (Int32* markerp_ptr = &markerp)
                {
                    Int32 retval = Functions.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                    markerp = *markerp_ptr;
                    return retval;
                }
            }
        }

        public static 
        Int32 glFinishAsyncSGIX([Out] IntPtr markerp)
        {
            unsafe
            {
                return Functions.glFinishAsyncSGIX((UInt32*)markerp);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glPollAsyncSGIX([Out] UInt32[] markerp)
        {
            unsafe
            {
                fixed (UInt32* markerp_ptr = markerp)
                {
                    return Functions.glPollAsyncSGIX((UInt32*)markerp_ptr);
                }
            }
        }

        public static 
        Int32 glPollAsyncSGIX([Out] Int32[] markerp)
        {
            unsafe
            {
                fixed (Int32* markerp_ptr = markerp)
                {
                    return Functions.glPollAsyncSGIX((UInt32*)markerp_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glPollAsyncSGIX([Out] out UInt32 markerp)
        {
            unsafe
            {
                fixed (UInt32* markerp_ptr = &markerp)
                {
                    Int32 retval = Functions.glPollAsyncSGIX((UInt32*)markerp_ptr);
                    markerp = *markerp_ptr;
                    return retval;
                }
            }
        }

        public static 
        Int32 glPollAsyncSGIX([Out] out Int32 markerp)
        {
            unsafe
            {
                fixed (Int32* markerp_ptr = &markerp)
                {
                    Int32 retval = Functions.glPollAsyncSGIX((UInt32*)markerp_ptr);
                    markerp = *markerp_ptr;
                    return retval;
                }
            }
        }

        public static 
        Int32 glPollAsyncSGIX([Out] IntPtr markerp)
        {
            unsafe
            {
                return Functions.glPollAsyncSGIX((UInt32*)markerp);
            }
        }

        public static 
        Int32 glGenAsyncMarkersSGIX(Int32 range)
        {
            return Functions.glGenAsyncMarkersSGIX((Int32)range);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteAsyncMarkersSGIX(UInt32 marker, Int32 range)
        {
            Functions.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
        }

        public static 
        void glDeleteAsyncMarkersSGIX(Int32 marker, Int32 range)
        {
            Functions.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsAsyncMarkerSGIX(UInt32 marker)
        {
            return Functions.glIsAsyncMarkerSGIX((UInt32)marker);
        }

        public static 
        bool glIsAsyncMarkerSGIX(Int32 marker)
        {
            return Functions.glIsAsyncMarkerSGIX((UInt32)marker);
        }

        public static 
        void glIglooInterfaceSGIX(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glIglooInterfaceSGIX((int)pname, (IntPtr)@params);
            }
        }

        public static 
        void glIglooInterfaceSGIX(int pname, [In, Out] object @params)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glIglooInterfaceSGIX((int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }

        public static 
        void glImageTransformParameteriHP(int target, int pname, Int32 param)
        {
            Functions.glImageTransformParameteriHP((int)target, (int)pname, (Int32)param);
        }

        public static 
        void glImageTransformParameterfHP(int target, int pname, Single param)
        {
            Functions.glImageTransformParameterfHP((int)target, (int)pname, (Single)param);
        }

        public static 
        void glImageTransformParameterivHP(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glImageTransformParameterivHP(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glImageTransformParameterivHP(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glImageTransformParameterfvHP(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glImageTransformParameterfvHP(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glImageTransformParameterfvHP(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetImageTransformParameterivHP(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetImageTransformParameterivHP(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetImageTransformParameterivHP(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetImageTransformParameterfvHP(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetImageTransformParameterfvHP(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetImageTransformParameterfvHP(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glHintPGI(int target, Int32 mode)
        {
            Functions.glHintPGI((int)target, (Int32)mode);
        }

        public static 
        void glVertexPointervINTEL(Int32 size, int type, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexPointervINTEL((Int32)size, (int)type, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexPointervINTEL(Int32 size, int type, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexPointervINTEL((Int32)size, (int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glNormalPointervINTEL(int type, IntPtr pointer)
        {
            unsafe
            {
                Functions.glNormalPointervINTEL((int)type, (IntPtr)pointer);
            }
        }

        public static 
        void glNormalPointervINTEL(int type, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glNormalPointervINTEL((int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glColorPointervINTEL(Int32 size, int type, IntPtr pointer)
        {
            unsafe
            {
                Functions.glColorPointervINTEL((Int32)size, (int)type, (IntPtr)pointer);
            }
        }

        public static 
        void glColorPointervINTEL(Int32 size, int type, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorPointervINTEL((Int32)size, (int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glTexCoordPointervINTEL(Int32 size, int type, IntPtr pointer)
        {
            unsafe
            {
                Functions.glTexCoordPointervINTEL((Int32)size, (int)type, (IntPtr)pointer);
            }
        }

        public static 
        void glTexCoordPointervINTEL(Int32 size, int type, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexCoordPointervINTEL((Int32)size, (int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glFinishTextureSUNX()
        {
            Functions.glFinishTextureSUNX();
        }

        [System.CLSCompliant(false)]
        public static 
        void glGlobalAlphaFactorbSUN(SByte factor)
        {
            Functions.glGlobalAlphaFactorbSUN((SByte)factor);
        }

        public static 
        void glGlobalAlphaFactorbSUN(Byte factor)
        {
            Functions.glGlobalAlphaFactorbSUN((SByte)factor);
        }

        public static 
        void glGlobalAlphaFactorsSUN(Int16 factor)
        {
            Functions.glGlobalAlphaFactorsSUN((Int16)factor);
        }

        public static 
        void glGlobalAlphaFactoriSUN(Int32 factor)
        {
            Functions.glGlobalAlphaFactoriSUN((Int32)factor);
        }

        public static 
        void glGlobalAlphaFactorfSUN(Single factor)
        {
            Functions.glGlobalAlphaFactorfSUN((Single)factor);
        }

        public static 
        void glGlobalAlphaFactordSUN(Double factor)
        {
            Functions.glGlobalAlphaFactordSUN((Double)factor);
        }

        public static 
        void glGlobalAlphaFactorubSUN(Byte factor)
        {
            Functions.glGlobalAlphaFactorubSUN((Byte)factor);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGlobalAlphaFactorusSUN(UInt16 factor)
        {
            Functions.glGlobalAlphaFactorusSUN((UInt16)factor);
        }

        public static 
        void glGlobalAlphaFactorusSUN(Int16 factor)
        {
            Functions.glGlobalAlphaFactorusSUN((UInt16)factor);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGlobalAlphaFactoruiSUN(UInt32 factor)
        {
            Functions.glGlobalAlphaFactoruiSUN((UInt32)factor);
        }

        public static 
        void glGlobalAlphaFactoruiSUN(Int32 factor)
        {
            Functions.glGlobalAlphaFactoruiSUN((UInt32)factor);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiSUN(UInt32 code)
        {
            Functions.glReplacementCodeuiSUN((UInt32)code);
        }

        public static 
        void glReplacementCodeuiSUN(Int32 code)
        {
            Functions.glReplacementCodeuiSUN((UInt32)code);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeusSUN(UInt16 code)
        {
            Functions.glReplacementCodeusSUN((UInt16)code);
        }

        public static 
        void glReplacementCodeusSUN(Int16 code)
        {
            Functions.glReplacementCodeusSUN((UInt16)code);
        }

        public static 
        void glReplacementCodeubSUN(Byte code)
        {
            Functions.glReplacementCodeubSUN((Byte)code);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuivSUN(UInt32[] code)
        {
            unsafe
            {
                fixed (UInt32* code_ptr = code)
                {
                    Functions.glReplacementCodeuivSUN((UInt32*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuivSUN(Int32[] code)
        {
            unsafe
            {
                fixed (Int32* code_ptr = code)
                {
                    Functions.glReplacementCodeuivSUN((UInt32*)code_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuivSUN(ref UInt32 code)
        {
            unsafe
            {
                fixed (UInt32* code_ptr = &code)
                {
                    Functions.glReplacementCodeuivSUN((UInt32*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuivSUN(ref Int32 code)
        {
            unsafe
            {
                fixed (Int32* code_ptr = &code)
                {
                    Functions.glReplacementCodeuivSUN((UInt32*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuivSUN(IntPtr code)
        {
            unsafe
            {
                Functions.glReplacementCodeuivSUN((UInt32*)code);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeusvSUN(UInt16[] code)
        {
            unsafe
            {
                fixed (UInt16* code_ptr = code)
                {
                    Functions.glReplacementCodeusvSUN((UInt16*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeusvSUN(Int16[] code)
        {
            unsafe
            {
                fixed (Int16* code_ptr = code)
                {
                    Functions.glReplacementCodeusvSUN((UInt16*)code_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeusvSUN(ref UInt16 code)
        {
            unsafe
            {
                fixed (UInt16* code_ptr = &code)
                {
                    Functions.glReplacementCodeusvSUN((UInt16*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeusvSUN(ref Int16 code)
        {
            unsafe
            {
                fixed (Int16* code_ptr = &code)
                {
                    Functions.glReplacementCodeusvSUN((UInt16*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeusvSUN(IntPtr code)
        {
            unsafe
            {
                Functions.glReplacementCodeusvSUN((UInt16*)code);
            }
        }

        public static 
        void glReplacementCodeubvSUN(Byte[] code)
        {
            unsafe
            {
                fixed (Byte* code_ptr = code)
                {
                    Functions.glReplacementCodeubvSUN((Byte*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeubvSUN(ref Byte code)
        {
            unsafe
            {
                fixed (Byte* code_ptr = &code)
                {
                    Functions.glReplacementCodeubvSUN((Byte*)code_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeubvSUN(IntPtr code)
        {
            unsafe
            {
                Functions.glReplacementCodeubvSUN((Byte*)code);
            }
        }

        public static 
        void glReplacementCodePointerSUN(int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glReplacementCodePointerSUN((int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glReplacementCodePointerSUN(int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glReplacementCodePointerSUN((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glColor4ubVertex2fSUN(Byte r, Byte g, Byte b, Byte a, Single x, Single y)
        {
            Functions.glColor4ubVertex2fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y);
        }

        public static 
        void glColor4ubVertex2fvSUN(Byte[] c, Single[] v)
        {
            unsafe
            {
                fixed (Byte* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4ubVertex2fvSUN(ref Byte c, ref Single v)
        {
            unsafe
            {
                fixed (Byte* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4ubVertex2fvSUN(IntPtr c, IntPtr v)
        {
            unsafe
            {
                Functions.glColor4ubVertex2fvSUN((Byte*)c, (Single*)v);
            }
        }

        public static 
        void glColor4ubVertex3fSUN(Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
        {
            Functions.glColor4ubVertex3fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glColor4ubVertex3fvSUN(Byte[] c, Single[] v)
        {
            unsafe
            {
                fixed (Byte* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4ubVertex3fvSUN(ref Byte c, ref Single v)
        {
            unsafe
            {
                fixed (Byte* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4ubVertex3fvSUN(IntPtr c, IntPtr v)
        {
            unsafe
            {
                Functions.glColor4ubVertex3fvSUN((Byte*)c, (Single*)v);
            }
        }

        public static 
        void glColor3fVertex3fSUN(Single r, Single g, Single b, Single x, Single y, Single z)
        {
            Functions.glColor3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glColor3fVertex3fvSUN(Single[] c, Single[] v)
        {
            unsafe
            {
                fixed (Single* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor3fVertex3fvSUN(ref Single c, ref Single v)
        {
            unsafe
            {
                fixed (Single* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor3fVertex3fvSUN(IntPtr c, IntPtr v)
        {
            unsafe
            {
                Functions.glColor3fVertex3fvSUN((Single*)c, (Single*)v);
            }
        }

        public static 
        void glNormal3fVertex3fSUN(Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glNormal3fVertex3fSUN((Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glNormal3fVertex3fvSUN(Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3fVertex3fvSUN(ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3fVertex3fvSUN(IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glNormal3fVertex3fvSUN((Single*)n, (Single*)v);
            }
        }

        public static 
        void glColor4fNormal3fVertex3fSUN(Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glColor4fNormal3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glColor4fNormal3fVertex3fvSUN(Single[] c, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4fNormal3fVertex3fvSUN(ref Single c, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Single* c_ptr = &c)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n, (Single*)v);
            }
        }

        public static 
        void glTexCoord2fVertex3fSUN(Single s, Single t, Single x, Single y, Single z)
        {
            Functions.glTexCoord2fVertex3fSUN((Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glTexCoord2fVertex3fvSUN(Single[] tc, Single[] v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = tc)
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fVertex3fvSUN(ref Single tc, ref Single v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = &tc)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2fVertex3fvSUN((Single*)tc, (Single*)v);
            }
        }

        public static 
        void glTexCoord4fVertex4fSUN(Single s, Single t, Single p, Single q, Single x, Single y, Single z, Single w)
        {
            Functions.glTexCoord4fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glTexCoord4fVertex4fvSUN(Single[] tc, Single[] v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = tc)
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4fVertex4fvSUN(ref Single tc, ref Single v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = &tc)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord4fVertex4fvSUN((Single*)tc, (Single*)v);
            }
        }

        public static 
        void glTexCoord2fColor4ubVertex3fSUN(Single s, Single t, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
        {
            Functions.glTexCoord2fColor4ubVertex3fSUN((Single)s, (Single)t, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glTexCoord2fColor4ubVertex3fvSUN(Single[] tc, Byte[] c, Single[] v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = tc)
                fixed (Byte* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fColor4ubVertex3fvSUN(ref Single tc, ref Byte c, ref Single v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = &tc)
                fixed (Byte* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c, (Single*)v);
            }
        }

        public static 
        void glTexCoord2fColor3fVertex3fSUN(Single s, Single t, Single r, Single g, Single b, Single x, Single y, Single z)
        {
            Functions.glTexCoord2fColor3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glTexCoord2fColor3fVertex3fvSUN(Single[] tc, Single[] c, Single[] v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = tc)
                fixed (Single* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fColor3fVertex3fvSUN(ref Single tc, ref Single c, ref Single v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = &tc)
                fixed (Single* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)v);
            }
        }

        public static 
        void glTexCoord2fNormal3fVertex3fSUN(Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glTexCoord2fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glTexCoord2fNormal3fVertex3fvSUN(Single[] tc, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = tc)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fNormal3fVertex3fvSUN(ref Single tc, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = &tc)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n, (Single*)v);
            }
        }

        public static 
        void glTexCoord2fColor4fNormal3fVertex3fSUN(Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glTexCoord2fColor4fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = tc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = &tc)
                fixed (Single* c_ptr = &c)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
            }
        }

        public static 
        void glTexCoord4fColor4fNormal3fVertex4fSUN(Single s, Single t, Single p, Single q, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z, Single w)
        {
            Functions.glTexCoord4fColor4fNormal3fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = tc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Single* tc_ptr = &tc)
                fixed (Single* c_ptr = &c)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiVertex3fSUN(UInt32 rc, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiVertex3fSUN(Int32 rc, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiVertex3fvSUN(UInt32[] rc, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiVertex3fvSUN(Int32[] rc, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiVertex3fvSUN(ref UInt32 rc, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiVertex3fvSUN(ref Int32 rc, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor4ubVertex3fSUN(UInt32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiColor4ubVertex3fSUN(Int32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, Byte[] c, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Byte* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, Byte[] c, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Byte* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, ref Byte c, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Byte* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, ref Byte c, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Byte* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor3fVertex3fSUN(UInt32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiColor3fVertex3fSUN(Int32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, Single[] c, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Single* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, Single[] c, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Single* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, ref Single c, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Single* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, ref Single c, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Single* c_ptr = &c)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiNormal3fVertex3fSUN(UInt32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiNormal3fVertex3fSUN(Int32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor4fNormal3fVertex3fSUN(UInt32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiColor4fNormal3fVertex3fSUN(Int32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Single* c_ptr = &c)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Single* c_ptr = &c)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fVertex3fSUN(UInt32 rc, Single s, Single t, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiTexCoord2fVertex3fSUN(Int32 rc, Single s, Single t, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Single* tc_ptr = tc)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Single* tc_ptr = tc)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Single* tc_ptr = &tc)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Single* tc_ptr = &tc)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(UInt32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(Int32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Single* tc_ptr = tc)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Single* tc_ptr = tc)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Single* tc_ptr = &tc)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Single* tc_ptr = &tc)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(UInt32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(Int32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
        {
            Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = rc)
                fixed (Single* tc_ptr = tc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, Single[] n, Single[] v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = rc)
                fixed (Single* tc_ptr = tc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (UInt32* rc_ptr = &rc)
                fixed (Single* tc_ptr = &tc)
                fixed (Single* c_ptr = &c)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
        {
            unsafe
            {
                fixed (Int32* rc_ptr = &rc)
                fixed (Single* tc_ptr = &tc)
                fixed (Single* c_ptr = &c)
                fixed (Single* n_ptr = &n)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            unsafe
            {
                Functions.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
            }
        }

        public static 
        void glDrawMeshArraysSUN(int mode, Int32 first, Int32 count, Int32 width)
        {
            Functions.glDrawMeshArraysSUN((int)mode, (Int32)first, (Int32)count, (Int32)width);
        }

        public static 
        void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        {
            Functions.glBlendFuncSeparateINGR((int)sfactorRGB, (int)dfactorRGB, (int)sfactorAlpha, (int)dfactorAlpha);
        }

        public static 
        void glFlushVertexArrayRangeNV()
        {
            Functions.glFlushVertexArrayRangeNV();
        }

        public static 
        void glVertexArrayRangeNV(Int32 length, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexArrayRangeNV(Int32 length, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glCombinerParameterfvNV(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glCombinerParameterfvNV((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glCombinerParameterfvNV(int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glCombinerParameterfvNV((int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glCombinerParameterfvNV(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glCombinerParameterfvNV((int)pname, (Single*)@params);
            }
        }

        public static 
        void glCombinerParameterfNV(int pname, Single param)
        {
            Functions.glCombinerParameterfNV((int)pname, (Single)param);
        }

        public static 
        void glCombinerParameterivNV(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glCombinerParameterivNV((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glCombinerParameterivNV(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glCombinerParameterivNV((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glCombinerParameterivNV(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glCombinerParameterivNV((int)pname, (Int32*)@params);
            }
        }

        public static 
        void glCombinerParameteriNV(int pname, Int32 param)
        {
            Functions.glCombinerParameteriNV((int)pname, (Int32)param);
        }

        public static 
        void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage)
        {
            Functions.glCombinerInputNV((int)stage, (int)portion, (int)variable, (int)input, (int)mapping, (int)componentUsage);
        }

        public static 
        void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
        {
            Functions.glCombinerOutputNV((int)stage, (int)portion, (int)abOutput, (int)cdOutput, (int)sumOutput, (int)scale, (int)bias, (bool)abDotProduct, (bool)cdDotProduct, (bool)muxSum);
        }

        public static 
        void glFinalCombinerInputNV(int variable, int input, int mapping, int componentUsage)
        {
            Functions.glFinalCombinerInputNV((int)variable, (int)input, (int)mapping, (int)componentUsage);
        }

        public static 
        void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetCombinerInputParameterfvNV((int)stage, (int)portion, (int)variable, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetCombinerInputParameterfvNV((int)stage, (int)portion, (int)variable, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetCombinerInputParameterfvNV((int)stage, (int)portion, (int)variable, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetCombinerInputParameterivNV((int)stage, (int)portion, (int)variable, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetCombinerInputParameterivNV((int)stage, (int)portion, (int)variable, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetCombinerInputParameterivNV((int)stage, (int)portion, (int)variable, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetCombinerOutputParameterfvNV((int)stage, (int)portion, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetCombinerOutputParameterfvNV((int)stage, (int)portion, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetCombinerOutputParameterfvNV((int)stage, (int)portion, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetCombinerOutputParameterivNV((int)stage, (int)portion, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetCombinerOutputParameterivNV((int)stage, (int)portion, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetCombinerOutputParameterivNV((int)stage, (int)portion, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetFinalCombinerInputParameterfvNV(int variable, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetFinalCombinerInputParameterfvNV((int)variable, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFinalCombinerInputParameterfvNV(int variable, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetFinalCombinerInputParameterfvNV((int)variable, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFinalCombinerInputParameterfvNV(int variable, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFinalCombinerInputParameterfvNV((int)variable, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetFinalCombinerInputParameterivNV(int variable, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetFinalCombinerInputParameterivNV((int)variable, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFinalCombinerInputParameterivNV(int variable, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetFinalCombinerInputParameterivNV((int)variable, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFinalCombinerInputParameterivNV(int variable, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFinalCombinerInputParameterivNV((int)variable, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteFencesNV(Int32 n, UInt32[] fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = fences)
                {
                    Functions.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glDeleteFencesNV(Int32 n, Int32[] fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = fences)
                {
                    Functions.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteFencesNV(Int32 n, ref UInt32 fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = &fences)
                {
                    Functions.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glDeleteFencesNV(Int32 n, ref Int32 fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = &fences)
                {
                    Functions.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glDeleteFencesNV(Int32 n, IntPtr fences)
        {
            unsafe
            {
                Functions.glDeleteFencesNV((Int32)n, (UInt32*)fences);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenFencesNV(Int32 n, [Out] UInt32[] fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = fences)
                {
                    Functions.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glGenFencesNV(Int32 n, [Out] Int32[] fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = fences)
                {
                    Functions.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenFencesNV(Int32 n, [Out] out UInt32 fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = &fences)
                {
                    Functions.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    fences = *fences_ptr;
                }
            }
        }

        public static 
        void glGenFencesNV(Int32 n, [Out] out Int32 fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = &fences)
                {
                    Functions.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    fences = *fences_ptr;
                }
            }
        }

        public static 
        void glGenFencesNV(Int32 n, [Out] IntPtr fences)
        {
            unsafe
            {
                Functions.glGenFencesNV((Int32)n, (UInt32*)fences);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsFenceNV(UInt32 fence)
        {
            return Functions.glIsFenceNV((UInt32)fence);
        }

        public static 
        bool glIsFenceNV(Int32 fence)
        {
            return Functions.glIsFenceNV((UInt32)fence);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glTestFenceNV(UInt32 fence)
        {
            return Functions.glTestFenceNV((UInt32)fence);
        }

        public static 
        bool glTestFenceNV(Int32 fence)
        {
            return Functions.glTestFenceNV((UInt32)fence);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetFenceivNV(UInt32 fence, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetFenceivNV(Int32 fence, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetFenceivNV(UInt32 fence, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetFenceivNV(Int32 fence, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetFenceivNV(UInt32 fence, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetFenceivNV(Int32 fence, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glFinishFenceNV(UInt32 fence)
        {
            Functions.glFinishFenceNV((UInt32)fence);
        }

        public static 
        void glFinishFenceNV(Int32 fence)
        {
            Functions.glFinishFenceNV((UInt32)fence);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetFenceNV(UInt32 fence, int condition)
        {
            Functions.glSetFenceNV((UInt32)fence, (int)condition);
        }

        public static 
        void glSetFenceNV(Int32 fence, int condition)
        {
            Functions.glSetFenceNV((UInt32)fence, (int)condition);
        }

        [System.CLSCompliant(false)]
        public static 
        void glMapControlPointsNV(int target, UInt32 index, int type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, IntPtr points)
        {
            unsafe
            {
                Functions.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points);
            }
        }

        public static 
        void glMapControlPointsNV(int target, Int32 index, int type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, IntPtr points)
        {
            unsafe
            {
                Functions.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMapControlPointsNV(int target, UInt32 index, int type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, [In, Out] object points)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    points_ptr.Free();
                }
            }
        }

        public static 
        void glMapControlPointsNV(int target, Int32 index, int type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, [In, Out] object points)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    points_ptr.Free();
                }
            }
        }

        public static 
        void glMapParameterivNV(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glMapParameterivNV(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glMapParameterivNV(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glMapParameterivNV((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glMapParameterfvNV(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glMapParameterfvNV(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glMapParameterfvNV(int target, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glMapParameterfvNV((int)target, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapControlPointsNV(int target, UInt32 index, int type, Int32 ustride, Int32 vstride, bool packed, [Out] IntPtr points)
        {
            unsafe
            {
                Functions.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points);
            }
        }

        public static 
        void glGetMapControlPointsNV(int target, Int32 index, int type, Int32 ustride, Int32 vstride, bool packed, [Out] IntPtr points)
        {
            unsafe
            {
                Functions.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapControlPointsNV(int target, UInt32 index, int type, Int32 ustride, Int32 vstride, bool packed, [In, Out] object points)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    points_ptr.Free();
                }
            }
        }

        public static 
        void glGetMapControlPointsNV(int target, Int32 index, int type, Int32 ustride, Int32 vstride, bool packed, [In, Out] object points)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    points_ptr.Free();
                }
            }
        }

        public static 
        void glGetMapParameterivNV(int target, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMapParameterivNV(int target, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMapParameterivNV(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMapParameterivNV((int)target, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetMapParameterfvNV(int target, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMapParameterfvNV(int target, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMapParameterfvNV(int target, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMapParameterfvNV((int)target, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapAttribParameterivNV(int target, UInt32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMapAttribParameterivNV(int target, Int32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapAttribParameterivNV(int target, UInt32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMapAttribParameterivNV(int target, Int32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapAttribParameterivNV(int target, UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetMapAttribParameterivNV(int target, Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapAttribParameterfvNV(int target, UInt32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetMapAttribParameterfvNV(int target, Int32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapAttribParameterfvNV(int target, UInt32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetMapAttribParameterfvNV(int target, Int32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetMapAttribParameterfvNV(int target, UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetMapAttribParameterfvNV(int target, Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glEvalMapsNV(int target, int mode)
        {
            Functions.glEvalMapsNV((int)target, (int)mode);
        }

        public static 
        void glCombinerStageParameterfvNV(int stage, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glCombinerStageParameterfvNV(int stage, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glCombinerStageParameterfvNV(int stage, int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetCombinerStageParameterfvNV(int stage, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetCombinerStageParameterfvNV(int stage, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetCombinerStageParameterfvNV(int stage, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glAreProgramsResidentNV(Int32 n, UInt32[] programs, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = programs)
                fixed (bool* residences_ptr = residences)
                {
                    return Functions.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                }
            }
        }

        public static 
        bool glAreProgramsResidentNV(Int32 n, Int32[] programs, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = programs)
                fixed (bool* residences_ptr = residences)
                {
                    return Functions.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glAreProgramsResidentNV(Int32 n, ref UInt32 programs, [Out] out bool residences)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = &programs)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Functions.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        public static 
        bool glAreProgramsResidentNV(Int32 n, ref Int32 programs, [Out] out bool residences)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = &programs)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Functions.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        public static 
        bool glAreProgramsResidentNV(Int32 n, IntPtr programs, [Out] IntPtr residences)
        {
            unsafe
            {
                return Functions.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (bool*)residences);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindProgramNV(int target, UInt32 id)
        {
            Functions.glBindProgramNV((int)target, (UInt32)id);
        }

        public static 
        void glBindProgramNV(int target, Int32 id)
        {
            Functions.glBindProgramNV((int)target, (UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteProgramsNV(Int32 n, UInt32[] programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = programs)
                {
                    Functions.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glDeleteProgramsNV(Int32 n, Int32[] programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = programs)
                {
                    Functions.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteProgramsNV(Int32 n, ref UInt32 programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = &programs)
                {
                    Functions.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glDeleteProgramsNV(Int32 n, ref Int32 programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = &programs)
                {
                    Functions.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glDeleteProgramsNV(Int32 n, IntPtr programs)
        {
            unsafe
            {
                Functions.glDeleteProgramsNV((Int32)n, (UInt32*)programs);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glExecuteProgramNV(int target, UInt32 id, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glExecuteProgramNV(int target, Int32 id, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glExecuteProgramNV(int target, UInt32 id, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glExecuteProgramNV(int target, Int32 id, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glExecuteProgramNV(int target, UInt32 id, IntPtr @params)
        {
            unsafe
            {
                Functions.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params);
            }
        }

        public static 
        void glExecuteProgramNV(int target, Int32 id, IntPtr @params)
        {
            unsafe
            {
                Functions.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenProgramsNV(Int32 n, [Out] UInt32[] programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = programs)
                {
                    Functions.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glGenProgramsNV(Int32 n, [Out] Int32[] programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = programs)
                {
                    Functions.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenProgramsNV(Int32 n, [Out] out UInt32 programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = &programs)
                {
                    Functions.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    programs = *programs_ptr;
                }
            }
        }

        public static 
        void glGenProgramsNV(Int32 n, [Out] out Int32 programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = &programs)
                {
                    Functions.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    programs = *programs_ptr;
                }
            }
        }

        public static 
        void glGenProgramsNV(Int32 n, [Out] IntPtr programs)
        {
            unsafe
            {
                Functions.glGenProgramsNV((Int32)n, (UInt32*)programs);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramParameterdvNV(int target, UInt32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramParameterdvNV(int target, Int32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramParameterdvNV(int target, UInt32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramParameterdvNV(int target, Int32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramParameterdvNV(int target, UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params);
            }
        }

        public static 
        void glGetProgramParameterdvNV(int target, Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramParameterfvNV(int target, UInt32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramParameterfvNV(int target, Int32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramParameterfvNV(int target, UInt32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramParameterfvNV(int target, Int32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramParameterfvNV(int target, UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetProgramParameterfvNV(int target, Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramivNV(UInt32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramivNV(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramivNV(UInt32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramivNV(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramivNV(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetProgramivNV(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramStringNV(UInt32 id, int pname, [Out] Byte[] program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = program)
                {
                    Functions.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
                }
            }
        }

        public static 
        void glGetProgramStringNV(Int32 id, int pname, [Out] Byte[] program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = program)
                {
                    Functions.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramStringNV(UInt32 id, int pname, [Out] out Byte program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = &program)
                {
                    Functions.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
                    program = *program_ptr;
                }
            }
        }

        public static 
        void glGetProgramStringNV(Int32 id, int pname, [Out] out Byte program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = &program)
                {
                    Functions.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
                    program = *program_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramStringNV(UInt32 id, int pname, [Out] IntPtr program)
        {
            unsafe
            {
                Functions.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program);
            }
        }

        public static 
        void glGetProgramStringNV(Int32 id, int pname, [Out] IntPtr program)
        {
            unsafe
            {
                Functions.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTrackMatrixivNV(int target, UInt32 address, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetTrackMatrixivNV(int target, Int32 address, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTrackMatrixivNV(int target, UInt32 address, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetTrackMatrixivNV(int target, Int32 address, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTrackMatrixivNV(int target, UInt32 address, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetTrackMatrixivNV(int target, Int32 address, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdvNV(UInt32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribdvNV(Int32 index, int pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdvNV(UInt32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribdvNV(Int32 index, int pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribdvNV(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params);
            }
        }

        public static 
        void glGetVertexAttribdvNV(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfvNV(UInt32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribfvNV(Int32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfvNV(UInt32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribfvNV(Int32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribfvNV(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetVertexAttribfvNV(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribivNV(UInt32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribivNV(Int32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribivNV(UInt32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribivNV(Int32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribivNV(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetVertexAttribivNV(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribPointervNV(UInt32 index, int pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer);
            }
        }

        public static 
        void glGetVertexAttribPointervNV(Int32 index, int pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribPointervNV(UInt32 index, int pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glGetVertexAttribPointervNV(Int32 index, int pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsProgramNV(UInt32 id)
        {
            return Functions.glIsProgramNV((UInt32)id);
        }

        public static 
        bool glIsProgramNV(Int32 id)
        {
            return Functions.glIsProgramNV((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glLoadProgramNV(int target, UInt32 id, Int32 len, Byte[] program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = program)
                {
                    Functions.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                }
            }
        }

        public static 
        void glLoadProgramNV(int target, Int32 id, Int32 len, Byte[] program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = program)
                {
                    Functions.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glLoadProgramNV(int target, UInt32 id, Int32 len, ref Byte program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = &program)
                {
                    Functions.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                }
            }
        }

        public static 
        void glLoadProgramNV(int target, Int32 id, Int32 len, ref Byte program)
        {
            unsafe
            {
                fixed (Byte* program_ptr = &program)
                {
                    Functions.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glLoadProgramNV(int target, UInt32 id, Int32 len, IntPtr program)
        {
            unsafe
            {
                Functions.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program);
            }
        }

        public static 
        void glLoadProgramNV(int target, Int32 id, Int32 len, IntPtr program)
        {
            unsafe
            {
                Functions.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4dNV(int target, UInt32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glProgramParameter4dNV((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glProgramParameter4dNV(int target, Int32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glProgramParameter4dNV((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4dvNV(int target, UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameter4dvNV(int target, Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4dvNV(int target, UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameter4dvNV(int target, Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4dvNV(int target, UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v);
            }
        }

        public static 
        void glProgramParameter4dvNV(int target, Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4fNV(int target, UInt32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glProgramParameter4fNV((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glProgramParameter4fNV(int target, Int32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glProgramParameter4fNV((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4fvNV(int target, UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameter4fvNV(int target, Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4fvNV(int target, UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameter4fvNV(int target, Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameter4fvNV(int target, UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v);
            }
        }

        public static 
        void glProgramParameter4fvNV(int target, Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameters4dvNV(int target, UInt32 index, UInt32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameters4dvNV(int target, Int32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameters4dvNV(int target, UInt32 index, UInt32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameters4dvNV(int target, Int32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameters4dvNV(int target, UInt32 index, UInt32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v);
            }
        }

        public static 
        void glProgramParameters4dvNV(int target, Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameters4fvNV(int target, UInt32 index, UInt32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameters4fvNV(int target, Int32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameters4fvNV(int target, UInt32 index, UInt32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glProgramParameters4fvNV(int target, Int32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramParameters4fvNV(int target, UInt32 index, UInt32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v);
            }
        }

        public static 
        void glProgramParameters4fvNV(int target, Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glRequestResidentProgramsNV(Int32 n, UInt32[] programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = programs)
                {
                    Functions.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glRequestResidentProgramsNV(Int32 n, Int32[] programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = programs)
                {
                    Functions.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glRequestResidentProgramsNV(Int32 n, ref UInt32 programs)
        {
            unsafe
            {
                fixed (UInt32* programs_ptr = &programs)
                {
                    Functions.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glRequestResidentProgramsNV(Int32 n, ref Int32 programs)
        {
            unsafe
            {
                fixed (Int32* programs_ptr = &programs)
                {
                    Functions.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                }
            }
        }

        public static 
        void glRequestResidentProgramsNV(Int32 n, IntPtr programs)
        {
            unsafe
            {
                Functions.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTrackMatrixNV(int target, UInt32 address, int matrix, int transform)
        {
            Functions.glTrackMatrixNV((int)target, (UInt32)address, (int)matrix, (int)transform);
        }

        public static 
        void glTrackMatrixNV(int target, Int32 address, int matrix, int transform)
        {
            Functions.glTrackMatrixNV((int)target, (UInt32)address, (int)matrix, (int)transform);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribPointerNV(UInt32 index, Int32 fsize, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexAttribPointerNV(Int32 index, Int32 fsize, int type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribPointerNV(UInt32 index, Int32 fsize, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexAttribPointerNV(Int32 index, Int32 fsize, int type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dNV(UInt32 index, Double x)
        {
            Functions.glVertexAttrib1dNV((UInt32)index, (Double)x);
        }

        public static 
        void glVertexAttrib1dNV(Int32 index, Double x)
        {
            Functions.glVertexAttrib1dNV((UInt32)index, (Double)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dvNV(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1dvNV(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dvNV(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1dvNV(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1dvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib1dvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fNV(UInt32 index, Single x)
        {
            Functions.glVertexAttrib1fNV((UInt32)index, (Single)x);
        }

        public static 
        void glVertexAttrib1fNV(Int32 index, Single x)
        {
            Functions.glVertexAttrib1fNV((UInt32)index, (Single)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fvNV(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1fvNV(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fvNV(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1fvNV(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1fvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib1fvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1sNV(UInt32 index, Int16 x)
        {
            Functions.glVertexAttrib1sNV((UInt32)index, (Int16)x);
        }

        public static 
        void glVertexAttrib1sNV(Int32 index, Int16 x)
        {
            Functions.glVertexAttrib1sNV((UInt32)index, (Int16)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1svNV(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1svNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1svNV(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1svNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1svNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib1svNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dNV(UInt32 index, Double x, Double y)
        {
            Functions.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
        }

        public static 
        void glVertexAttrib2dNV(Int32 index, Double x, Double y)
        {
            Functions.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dvNV(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2dvNV(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dvNV(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2dvNV(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2dvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib2dvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fNV(UInt32 index, Single x, Single y)
        {
            Functions.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
        }

        public static 
        void glVertexAttrib2fNV(Int32 index, Single x, Single y)
        {
            Functions.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fvNV(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2fvNV(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fvNV(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2fvNV(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2fvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib2fvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2sNV(UInt32 index, Int16 x, Int16 y)
        {
            Functions.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
        }

        public static 
        void glVertexAttrib2sNV(Int32 index, Int16 x, Int16 y)
        {
            Functions.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2svNV(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2svNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2svNV(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2svNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2svNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib2svNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dNV(UInt32 index, Double x, Double y, Double z)
        {
            Functions.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        public static 
        void glVertexAttrib3dNV(Int32 index, Double x, Double y, Double z)
        {
            Functions.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dvNV(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3dvNV(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dvNV(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3dvNV(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3dvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib3dvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fNV(UInt32 index, Single x, Single y, Single z)
        {
            Functions.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glVertexAttrib3fNV(Int32 index, Single x, Single y, Single z)
        {
            Functions.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fvNV(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3fvNV(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fvNV(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3fvNV(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3fvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib3fvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3sNV(UInt32 index, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glVertexAttrib3sNV(Int32 index, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3svNV(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3svNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3svNV(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3svNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3svNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib3svNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dNV(UInt32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glVertexAttrib4dNV(Int32 index, Double x, Double y, Double z, Double w)
        {
            Functions.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dvNV(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4dvNV(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dvNV(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4dvNV(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4dvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
            }
        }

        public static 
        void glVertexAttrib4dvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fNV(UInt32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glVertexAttrib4fNV(Int32 index, Single x, Single y, Single z, Single w)
        {
            Functions.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fvNV(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4fvNV(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fvNV(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4fvNV(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4fvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
            }
        }

        public static 
        void glVertexAttrib4fvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4sNV(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        public static 
        void glVertexAttrib4sNV(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4svNV(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4svNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4svNV(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4svNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4svNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
            }
        }

        public static 
        void glVertexAttrib4svNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubNV(UInt32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Functions.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        public static 
        void glVertexAttrib4ubNV(Int32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Functions.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubvNV(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ubvNV(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubvNV(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4ubvNV(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4ubvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
            }
        }

        public static 
        void glVertexAttrib4ubvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1dvNV(UInt32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1dvNV(Int32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1dvNV(UInt32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1dvNV(Int32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1dvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        public static 
        void glVertexAttribs1dvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1fvNV(UInt32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1fvNV(Int32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1fvNV(UInt32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1fvNV(Int32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1fvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        public static 
        void glVertexAttribs1fvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1svNV(UInt32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1svNV(Int32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1svNV(UInt32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1svNV(Int32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1svNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        public static 
        void glVertexAttribs1svNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2dvNV(UInt32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2dvNV(Int32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2dvNV(UInt32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2dvNV(Int32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2dvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        public static 
        void glVertexAttribs2dvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2fvNV(UInt32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2fvNV(Int32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2fvNV(UInt32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2fvNV(Int32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2fvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        public static 
        void glVertexAttribs2fvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2svNV(UInt32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2svNV(Int32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2svNV(UInt32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2svNV(Int32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2svNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        public static 
        void glVertexAttribs2svNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3dvNV(UInt32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3dvNV(Int32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3dvNV(UInt32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3dvNV(Int32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3dvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        public static 
        void glVertexAttribs3dvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3fvNV(UInt32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3fvNV(Int32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3fvNV(UInt32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3fvNV(Int32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3fvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        public static 
        void glVertexAttribs3fvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3svNV(UInt32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3svNV(Int32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3svNV(UInt32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3svNV(Int32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3svNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        public static 
        void glVertexAttribs3svNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4dvNV(UInt32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4dvNV(Int32 index, Int32 count, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4dvNV(UInt32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4dvNV(Int32 index, Int32 count, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4dvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        public static 
        void glVertexAttribs4dvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4fvNV(UInt32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4fvNV(Int32 index, Int32 count, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4fvNV(UInt32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4fvNV(Int32 index, Int32 count, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4fvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        public static 
        void glVertexAttribs4fvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4svNV(UInt32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4svNV(Int32 index, Int32 count, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4svNV(UInt32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4svNV(Int32 index, Int32 count, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4svNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        public static 
        void glVertexAttribs4svNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4ubvNV(UInt32 index, Int32 count, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4ubvNV(Int32 index, Int32 count, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Functions.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4ubvNV(UInt32 index, Int32 count, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4ubvNV(Int32 index, Int32 count, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Functions.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4ubvNV(UInt32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
            }
        }

        public static 
        void glVertexAttribs4ubvNV(Int32 index, Int32 count, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenOcclusionQueriesNV(Int32 n, [Out] UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Functions.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glGenOcclusionQueriesNV(Int32 n, [Out] Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Functions.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenOcclusionQueriesNV(Int32 n, [Out] out UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Functions.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        public static 
        void glGenOcclusionQueriesNV(Int32 n, [Out] out Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Functions.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        public static 
        void glGenOcclusionQueriesNV(Int32 n, [Out] IntPtr ids)
        {
            unsafe
            {
                Functions.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteOcclusionQueriesNV(Int32 n, UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Functions.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteOcclusionQueriesNV(Int32 n, Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Functions.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteOcclusionQueriesNV(Int32 n, ref UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Functions.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteOcclusionQueriesNV(Int32 n, ref Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Functions.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        public static 
        void glDeleteOcclusionQueriesNV(Int32 n, IntPtr ids)
        {
            unsafe
            {
                Functions.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsOcclusionQueryNV(UInt32 id)
        {
            return Functions.glIsOcclusionQueryNV((UInt32)id);
        }

        public static 
        bool glIsOcclusionQueryNV(Int32 id)
        {
            return Functions.glIsOcclusionQueryNV((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBeginOcclusionQueryNV(UInt32 id)
        {
            Functions.glBeginOcclusionQueryNV((UInt32)id);
        }

        public static 
        void glBeginOcclusionQueryNV(Int32 id)
        {
            Functions.glBeginOcclusionQueryNV((UInt32)id);
        }

        public static 
        void glEndOcclusionQueryNV()
        {
            Functions.glEndOcclusionQueryNV();
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetOcclusionQueryivNV(UInt32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetOcclusionQueryivNV(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetOcclusionQueryivNV(UInt32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetOcclusionQueryivNV(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetOcclusionQueryivNV(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetOcclusionQueryivNV(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetOcclusionQueryuivNV(UInt32 id, int pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetOcclusionQueryuivNV(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetOcclusionQueryuivNV(UInt32 id, int pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetOcclusionQueryuivNV(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetOcclusionQueryuivNV(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params);
            }
        }

        public static 
        void glGetOcclusionQueryuivNV(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params);
            }
        }

        public static 
        void glPointParameteriNV(int pname, Int32 param)
        {
            Functions.glPointParameteriNV((int)pname, (Int32)param);
        }

        public static 
        void glPointParameterivNV(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glPointParameterivNV((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterivNV(int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glPointParameterivNV((int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glPointParameterivNV(int pname, IntPtr @params)
        {
            unsafe
            {
                Functions.glPointParameterivNV((int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4fNV(UInt32 id, Int32 len, Byte[] name, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                {
                    Functions.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                }
            }
        }

        public static 
        void glProgramNamedParameter4fNV(Int32 id, Int32 len, Byte[] name, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                {
                    Functions.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4fNV(UInt32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                {
                    Functions.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                }
            }
        }

        public static 
        void glProgramNamedParameter4fNV(Int32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                {
                    Functions.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4fNV(UInt32 id, Int32 len, IntPtr name, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
            }
        }

        public static 
        void glProgramNamedParameter4fNV(Int32 id, Int32 len, IntPtr name, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4dNV(UInt32 id, Int32 len, Byte[] name, Double x, Double y, Double z, Double w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                {
                    Functions.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                }
            }
        }

        public static 
        void glProgramNamedParameter4dNV(Int32 id, Int32 len, Byte[] name, Double x, Double y, Double z, Double w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                {
                    Functions.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4dNV(UInt32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                {
                    Functions.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                }
            }
        }

        public static 
        void glProgramNamedParameter4dNV(Int32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                {
                    Functions.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4dNV(UInt32 id, Int32 len, IntPtr name, Double x, Double y, Double z, Double w)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
            }
        }

        public static 
        void glProgramNamedParameter4dNV(Int32 id, Int32 len, IntPtr name, Double x, Double y, Double z, Double w)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4fvNV(UInt32 id, Int32 len, Byte[] name, Single[] v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Single* v_ptr = v)
                {
                    Functions.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glProgramNamedParameter4fvNV(Int32 id, Int32 len, Byte[] name, Single[] v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Single* v_ptr = v)
                {
                    Functions.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4fvNV(UInt32 id, Int32 len, ref Byte name, ref Single v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                }
            }
        }

        public static 
        void glProgramNamedParameter4fvNV(Int32 id, Int32 len, ref Byte name, ref Single v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Single* v_ptr = &v)
                {
                    Functions.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4fvNV(UInt32 id, Int32 len, IntPtr name, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
            }
        }

        public static 
        void glProgramNamedParameter4fvNV(Int32 id, Int32 len, IntPtr name, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4dvNV(UInt32 id, Int32 len, Byte[] name, Double[] v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Double* v_ptr = v)
                {
                    Functions.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glProgramNamedParameter4dvNV(Int32 id, Int32 len, Byte[] name, Double[] v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Double* v_ptr = v)
                {
                    Functions.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4dvNV(UInt32 id, Int32 len, ref Byte name, ref Double v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Double* v_ptr = &v)
                {
                    Functions.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                }
            }
        }

        public static 
        void glProgramNamedParameter4dvNV(Int32 id, Int32 len, ref Byte name, ref Double v)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Double* v_ptr = &v)
                {
                    Functions.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramNamedParameter4dvNV(UInt32 id, Int32 len, IntPtr name, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
            }
        }

        public static 
        void glProgramNamedParameter4dvNV(Int32 id, Int32 len, IntPtr name, IntPtr v)
        {
            unsafe
            {
                Functions.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramNamedParameterfvNV(UInt32 id, Int32 len, Byte[] name, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramNamedParameterfvNV(Int32 id, Int32 len, Byte[] name, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramNamedParameterfvNV(UInt32 id, Int32 len, ref Byte name, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramNamedParameterfvNV(Int32 id, Int32 len, ref Byte name, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramNamedParameterfvNV(UInt32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
            }
        }

        public static 
        void glGetProgramNamedParameterfvNV(Int32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramNamedParameterdvNV(UInt32 id, Int32 len, Byte[] name, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramNamedParameterdvNV(Int32 id, Int32 len, Byte[] name, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = name)
                fixed (Double* @params_ptr = @params)
                {
                    Functions.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramNamedParameterdvNV(UInt32 id, Int32 len, ref Byte name, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramNamedParameterdvNV(Int32 id, Int32 len, ref Byte name, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Byte* name_ptr = &name)
                fixed (Double* @params_ptr = &@params)
                {
                    Functions.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramNamedParameterdvNV(UInt32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
            }
        }

        public static 
        void glGetProgramNamedParameterdvNV(Int32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex2hNV(UInt16 x, UInt16 y)
        {
            Functions.glVertex2hNV((UInt16)x, (UInt16)y);
        }

        public static 
        void glVertex2hNV(Int16 x, Int16 y)
        {
            Functions.glVertex2hNV((UInt16)x, (UInt16)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex2hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertex2hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertex2hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex2hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertex2hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertex2hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex2hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex2hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex3hNV(UInt16 x, UInt16 y, UInt16 z)
        {
            Functions.glVertex3hNV((UInt16)x, (UInt16)y, (UInt16)z);
        }

        public static 
        void glVertex3hNV(Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertex3hNV((UInt16)x, (UInt16)y, (UInt16)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex3hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertex3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertex3hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex3hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertex3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertex3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex3hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex3hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex4hNV(UInt16 x, UInt16 y, UInt16 z, UInt16 w)
        {
            Functions.glVertex4hNV((UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
        }

        public static 
        void glVertex4hNV(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertex4hNV((UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex4hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertex4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertex4hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertex4hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertex4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertex4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertex4hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glVertex4hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormal3hNV(UInt16 nx, UInt16 ny, UInt16 nz)
        {
            Functions.glNormal3hNV((UInt16)nx, (UInt16)ny, (UInt16)nz);
        }

        public static 
        void glNormal3hNV(Int16 nx, Int16 ny, Int16 nz)
        {
            Functions.glNormal3hNV((UInt16)nx, (UInt16)ny, (UInt16)nz);
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormal3hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glNormal3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glNormal3hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormal3hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glNormal3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glNormal3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glNormal3hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glNormal3hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3hNV(UInt16 red, UInt16 green, UInt16 blue)
        {
            Functions.glColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        public static 
        void glColor3hNV(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor3hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor3hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glColor3hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4hNV(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha)
        {
            Functions.glColor4hNV((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
        }

        public static 
        void glColor4hNV(Int16 red, Int16 green, Int16 blue, Int16 alpha)
        {
            Functions.glColor4hNV((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glColor4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glColor4hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glColor4hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glColor4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glColor4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glColor4hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glColor4hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord1hNV(UInt16 s)
        {
            Functions.glTexCoord1hNV((UInt16)s);
        }

        public static 
        void glTexCoord1hNV(Int16 s)
        {
            Functions.glTexCoord1hNV((UInt16)s);
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord1hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glTexCoord1hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord1hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord1hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glTexCoord1hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord1hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord1hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord1hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord2hNV(UInt16 s, UInt16 t)
        {
            Functions.glTexCoord2hNV((UInt16)s, (UInt16)t);
        }

        public static 
        void glTexCoord2hNV(Int16 s, Int16 t)
        {
            Functions.glTexCoord2hNV((UInt16)s, (UInt16)t);
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord2hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glTexCoord2hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord2hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord2hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glTexCoord2hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord2hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord2hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord2hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord3hNV(UInt16 s, UInt16 t, UInt16 r)
        {
            Functions.glTexCoord3hNV((UInt16)s, (UInt16)t, (UInt16)r);
        }

        public static 
        void glTexCoord3hNV(Int16 s, Int16 t, Int16 r)
        {
            Functions.glTexCoord3hNV((UInt16)s, (UInt16)t, (UInt16)r);
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord3hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glTexCoord3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord3hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord3hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glTexCoord3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord3hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord3hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord4hNV(UInt16 s, UInt16 t, UInt16 r, UInt16 q)
        {
            Functions.glTexCoord4hNV((UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
        }

        public static 
        void glTexCoord4hNV(Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Functions.glTexCoord4hNV((UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord4hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glTexCoord4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glTexCoord4hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTexCoord4hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glTexCoord4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glTexCoord4hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glTexCoord4hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glTexCoord4hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord1hNV(int target, UInt16 s)
        {
            Functions.glMultiTexCoord1hNV((int)target, (UInt16)s);
        }

        public static 
        void glMultiTexCoord1hNV(int target, Int16 s)
        {
            Functions.glMultiTexCoord1hNV((int)target, (UInt16)s);
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord1hvNV(int target, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1hvNV(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord1hvNV(int target, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1hvNV(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord1hvNV(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord1hvNV((int)target, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord2hNV(int target, UInt16 s, UInt16 t)
        {
            Functions.glMultiTexCoord2hNV((int)target, (UInt16)s, (UInt16)t);
        }

        public static 
        void glMultiTexCoord2hNV(int target, Int16 s, Int16 t)
        {
            Functions.glMultiTexCoord2hNV((int)target, (UInt16)s, (UInt16)t);
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord2hvNV(int target, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2hvNV(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord2hvNV(int target, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2hvNV(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord2hvNV(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord2hvNV((int)target, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord3hNV(int target, UInt16 s, UInt16 t, UInt16 r)
        {
            Functions.glMultiTexCoord3hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r);
        }

        public static 
        void glMultiTexCoord3hNV(int target, Int16 s, Int16 t, Int16 r)
        {
            Functions.glMultiTexCoord3hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r);
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord3hvNV(int target, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3hvNV(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord3hvNV(int target, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3hvNV(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord3hvNV(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord3hvNV((int)target, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord4hNV(int target, UInt16 s, UInt16 t, UInt16 r, UInt16 q)
        {
            Functions.glMultiTexCoord4hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
        }

        public static 
        void glMultiTexCoord4hNV(int target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Functions.glMultiTexCoord4hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord4hvNV(int target, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4hvNV(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiTexCoord4hvNV(int target, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4hvNV(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glMultiTexCoord4hvNV(int target, IntPtr v)
        {
            unsafe
            {
                Functions.glMultiTexCoord4hvNV((int)target, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glFogCoordhNV(UInt16 fog)
        {
            Functions.glFogCoordhNV((UInt16)fog);
        }

        public static 
        void glFogCoordhNV(Int16 fog)
        {
            Functions.glFogCoordhNV((UInt16)fog);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFogCoordhvNV(UInt16[] fog)
        {
            unsafe
            {
                fixed (UInt16* fog_ptr = fog)
                {
                    Functions.glFogCoordhvNV((UInt16*)fog_ptr);
                }
            }
        }

        public static 
        void glFogCoordhvNV(Int16[] fog)
        {
            unsafe
            {
                fixed (Int16* fog_ptr = fog)
                {
                    Functions.glFogCoordhvNV((UInt16*)fog_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glFogCoordhvNV(ref UInt16 fog)
        {
            unsafe
            {
                fixed (UInt16* fog_ptr = &fog)
                {
                    Functions.glFogCoordhvNV((UInt16*)fog_ptr);
                }
            }
        }

        public static 
        void glFogCoordhvNV(ref Int16 fog)
        {
            unsafe
            {
                fixed (Int16* fog_ptr = &fog)
                {
                    Functions.glFogCoordhvNV((UInt16*)fog_ptr);
                }
            }
        }

        public static 
        void glFogCoordhvNV(IntPtr fog)
        {
            unsafe
            {
                Functions.glFogCoordhvNV((UInt16*)fog);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3hNV(UInt16 red, UInt16 green, UInt16 blue)
        {
            Functions.glSecondaryColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        public static 
        void glSecondaryColor3hNV(Int16 red, Int16 green, Int16 blue)
        {
            Functions.glSecondaryColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3hvNV(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glSecondaryColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3hvNV(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glSecondaryColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSecondaryColor3hvNV(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3hvNV(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glSecondaryColor3hvNV((UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glSecondaryColor3hvNV(IntPtr v)
        {
            unsafe
            {
                Functions.glSecondaryColor3hvNV((UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexWeighthNV(UInt16 weight)
        {
            Functions.glVertexWeighthNV((UInt16)weight);
        }

        public static 
        void glVertexWeighthNV(Int16 weight)
        {
            Functions.glVertexWeighthNV((UInt16)weight);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexWeighthvNV(UInt16[] weight)
        {
            unsafe
            {
                fixed (UInt16* weight_ptr = weight)
                {
                    Functions.glVertexWeighthvNV((UInt16*)weight_ptr);
                }
            }
        }

        public static 
        void glVertexWeighthvNV(Int16[] weight)
        {
            unsafe
            {
                fixed (Int16* weight_ptr = weight)
                {
                    Functions.glVertexWeighthvNV((UInt16*)weight_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexWeighthvNV(ref UInt16 weight)
        {
            unsafe
            {
                fixed (UInt16* weight_ptr = &weight)
                {
                    Functions.glVertexWeighthvNV((UInt16*)weight_ptr);
                }
            }
        }

        public static 
        void glVertexWeighthvNV(ref Int16 weight)
        {
            unsafe
            {
                fixed (Int16* weight_ptr = &weight)
                {
                    Functions.glVertexWeighthvNV((UInt16*)weight_ptr);
                }
            }
        }

        public static 
        void glVertexWeighthvNV(IntPtr weight)
        {
            unsafe
            {
                Functions.glVertexWeighthvNV((UInt16*)weight);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1hNV(UInt32 index, UInt16 x)
        {
            Functions.glVertexAttrib1hNV((UInt32)index, (UInt16)x);
        }

        public static 
        void glVertexAttrib1hNV(Int32 index, Int16 x)
        {
            Functions.glVertexAttrib1hNV((UInt32)index, (UInt16)x);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1hvNV(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1hvNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1hvNV(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib1hvNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib1hvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib1hvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2hNV(UInt32 index, UInt16 x, UInt16 y)
        {
            Functions.glVertexAttrib2hNV((UInt32)index, (UInt16)x, (UInt16)y);
        }

        public static 
        void glVertexAttrib2hNV(Int32 index, Int16 x, Int16 y)
        {
            Functions.glVertexAttrib2hNV((UInt32)index, (UInt16)x, (UInt16)y);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2hvNV(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2hvNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2hvNV(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib2hvNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib2hvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib2hvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3hNV(UInt32 index, UInt16 x, UInt16 y, UInt16 z)
        {
            Functions.glVertexAttrib3hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z);
        }

        public static 
        void glVertexAttrib3hNV(Int32 index, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexAttrib3hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3hvNV(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3hvNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3hvNV(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib3hvNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib3hvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib3hvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4hNV(UInt32 index, UInt16 x, UInt16 y, UInt16 z, UInt16 w)
        {
            Functions.glVertexAttrib4hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
        }

        public static 
        void glVertexAttrib4hNV(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexAttrib4hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4hvNV(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4hvNV(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4hvNV(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttrib4hvNV(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttrib4hvNV(UInt32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttrib4hvNV(Int32 index, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1hvNV(UInt32 index, Int32 n, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1hvNV(Int32 index, Int32 n, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1hvNV(UInt32 index, Int32 n, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs1hvNV(Int32 index, Int32 n, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs1hvNV(UInt32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttribs1hvNV(Int32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2hvNV(UInt32 index, Int32 n, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2hvNV(Int32 index, Int32 n, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2hvNV(UInt32 index, Int32 n, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs2hvNV(Int32 index, Int32 n, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs2hvNV(UInt32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttribs2hvNV(Int32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3hvNV(UInt32 index, Int32 n, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3hvNV(Int32 index, Int32 n, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3hvNV(UInt32 index, Int32 n, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs3hvNV(Int32 index, Int32 n, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs3hvNV(UInt32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttribs3hvNV(Int32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4hvNV(UInt32 index, Int32 n, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Functions.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4hvNV(Int32 index, Int32 n, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4hvNV(UInt32 index, Int32 n, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Functions.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        public static 
        void glVertexAttribs4hvNV(Int32 index, Int32 n, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribs4hvNV(UInt32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        public static 
        void glVertexAttribs4hvNV(Int32 index, Int32 n, IntPtr v)
        {
            unsafe
            {
                Functions.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v);
            }
        }

        public static 
        void glPixelDataRangeNV(int target, Int32 length, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glPixelDataRangeNV((int)target, (Int32)length, (IntPtr)pointer);
            }
        }

        public static 
        void glPixelDataRangeNV(int target, Int32 length, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glPixelDataRangeNV((int)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glFlushPixelDataRangeNV(int target)
        {
            Functions.glFlushPixelDataRangeNV((int)target);
        }

        public static 
        void glPrimitiveRestartNV()
        {
            Functions.glPrimitiveRestartNV();
        }

        [System.CLSCompliant(false)]
        public static 
        void glPrimitiveRestartIndexNV(UInt32 index)
        {
            Functions.glPrimitiveRestartIndexNV((UInt32)index);
        }

        public static 
        void glPrimitiveRestartIndexNV(Int32 index)
        {
            Functions.glPrimitiveRestartIndexNV((UInt32)index);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4iNV(int target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glProgramLocalParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        public static 
        void glProgramLocalParameterI4iNV(int target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glProgramLocalParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4ivNV(int target, UInt32 index, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameterI4ivNV(int target, Int32 index, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4ivNV(int target, UInt32 index, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameterI4ivNV(int target, Int32 index, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4ivNV(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        public static 
        void glProgramLocalParameterI4ivNV(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParametersI4ivNV(int target, UInt32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParametersI4ivNV(int target, Int32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParametersI4ivNV(int target, UInt32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParametersI4ivNV(int target, Int32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParametersI4ivNV(int target, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }
        }

        public static 
        void glProgramLocalParametersI4ivNV(int target, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4uiNV(int target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
        {
            Functions.glProgramLocalParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        public static 
        void glProgramLocalParameterI4uiNV(int target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glProgramLocalParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4uivNV(int target, UInt32 index, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameterI4uivNV(int target, Int32 index, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4uivNV(int target, UInt32 index, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParameterI4uivNV(int target, Int32 index, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParameterI4uivNV(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        public static 
        void glProgramLocalParameterI4uivNV(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParametersI4uivNV(int target, UInt32 index, Int32 count, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParametersI4uivNV(int target, Int32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParametersI4uivNV(int target, UInt32 index, Int32 count, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramLocalParametersI4uivNV(int target, Int32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramLocalParametersI4uivNV(int target, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }
        }

        public static 
        void glProgramLocalParametersI4uivNV(int target, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4iNV(int target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glProgramEnvParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        public static 
        void glProgramEnvParameterI4iNV(int target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glProgramEnvParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4ivNV(int target, UInt32 index, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameterI4ivNV(int target, Int32 index, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4ivNV(int target, UInt32 index, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameterI4ivNV(int target, Int32 index, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4ivNV(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        public static 
        void glProgramEnvParameterI4ivNV(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParametersI4ivNV(int target, UInt32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParametersI4ivNV(int target, Int32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParametersI4ivNV(int target, UInt32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParametersI4ivNV(int target, Int32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParametersI4ivNV(int target, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }
        }

        public static 
        void glProgramEnvParametersI4ivNV(int target, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4uiNV(int target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
        {
            Functions.glProgramEnvParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        public static 
        void glProgramEnvParameterI4uiNV(int target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glProgramEnvParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4uivNV(int target, UInt32 index, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameterI4uivNV(int target, Int32 index, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4uivNV(int target, UInt32 index, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParameterI4uivNV(int target, Int32 index, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParameterI4uivNV(int target, UInt32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        public static 
        void glProgramEnvParameterI4uivNV(int target, Int32 index, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParametersI4uivNV(int target, UInt32 index, Int32 count, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParametersI4uivNV(int target, Int32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParametersI4uivNV(int target, UInt32 index, Int32 count, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramEnvParametersI4uivNV(int target, Int32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramEnvParametersI4uivNV(int target, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }
        }

        public static 
        void glProgramEnvParametersI4uivNV(int target, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterIivNV(int target, UInt32 index, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramLocalParameterIivNV(int target, Int32 index, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterIivNV(int target, UInt32 index, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramLocalParameterIivNV(int target, Int32 index, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterIivNV(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        public static 
        void glGetProgramLocalParameterIivNV(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterIuivNV(int target, UInt32 index, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramLocalParameterIuivNV(int target, Int32 index, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterIuivNV(int target, UInt32 index, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramLocalParameterIuivNV(int target, Int32 index, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramLocalParameterIuivNV(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        public static 
        void glGetProgramLocalParameterIuivNV(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterIivNV(int target, UInt32 index, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramEnvParameterIivNV(int target, Int32 index, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterIivNV(int target, UInt32 index, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramEnvParameterIivNV(int target, Int32 index, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterIivNV(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        public static 
        void glGetProgramEnvParameterIivNV(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterIuivNV(int target, UInt32 index, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetProgramEnvParameterIuivNV(int target, Int32 index, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterIuivNV(int target, UInt32 index, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetProgramEnvParameterIuivNV(int target, Int32 index, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetProgramEnvParameterIuivNV(int target, UInt32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        public static 
        void glGetProgramEnvParameterIuivNV(int target, Int32 index, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
            }
        }

        public static 
        void glProgramVertexLimitNV(int target, Int32 limit)
        {
            Functions.glProgramVertexLimitNV((int)target, (Int32)limit);
        }

        public static 
        void glDepthRangedNV(Double zNear, Double zFar)
        {
            Functions.glDepthRangedNV((Double)zNear, (Double)zFar);
        }

        public static 
        void glClearDepthdNV(Double depth)
        {
            Functions.glClearDepthdNV((Double)depth);
        }

        public static 
        void glDepthBoundsdNV(Double zmin, Double zmax)
        {
            Functions.glDepthBoundsdNV((Double)zmin, (Double)zmax);
        }

        public static 
        void glRenderbufferStorageMultisampleCoverageNV(int target, Int32 coverageSamples, Int32 colorSamples, int internalformat, Int32 width, Int32 height)
        {
            Functions.glRenderbufferStorageMultisampleCoverageNV((int)target, (Int32)coverageSamples, (Int32)colorSamples, (int)internalformat, (Int32)width, (Int32)height);
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersfvNV(int target, UInt32 buffer, UInt32 index, Int32 count, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramBufferParametersfvNV(int target, Int32 buffer, Int32 index, Int32 count, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersfvNV(int target, UInt32 buffer, UInt32 index, Int32 count, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramBufferParametersfvNV(int target, Int32 buffer, Int32 index, Int32 count, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersfvNV(int target, UInt32 buffer, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
            }
        }

        public static 
        void glProgramBufferParametersfvNV(int target, Int32 buffer, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersIivNV(int target, UInt32 buffer, UInt32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramBufferParametersIivNV(int target, Int32 buffer, Int32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersIivNV(int target, UInt32 buffer, UInt32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramBufferParametersIivNV(int target, Int32 buffer, Int32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersIivNV(int target, UInt32 buffer, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
            }
        }

        public static 
        void glProgramBufferParametersIivNV(int target, Int32 buffer, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersIuivNV(int target, UInt32 buffer, UInt32 index, Int32 count, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Functions.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramBufferParametersIuivNV(int target, Int32 buffer, Int32 index, Int32 count, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersIuivNV(int target, UInt32 buffer, UInt32 index, Int32 count, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Functions.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        public static 
        void glProgramBufferParametersIuivNV(int target, Int32 buffer, Int32 index, Int32 count, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glProgramBufferParametersIuivNV(int target, UInt32 buffer, UInt32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params);
            }
        }

        public static 
        void glProgramBufferParametersIuivNV(int target, Int32 buffer, Int32 index, Int32 count, IntPtr @params)
        {
            unsafe
            {
                Functions.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params);
            }
        }

        public static 
        void glBeginTransformFeedbackNV(int primitiveMode)
        {
            Functions.glBeginTransformFeedbackNV((int)primitiveMode);
        }

        public static 
        void glEndTransformFeedbackNV()
        {
            Functions.glEndTransformFeedbackNV();
        }

        [System.CLSCompliant(false)]
        public static 
        void glTransformFeedbackAttribsNV(UInt32 count, Int32[] attribs, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* attribs_ptr = attribs)
                {
                    Functions.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
                }
            }
        }

        public static 
        void glTransformFeedbackAttribsNV(Int32 count, Int32[] attribs, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* attribs_ptr = attribs)
                {
                    Functions.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTransformFeedbackAttribsNV(UInt32 count, ref Int32 attribs, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* attribs_ptr = &attribs)
                {
                    Functions.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
                }
            }
        }

        public static 
        void glTransformFeedbackAttribsNV(Int32 count, ref Int32 attribs, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* attribs_ptr = &attribs)
                {
                    Functions.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTransformFeedbackAttribsNV(UInt32 count, IntPtr attribs, int bufferMode)
        {
            unsafe
            {
                Functions.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (int)bufferMode);
            }
        }

        public static 
        void glTransformFeedbackAttribsNV(Int32 count, IntPtr attribs, int bufferMode)
        {
            unsafe
            {
                Functions.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (int)bufferMode);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindBufferRangeNV(int target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
        {
            Functions.glBindBufferRangeNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        public static 
        void glBindBufferRangeNV(int target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
        {
            Functions.glBindBufferRangeNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindBufferOffsetNV(int target, UInt32 index, UInt32 buffer, IntPtr offset)
        {
            Functions.glBindBufferOffsetNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
        }

        public static 
        void glBindBufferOffsetNV(int target, Int32 index, Int32 buffer, IntPtr offset)
        {
            Functions.glBindBufferOffsetNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindBufferBaseNV(int target, UInt32 index, UInt32 buffer)
        {
            Functions.glBindBufferBaseNV((int)target, (UInt32)index, (UInt32)buffer);
        }

        public static 
        void glBindBufferBaseNV(int target, Int32 index, Int32 buffer)
        {
            Functions.glBindBufferBaseNV((int)target, (UInt32)index, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glTransformFeedbackVaryingsNV(UInt32 program, Int32 count, Int32[] locations, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = locations)
                {
                    Functions.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
                }
            }
        }

        public static 
        void glTransformFeedbackVaryingsNV(Int32 program, Int32 count, Int32[] locations, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = locations)
                {
                    Functions.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTransformFeedbackVaryingsNV(UInt32 program, Int32 count, ref Int32 locations, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = &locations)
                {
                    Functions.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
                }
            }
        }

        public static 
        void glTransformFeedbackVaryingsNV(Int32 program, Int32 count, ref Int32 locations, int bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = &locations)
                {
                    Functions.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTransformFeedbackVaryingsNV(UInt32 program, Int32 count, IntPtr locations, int bufferMode)
        {
            unsafe
            {
                Functions.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations, (int)bufferMode);
            }
        }

        public static 
        void glTransformFeedbackVaryingsNV(Int32 program, Int32 count, IntPtr locations, int bufferMode)
        {
            unsafe
            {
                Functions.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations, (int)bufferMode);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glActiveVaryingNV(UInt32 program, System.String name)
        {
            Functions.glActiveVaryingNV((UInt32)program, (System.String)name);
        }

        public static 
        void glActiveVaryingNV(Int32 program, System.String name)
        {
            Functions.glActiveVaryingNV((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGetVaryingLocationNV(UInt32 program, System.String name)
        {
            return Functions.glGetVaryingLocationNV((UInt32)program, (System.String)name);
        }

        public static 
        Int32 glGetVaryingLocationNV(Int32 program, System.String name)
        {
            return Functions.glGetVaryingLocationNV((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        public static 
        void glGetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (int* type_ptr = type)
                {
                    Functions.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        public static 
        void glGetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Functions.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        public static 
        void glGetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                Functions.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTransformFeedbackVaryingNV(UInt32 program, UInt32 index, [Out] Int32[] location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = location)
                {
                    Functions.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                }
            }
        }

        public static 
        void glGetTransformFeedbackVaryingNV(Int32 program, Int32 index, [Out] Int32[] location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = location)
                {
                    Functions.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTransformFeedbackVaryingNV(UInt32 program, UInt32 index, [Out] out Int32 location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = &location)
                {
                    Functions.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    location = *location_ptr;
                }
            }
        }

        public static 
        void glGetTransformFeedbackVaryingNV(Int32 program, Int32 index, [Out] out Int32 location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = &location)
                {
                    Functions.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    location = *location_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetTransformFeedbackVaryingNV(UInt32 program, UInt32 index, [Out] IntPtr location)
        {
            unsafe
            {
                Functions.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
            }
        }

        public static 
        void glGetTransformFeedbackVaryingNV(Int32 program, Int32 index, [Out] IntPtr location)
        {
            unsafe
            {
                Functions.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
            }
        }

        public static 
        void glResizeBuffersMESA()
        {
            Functions.glResizeBuffersMESA();
        }

        public static 
        void glWindowPos2dMESA(Double x, Double y)
        {
            Functions.glWindowPos2dMESA((Double)x, (Double)y);
        }

        public static 
        void glWindowPos2dvMESA(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glWindowPos2dvMESA((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2dvMESA(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glWindowPos2dvMESA((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2dvMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2dvMESA((Double*)v);
            }
        }

        public static 
        void glWindowPos2fMESA(Single x, Single y)
        {
            Functions.glWindowPos2fMESA((Single)x, (Single)y);
        }

        public static 
        void glWindowPos2fvMESA(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glWindowPos2fvMESA((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2fvMESA(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glWindowPos2fvMESA((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2fvMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2fvMESA((Single*)v);
            }
        }

        public static 
        void glWindowPos2iMESA(Int32 x, Int32 y)
        {
            Functions.glWindowPos2iMESA((Int32)x, (Int32)y);
        }

        public static 
        void glWindowPos2ivMESA(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glWindowPos2ivMESA((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2ivMESA(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glWindowPos2ivMESA((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2ivMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2ivMESA((Int32*)v);
            }
        }

        public static 
        void glWindowPos2sMESA(Int16 x, Int16 y)
        {
            Functions.glWindowPos2sMESA((Int16)x, (Int16)y);
        }

        public static 
        void glWindowPos2svMESA(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glWindowPos2svMESA((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2svMESA(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glWindowPos2svMESA((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos2svMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos2svMESA((Int16*)v);
            }
        }

        public static 
        void glWindowPos3dMESA(Double x, Double y, Double z)
        {
            Functions.glWindowPos3dMESA((Double)x, (Double)y, (Double)z);
        }

        public static 
        void glWindowPos3dvMESA(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glWindowPos3dvMESA((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3dvMESA(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glWindowPos3dvMESA((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3dvMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3dvMESA((Double*)v);
            }
        }

        public static 
        void glWindowPos3fMESA(Single x, Single y, Single z)
        {
            Functions.glWindowPos3fMESA((Single)x, (Single)y, (Single)z);
        }

        public static 
        void glWindowPos3fvMESA(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glWindowPos3fvMESA((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3fvMESA(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glWindowPos3fvMESA((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3fvMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3fvMESA((Single*)v);
            }
        }

        public static 
        void glWindowPos3iMESA(Int32 x, Int32 y, Int32 z)
        {
            Functions.glWindowPos3iMESA((Int32)x, (Int32)y, (Int32)z);
        }

        public static 
        void glWindowPos3ivMESA(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glWindowPos3ivMESA((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3ivMESA(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glWindowPos3ivMESA((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3ivMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3ivMESA((Int32*)v);
            }
        }

        public static 
        void glWindowPos3sMESA(Int16 x, Int16 y, Int16 z)
        {
            Functions.glWindowPos3sMESA((Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glWindowPos3svMESA(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glWindowPos3svMESA((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3svMESA(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glWindowPos3svMESA((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos3svMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos3svMESA((Int16*)v);
            }
        }

        public static 
        void glWindowPos4dMESA(Double x, Double y, Double z, Double w)
        {
            Functions.glWindowPos4dMESA((Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glWindowPos4dvMESA(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Functions.glWindowPos4dvMESA((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4dvMESA(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Functions.glWindowPos4dvMESA((Double*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4dvMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos4dvMESA((Double*)v);
            }
        }

        public static 
        void glWindowPos4fMESA(Single x, Single y, Single z, Single w)
        {
            Functions.glWindowPos4fMESA((Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glWindowPos4fvMESA(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Functions.glWindowPos4fvMESA((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4fvMESA(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Functions.glWindowPos4fvMESA((Single*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4fvMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos4fvMESA((Single*)v);
            }
        }

        public static 
        void glWindowPos4iMESA(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glWindowPos4iMESA((Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        public static 
        void glWindowPos4ivMESA(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Functions.glWindowPos4ivMESA((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4ivMESA(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Functions.glWindowPos4ivMESA((Int32*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4ivMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos4ivMESA((Int32*)v);
            }
        }

        public static 
        void glWindowPos4sMESA(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glWindowPos4sMESA((Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        public static 
        void glWindowPos4svMESA(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Functions.glWindowPos4svMESA((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4svMESA(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Functions.glWindowPos4svMESA((Int16*)v_ptr);
                }
            }
        }

        public static 
        void glWindowPos4svMESA(IntPtr v)
        {
            unsafe
            {
                Functions.glWindowPos4svMESA((Int16*)v);
            }
        }

        public static 
        void glMultiModeDrawArraysIBM(int[] mode, Int32[] first, Int32[] count, Int32 primcount, Int32 modestride)
        {
            unsafe
            {
                fixed (int* mode_ptr = mode)
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
                }
            }
        }

        public static 
        void glMultiModeDrawArraysIBM(ref int mode, ref Int32 first, ref Int32 count, Int32 primcount, Int32 modestride)
        {
            unsafe
            {
                fixed (int* mode_ptr = &mode)
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Functions.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
                }
            }
        }

        public static 
        void glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, Int32 primcount, Int32 modestride)
        {
            unsafe
            {
                Functions.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first, (Int32*)count, (Int32)primcount, (Int32)modestride);
            }
        }

        public static 
        void glMultiModeDrawElementsIBM(int[] mode, Int32[] count, int type, IntPtr indices, Int32 primcount, Int32 modestride)
        {
            unsafe
            {
                fixed (int* mode_ptr = mode)
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
                }
            }
        }

        public static 
        void glMultiModeDrawElementsIBM(IntPtr mode, IntPtr count, int type, [In, Out] object indices, Int32 primcount, Int32 modestride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glMultiModeDrawElementsIBM((int*)mode, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        public static 
        void glMultiModeDrawElementsIBM(ref int mode, ref Int32 count, int type, [In, Out] object indices, Int32 primcount, Int32 modestride)
        {
            unsafe
            {
                fixed (int* mode_ptr = &mode)
                fixed (Int32* count_ptr = &count)
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Functions.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        public static 
        void glColorPointerListIBM(Int32 size, int type, Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glColorPointerListIBM(Int32 size, int type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glSecondaryColorPointerListIBM(Int32 size, int type, Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glSecondaryColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glSecondaryColorPointerListIBM(Int32 size, int type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glSecondaryColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glEdgeFlagPointerListIBM(Int32 stride, bool[] pointer, Int32 ptrstride)
        {
            unsafe
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    Functions.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer_ptr, (Int32)ptrstride);
                }
            }
        }

        public static 
        void glEdgeFlagPointerListIBM(Int32 stride, ref bool pointer, Int32 ptrstride)
        {
            unsafe
            {
                fixed (bool* pointer_ptr = &pointer)
                {
                    Functions.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer_ptr, (Int32)ptrstride);
                }
            }
        }

        public static 
        void glEdgeFlagPointerListIBM(Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glFogCoordPointerListIBM(int type, Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glFogCoordPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glFogCoordPointerListIBM(int type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glFogCoordPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glIndexPointerListIBM(int type, Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glIndexPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glIndexPointerListIBM(int type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glIndexPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glNormalPointerListIBM(int type, Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glNormalPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glNormalPointerListIBM(int type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glNormalPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glTexCoordPointerListIBM(Int32 size, int type, Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glTexCoordPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glTexCoordPointerListIBM(Int32 size, int type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glTexCoordPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexPointerListIBM(Int32 size, int type, Int32 stride, IntPtr pointer, Int32 ptrstride)
        {
            unsafe
            {
                Functions.glVertexPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
            }
        }

        public static 
        void glVertexPointerListIBM(Int32 size, int type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glTbufferMask3DFX(UInt32 mask)
        {
            Functions.glTbufferMask3DFX((UInt32)mask);
        }

        public static 
        void glTbufferMask3DFX(Int32 mask)
        {
            Functions.glTbufferMask3DFX((UInt32)mask);
        }

        public static 
        void glTexBumpParameterivATI(int pname, Int32[] param)
        {
            unsafe
            {
                fixed (Int32* param_ptr = param)
                {
                    Functions.glTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
                }
            }
        }

        public static 
        void glTexBumpParameterivATI(int pname, ref Int32 param)
        {
            unsafe
            {
                fixed (Int32* param_ptr = &param)
                {
                    Functions.glTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
                }
            }
        }

        public static 
        void glTexBumpParameterivATI(int pname, IntPtr param)
        {
            unsafe
            {
                Functions.glTexBumpParameterivATI((int)pname, (Int32*)param);
            }
        }

        public static 
        void glTexBumpParameterfvATI(int pname, Single[] param)
        {
            unsafe
            {
                fixed (Single* param_ptr = param)
                {
                    Functions.glTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
                }
            }
        }

        public static 
        void glTexBumpParameterfvATI(int pname, ref Single param)
        {
            unsafe
            {
                fixed (Single* param_ptr = &param)
                {
                    Functions.glTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
                }
            }
        }

        public static 
        void glTexBumpParameterfvATI(int pname, IntPtr param)
        {
            unsafe
            {
                Functions.glTexBumpParameterfvATI((int)pname, (Single*)param);
            }
        }

        public static 
        void glGetTexBumpParameterivATI(int pname, [Out] Int32[] param)
        {
            unsafe
            {
                fixed (Int32* param_ptr = param)
                {
                    Functions.glGetTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
                }
            }
        }

        public static 
        void glGetTexBumpParameterivATI(int pname, [Out] out Int32 param)
        {
            unsafe
            {
                fixed (Int32* param_ptr = &param)
                {
                    Functions.glGetTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
                    param = *param_ptr;
                }
            }
        }

        public static 
        void glGetTexBumpParameterivATI(int pname, [Out] IntPtr param)
        {
            unsafe
            {
                Functions.glGetTexBumpParameterivATI((int)pname, (Int32*)param);
            }
        }

        public static 
        void glGetTexBumpParameterfvATI(int pname, [Out] Single[] param)
        {
            unsafe
            {
                fixed (Single* param_ptr = param)
                {
                    Functions.glGetTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
                }
            }
        }

        public static 
        void glGetTexBumpParameterfvATI(int pname, [Out] out Single param)
        {
            unsafe
            {
                fixed (Single* param_ptr = &param)
                {
                    Functions.glGetTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
                    param = *param_ptr;
                }
            }
        }

        public static 
        void glGetTexBumpParameterfvATI(int pname, [Out] IntPtr param)
        {
            unsafe
            {
                Functions.glGetTexBumpParameterfvATI((int)pname, (Single*)param);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        Int32 glGenFragmentShadersATI(UInt32 range)
        {
            return Functions.glGenFragmentShadersATI((UInt32)range);
        }

        public static 
        Int32 glGenFragmentShadersATI(Int32 range)
        {
            return Functions.glGenFragmentShadersATI((UInt32)range);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindFragmentShaderATI(UInt32 id)
        {
            Functions.glBindFragmentShaderATI((UInt32)id);
        }

        public static 
        void glBindFragmentShaderATI(Int32 id)
        {
            Functions.glBindFragmentShaderATI((UInt32)id);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteFragmentShaderATI(UInt32 id)
        {
            Functions.glDeleteFragmentShaderATI((UInt32)id);
        }

        public static 
        void glDeleteFragmentShaderATI(Int32 id)
        {
            Functions.glDeleteFragmentShaderATI((UInt32)id);
        }

        public static 
        void glBeginFragmentShaderATI()
        {
            Functions.glBeginFragmentShaderATI();
        }

        public static 
        void glEndFragmentShaderATI()
        {
            Functions.glEndFragmentShaderATI();
        }

        [System.CLSCompliant(false)]
        public static 
        void glPassTexCoordATI(UInt32 dst, UInt32 coord, int swizzle)
        {
            Functions.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (int)swizzle);
        }

        public static 
        void glPassTexCoordATI(Int32 dst, Int32 coord, int swizzle)
        {
            Functions.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (int)swizzle);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSampleMapATI(UInt32 dst, UInt32 interp, int swizzle)
        {
            Functions.glSampleMapATI((UInt32)dst, (UInt32)interp, (int)swizzle);
        }

        public static 
        void glSampleMapATI(Int32 dst, Int32 interp, int swizzle)
        {
            Functions.glSampleMapATI((UInt32)dst, (UInt32)interp, (int)swizzle);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColorFragmentOp1ATI(int op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
        {
            Functions.glColorFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
        }

        public static 
        void glColorFragmentOp1ATI(int op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
        {
            Functions.glColorFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColorFragmentOp2ATI(int op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
        {
            Functions.glColorFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
        }

        public static 
        void glColorFragmentOp2ATI(int op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
        {
            Functions.glColorFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
        }

        [System.CLSCompliant(false)]
        public static 
        void glColorFragmentOp3ATI(int op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
        {
            Functions.glColorFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
        }

        public static 
        void glColorFragmentOp3ATI(int op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
        {
            Functions.glColorFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
        }

        [System.CLSCompliant(false)]
        public static 
        void glAlphaFragmentOp1ATI(int op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
        {
            Functions.glAlphaFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
        }

        public static 
        void glAlphaFragmentOp1ATI(int op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
        {
            Functions.glAlphaFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
        }

        [System.CLSCompliant(false)]
        public static 
        void glAlphaFragmentOp2ATI(int op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
        {
            Functions.glAlphaFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
        }

        public static 
        void glAlphaFragmentOp2ATI(int op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
        {
            Functions.glAlphaFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
        }

        [System.CLSCompliant(false)]
        public static 
        void glAlphaFragmentOp3ATI(int op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
        {
            Functions.glAlphaFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
        }

        public static 
        void glAlphaFragmentOp3ATI(int op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
        {
            Functions.glAlphaFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetFragmentShaderConstantATI(UInt32 dst, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glSetFragmentShaderConstantATI(Int32 dst, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Functions.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetFragmentShaderConstantATI(UInt32 dst, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                }
            }
        }

        public static 
        void glSetFragmentShaderConstantATI(Int32 dst, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Functions.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetFragmentShaderConstantATI(UInt32 dst, IntPtr value)
        {
            unsafe
            {
                Functions.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
            }
        }

        public static 
        void glSetFragmentShaderConstantATI(Int32 dst, IntPtr value)
        {
            unsafe
            {
                Functions.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
            }
        }

        public static 
        void glPNTrianglesiATI(int pname, Int32 param)
        {
            Functions.glPNTrianglesiATI((int)pname, (Int32)param);
        }

        public static 
        void glPNTrianglesfATI(int pname, Single param)
        {
            Functions.glPNTrianglesfATI((int)pname, (Single)param);
        }

        public static 
        Int32 glNewObjectBufferATI(Int32 size, IntPtr pointer, int usage)
        {
            unsafe
            {
                return Functions.glNewObjectBufferATI((Int32)size, (IntPtr)pointer, (int)usage);
            }
        }

        public static 
        Int32 glNewObjectBufferATI(Int32 size, [In, Out] object pointer, int usage)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    return Functions.glNewObjectBufferATI((Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (int)usage);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsObjectBufferATI(UInt32 buffer)
        {
            return Functions.glIsObjectBufferATI((UInt32)buffer);
        }

        public static 
        bool glIsObjectBufferATI(Int32 buffer)
        {
            return Functions.glIsObjectBufferATI((UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUpdateObjectBufferATI(UInt32 buffer, UInt32 offset, Int32 size, IntPtr pointer, int preserve)
        {
            unsafe
            {
                Functions.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (int)preserve);
            }
        }

        public static 
        void glUpdateObjectBufferATI(Int32 buffer, Int32 offset, Int32 size, IntPtr pointer, int preserve)
        {
            unsafe
            {
                Functions.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (int)preserve);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glUpdateObjectBufferATI(UInt32 buffer, UInt32 offset, Int32 size, [In, Out] object pointer, int preserve)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (int)preserve);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glUpdateObjectBufferATI(Int32 buffer, Int32 offset, Int32 size, [In, Out] object pointer, int preserve)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (int)preserve);
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectBufferfvATI(UInt32 buffer, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetObjectBufferfvATI(Int32 buffer, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectBufferfvATI(UInt32 buffer, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetObjectBufferfvATI(Int32 buffer, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectBufferfvATI(UInt32 buffer, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetObjectBufferfvATI(Int32 buffer, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectBufferivATI(UInt32 buffer, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetObjectBufferivATI(Int32 buffer, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectBufferivATI(UInt32 buffer, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetObjectBufferivATI(Int32 buffer, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetObjectBufferivATI(UInt32 buffer, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetObjectBufferivATI(Int32 buffer, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glFreeObjectBufferATI(UInt32 buffer)
        {
            Functions.glFreeObjectBufferATI((UInt32)buffer);
        }

        public static 
        void glFreeObjectBufferATI(Int32 buffer)
        {
            Functions.glFreeObjectBufferATI((UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glArrayObjectATI(int array, Int32 size, int type, Int32 stride, UInt32 buffer, UInt32 offset)
        {
            Functions.glArrayObjectATI((int)array, (Int32)size, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
        }

        public static 
        void glArrayObjectATI(int array, Int32 size, int type, Int32 stride, Int32 buffer, Int32 offset)
        {
            Functions.glArrayObjectATI((int)array, (Int32)size, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
        }

        public static 
        void glGetArrayObjectfvATI(int array, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetArrayObjectfvATI((int)array, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetArrayObjectfvATI(int array, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetArrayObjectfvATI((int)array, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetArrayObjectfvATI(int array, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetArrayObjectfvATI((int)array, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetArrayObjectivATI(int array, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetArrayObjectivATI((int)array, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetArrayObjectivATI(int array, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetArrayObjectivATI((int)array, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetArrayObjectivATI(int array, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetArrayObjectivATI((int)array, (int)pname, (Int32*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glVariantArrayObjectATI(UInt32 id, int type, Int32 stride, UInt32 buffer, UInt32 offset)
        {
            Functions.glVariantArrayObjectATI((UInt32)id, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
        }

        public static 
        void glVariantArrayObjectATI(Int32 id, int type, Int32 stride, Int32 buffer, Int32 offset)
        {
            Functions.glVariantArrayObjectATI((UInt32)id, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantArrayObjectfvATI(UInt32 id, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVariantArrayObjectfvATI(Int32 id, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantArrayObjectfvATI(UInt32 id, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVariantArrayObjectfvATI(Int32 id, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantArrayObjectfvATI(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetVariantArrayObjectfvATI(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantArrayObjectivATI(UInt32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVariantArrayObjectivATI(Int32 id, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantArrayObjectivATI(UInt32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVariantArrayObjectivATI(Int32 id, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVariantArrayObjectivATI(UInt32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetVariantArrayObjectivATI(Int32 id, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glVertexStream1sATI(int stream, Int16 x)
        {
            Functions.glVertexStream1sATI((int)stream, (Int16)x);
        }

        public static 
        void glVertexStream1svATI(int stream, Int16[] coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = coords)
                {
                    Functions.glVertexStream1svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1svATI(int stream, ref Int16 coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = &coords)
                {
                    Functions.glVertexStream1svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1svATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream1svATI((int)stream, (Int16*)coords);
            }
        }

        public static 
        void glVertexStream1iATI(int stream, Int32 x)
        {
            Functions.glVertexStream1iATI((int)stream, (Int32)x);
        }

        public static 
        void glVertexStream1ivATI(int stream, Int32[] coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = coords)
                {
                    Functions.glVertexStream1ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1ivATI(int stream, ref Int32 coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = &coords)
                {
                    Functions.glVertexStream1ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1ivATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream1ivATI((int)stream, (Int32*)coords);
            }
        }

        public static 
        void glVertexStream1fATI(int stream, Single x)
        {
            Functions.glVertexStream1fATI((int)stream, (Single)x);
        }

        public static 
        void glVertexStream1fvATI(int stream, Single[] coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = coords)
                {
                    Functions.glVertexStream1fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1fvATI(int stream, ref Single coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = &coords)
                {
                    Functions.glVertexStream1fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1fvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream1fvATI((int)stream, (Single*)coords);
            }
        }

        public static 
        void glVertexStream1dATI(int stream, Double x)
        {
            Functions.glVertexStream1dATI((int)stream, (Double)x);
        }

        public static 
        void glVertexStream1dvATI(int stream, Double[] coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = coords)
                {
                    Functions.glVertexStream1dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1dvATI(int stream, ref Double coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = &coords)
                {
                    Functions.glVertexStream1dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream1dvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream1dvATI((int)stream, (Double*)coords);
            }
        }

        public static 
        void glVertexStream2sATI(int stream, Int16 x, Int16 y)
        {
            Functions.glVertexStream2sATI((int)stream, (Int16)x, (Int16)y);
        }

        public static 
        void glVertexStream2svATI(int stream, Int16[] coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = coords)
                {
                    Functions.glVertexStream2svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2svATI(int stream, ref Int16 coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = &coords)
                {
                    Functions.glVertexStream2svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2svATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream2svATI((int)stream, (Int16*)coords);
            }
        }

        public static 
        void glVertexStream2iATI(int stream, Int32 x, Int32 y)
        {
            Functions.glVertexStream2iATI((int)stream, (Int32)x, (Int32)y);
        }

        public static 
        void glVertexStream2ivATI(int stream, Int32[] coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = coords)
                {
                    Functions.glVertexStream2ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2ivATI(int stream, ref Int32 coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = &coords)
                {
                    Functions.glVertexStream2ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2ivATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream2ivATI((int)stream, (Int32*)coords);
            }
        }

        public static 
        void glVertexStream2fATI(int stream, Single x, Single y)
        {
            Functions.glVertexStream2fATI((int)stream, (Single)x, (Single)y);
        }

        public static 
        void glVertexStream2fvATI(int stream, Single[] coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = coords)
                {
                    Functions.glVertexStream2fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2fvATI(int stream, ref Single coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = &coords)
                {
                    Functions.glVertexStream2fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2fvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream2fvATI((int)stream, (Single*)coords);
            }
        }

        public static 
        void glVertexStream2dATI(int stream, Double x, Double y)
        {
            Functions.glVertexStream2dATI((int)stream, (Double)x, (Double)y);
        }

        public static 
        void glVertexStream2dvATI(int stream, Double[] coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = coords)
                {
                    Functions.glVertexStream2dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2dvATI(int stream, ref Double coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = &coords)
                {
                    Functions.glVertexStream2dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream2dvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream2dvATI((int)stream, (Double*)coords);
            }
        }

        public static 
        void glVertexStream3sATI(int stream, Int16 x, Int16 y, Int16 z)
        {
            Functions.glVertexStream3sATI((int)stream, (Int16)x, (Int16)y, (Int16)z);
        }

        public static 
        void glVertexStream3svATI(int stream, Int16[] coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = coords)
                {
                    Functions.glVertexStream3svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3svATI(int stream, ref Int16 coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = &coords)
                {
                    Functions.glVertexStream3svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3svATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream3svATI((int)stream, (Int16*)coords);
            }
        }

        public static 
        void glVertexStream3iATI(int stream, Int32 x, Int32 y, Int32 z)
        {
            Functions.glVertexStream3iATI((int)stream, (Int32)x, (Int32)y, (Int32)z);
        }

        public static 
        void glVertexStream3ivATI(int stream, Int32[] coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = coords)
                {
                    Functions.glVertexStream3ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3ivATI(int stream, ref Int32 coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = &coords)
                {
                    Functions.glVertexStream3ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3ivATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream3ivATI((int)stream, (Int32*)coords);
            }
        }

        public static 
        void glVertexStream3fATI(int stream, Single x, Single y, Single z)
        {
            Functions.glVertexStream3fATI((int)stream, (Single)x, (Single)y, (Single)z);
        }

        public static 
        void glVertexStream3fvATI(int stream, Single[] coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = coords)
                {
                    Functions.glVertexStream3fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3fvATI(int stream, ref Single coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = &coords)
                {
                    Functions.glVertexStream3fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3fvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream3fvATI((int)stream, (Single*)coords);
            }
        }

        public static 
        void glVertexStream3dATI(int stream, Double x, Double y, Double z)
        {
            Functions.glVertexStream3dATI((int)stream, (Double)x, (Double)y, (Double)z);
        }

        public static 
        void glVertexStream3dvATI(int stream, Double[] coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = coords)
                {
                    Functions.glVertexStream3dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3dvATI(int stream, ref Double coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = &coords)
                {
                    Functions.glVertexStream3dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream3dvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream3dvATI((int)stream, (Double*)coords);
            }
        }

        public static 
        void glVertexStream4sATI(int stream, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Functions.glVertexStream4sATI((int)stream, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        public static 
        void glVertexStream4svATI(int stream, Int16[] coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = coords)
                {
                    Functions.glVertexStream4svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4svATI(int stream, ref Int16 coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = &coords)
                {
                    Functions.glVertexStream4svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4svATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream4svATI((int)stream, (Int16*)coords);
            }
        }

        public static 
        void glVertexStream4iATI(int stream, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Functions.glVertexStream4iATI((int)stream, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        public static 
        void glVertexStream4ivATI(int stream, Int32[] coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = coords)
                {
                    Functions.glVertexStream4ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4ivATI(int stream, ref Int32 coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = &coords)
                {
                    Functions.glVertexStream4ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4ivATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream4ivATI((int)stream, (Int32*)coords);
            }
        }

        public static 
        void glVertexStream4fATI(int stream, Single x, Single y, Single z, Single w)
        {
            Functions.glVertexStream4fATI((int)stream, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        public static 
        void glVertexStream4fvATI(int stream, Single[] coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = coords)
                {
                    Functions.glVertexStream4fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4fvATI(int stream, ref Single coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = &coords)
                {
                    Functions.glVertexStream4fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4fvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream4fvATI((int)stream, (Single*)coords);
            }
        }

        public static 
        void glVertexStream4dATI(int stream, Double x, Double y, Double z, Double w)
        {
            Functions.glVertexStream4dATI((int)stream, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        public static 
        void glVertexStream4dvATI(int stream, Double[] coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = coords)
                {
                    Functions.glVertexStream4dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4dvATI(int stream, ref Double coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = &coords)
                {
                    Functions.glVertexStream4dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glVertexStream4dvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glVertexStream4dvATI((int)stream, (Double*)coords);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormalStream3bATI(int stream, SByte nx, SByte ny, SByte nz)
        {
            Functions.glNormalStream3bATI((int)stream, (SByte)nx, (SByte)ny, (SByte)nz);
        }

        public static 
        void glNormalStream3bATI(int stream, Byte nx, Byte ny, Byte nz)
        {
            Functions.glNormalStream3bATI((int)stream, (SByte)nx, (SByte)ny, (SByte)nz);
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormalStream3bvATI(int stream, SByte[] coords)
        {
            unsafe
            {
                fixed (SByte* coords_ptr = coords)
                {
                    Functions.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3bvATI(int stream, Byte[] coords)
        {
            unsafe
            {
                fixed (Byte* coords_ptr = coords)
                {
                    Functions.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glNormalStream3bvATI(int stream, ref SByte coords)
        {
            unsafe
            {
                fixed (SByte* coords_ptr = &coords)
                {
                    Functions.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3bvATI(int stream, ref Byte coords)
        {
            unsafe
            {
                fixed (Byte* coords_ptr = &coords)
                {
                    Functions.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3bvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glNormalStream3bvATI((int)stream, (SByte*)coords);
            }
        }

        public static 
        void glNormalStream3sATI(int stream, Int16 nx, Int16 ny, Int16 nz)
        {
            Functions.glNormalStream3sATI((int)stream, (Int16)nx, (Int16)ny, (Int16)nz);
        }

        public static 
        void glNormalStream3svATI(int stream, Int16[] coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = coords)
                {
                    Functions.glNormalStream3svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3svATI(int stream, ref Int16 coords)
        {
            unsafe
            {
                fixed (Int16* coords_ptr = &coords)
                {
                    Functions.glNormalStream3svATI((int)stream, (Int16*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3svATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glNormalStream3svATI((int)stream, (Int16*)coords);
            }
        }

        public static 
        void glNormalStream3iATI(int stream, Int32 nx, Int32 ny, Int32 nz)
        {
            Functions.glNormalStream3iATI((int)stream, (Int32)nx, (Int32)ny, (Int32)nz);
        }

        public static 
        void glNormalStream3ivATI(int stream, Int32[] coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = coords)
                {
                    Functions.glNormalStream3ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3ivATI(int stream, ref Int32 coords)
        {
            unsafe
            {
                fixed (Int32* coords_ptr = &coords)
                {
                    Functions.glNormalStream3ivATI((int)stream, (Int32*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3ivATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glNormalStream3ivATI((int)stream, (Int32*)coords);
            }
        }

        public static 
        void glNormalStream3fATI(int stream, Single nx, Single ny, Single nz)
        {
            Functions.glNormalStream3fATI((int)stream, (Single)nx, (Single)ny, (Single)nz);
        }

        public static 
        void glNormalStream3fvATI(int stream, Single[] coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = coords)
                {
                    Functions.glNormalStream3fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3fvATI(int stream, ref Single coords)
        {
            unsafe
            {
                fixed (Single* coords_ptr = &coords)
                {
                    Functions.glNormalStream3fvATI((int)stream, (Single*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3fvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glNormalStream3fvATI((int)stream, (Single*)coords);
            }
        }

        public static 
        void glNormalStream3dATI(int stream, Double nx, Double ny, Double nz)
        {
            Functions.glNormalStream3dATI((int)stream, (Double)nx, (Double)ny, (Double)nz);
        }

        public static 
        void glNormalStream3dvATI(int stream, Double[] coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = coords)
                {
                    Functions.glNormalStream3dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3dvATI(int stream, ref Double coords)
        {
            unsafe
            {
                fixed (Double* coords_ptr = &coords)
                {
                    Functions.glNormalStream3dvATI((int)stream, (Double*)coords_ptr);
                }
            }
        }

        public static 
        void glNormalStream3dvATI(int stream, IntPtr coords)
        {
            unsafe
            {
                Functions.glNormalStream3dvATI((int)stream, (Double*)coords);
            }
        }

        public static 
        void glClientActiveVertexStreamATI(int stream)
        {
            Functions.glClientActiveVertexStreamATI((int)stream);
        }

        public static 
        void glVertexBlendEnviATI(int pname, Int32 param)
        {
            Functions.glVertexBlendEnviATI((int)pname, (Int32)param);
        }

        public static 
        void glVertexBlendEnvfATI(int pname, Single param)
        {
            Functions.glVertexBlendEnvfATI((int)pname, (Single)param);
        }

        public static 
        void glElementPointerATI(int type, IntPtr pointer)
        {
            unsafe
            {
                Functions.glElementPointerATI((int)type, (IntPtr)pointer);
            }
        }

        public static 
        void glElementPointerATI(int type, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glElementPointerATI((int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glDrawElementArrayATI(int mode, Int32 count)
        {
            Functions.glDrawElementArrayATI((int)mode, (Int32)count);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDrawRangeElementArrayATI(int mode, UInt32 start, UInt32 end, Int32 count)
        {
            Functions.glDrawRangeElementArrayATI((int)mode, (UInt32)start, (UInt32)end, (Int32)count);
        }

        public static 
        void glDrawRangeElementArrayATI(int mode, Int32 start, Int32 end, Int32 count)
        {
            Functions.glDrawRangeElementArrayATI((int)mode, (UInt32)start, (UInt32)end, (Int32)count);
        }

        public static 
        void glDrawBuffersATI(Int32 n, int[] bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = bufs)
                {
                    Functions.glDrawBuffersATI((Int32)n, (int*)bufs_ptr);
                }
            }
        }

        public static 
        void glDrawBuffersATI(Int32 n, ref int bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = &bufs)
                {
                    Functions.glDrawBuffersATI((Int32)n, (int*)bufs_ptr);
                }
            }
        }

        public static 
        void glDrawBuffersATI(Int32 n, IntPtr bufs)
        {
            unsafe
            {
                Functions.glDrawBuffersATI((Int32)n, (int*)bufs);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        IntPtr glMapObjectBufferATI(UInt32 buffer)
        {
            return Functions.glMapObjectBufferATI((UInt32)buffer);
        }

        public static 
        IntPtr glMapObjectBufferATI(Int32 buffer)
        {
            return Functions.glMapObjectBufferATI((UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        public static 
        void glUnmapObjectBufferATI(UInt32 buffer)
        {
            Functions.glUnmapObjectBufferATI((UInt32)buffer);
        }

        public static 
        void glUnmapObjectBufferATI(Int32 buffer)
        {
            Functions.glUnmapObjectBufferATI((UInt32)buffer);
        }

        public static 
        void glStencilOpSeparateATI(int face, int sfail, int dpfail, int dppass)
        {
            Functions.glStencilOpSeparateATI((int)face, (int)sfail, (int)dpfail, (int)dppass);
        }

        [System.CLSCompliant(false)]
        public static 
        void glStencilFuncSeparateATI(int frontfunc, int backfunc, Int32 @ref, UInt32 mask)
        {
            Functions.glStencilFuncSeparateATI((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
        }

        public static 
        void glStencilFuncSeparateATI(int frontfunc, int backfunc, Int32 @ref, Int32 mask)
        {
            Functions.glStencilFuncSeparateATI((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        public static 
        void glVertexAttribArrayObjectATI(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, UInt32 buffer, UInt32 offset)
        {
            Functions.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
        }

        public static 
        void glVertexAttribArrayObjectATI(Int32 index, Int32 size, int type, bool normalized, Int32 stride, Int32 buffer, Int32 offset)
        {
            Functions.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (int)type, (bool)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribArrayObjectfvATI(UInt32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribArrayObjectfvATI(Int32 index, int pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribArrayObjectfvATI(UInt32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribArrayObjectfvATI(Int32 index, int pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribArrayObjectfvATI(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        public static 
        void glGetVertexAttribArrayObjectfvATI(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribArrayObjectivATI(UInt32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        public static 
        void glGetVertexAttribArrayObjectivATI(Int32 index, int pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Functions.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribArrayObjectivATI(UInt32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        public static 
        void glGetVertexAttribArrayObjectivATI(Int32 index, int pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Functions.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGetVertexAttribArrayObjectivATI(UInt32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glGetVertexAttribArrayObjectivATI(Int32 index, int pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Functions.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params);
            }
        }

        public static 
        void glElementPointerAPPLE(int type, IntPtr pointer)
        {
            unsafe
            {
                Functions.glElementPointerAPPLE((int)type, (IntPtr)pointer);
            }
        }

        public static 
        void glElementPointerAPPLE(int type, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glElementPointerAPPLE((int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glDrawElementArrayAPPLE(int mode, Int32 first, Int32 count)
        {
            Functions.glDrawElementArrayAPPLE((int)mode, (Int32)first, (Int32)count);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDrawRangeElementArrayAPPLE(int mode, UInt32 start, UInt32 end, Int32 first, Int32 count)
        {
            Functions.glDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
        }

        public static 
        void glDrawRangeElementArrayAPPLE(int mode, Int32 start, Int32 end, Int32 first, Int32 count)
        {
            Functions.glDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
        }

        public static 
        void glMultiDrawElementArrayAPPLE(int mode, Int32[] first, Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawElementArrayAPPLE(int mode, ref Int32 first, ref Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Functions.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawElementArrayAPPLE(int mode, IntPtr first, IntPtr count, Int32 primcount)
        {
            unsafe
            {
                Functions.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiDrawRangeElementArrayAPPLE(int mode, UInt32 start, UInt32 end, Int32[] first, Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawRangeElementArrayAPPLE(int mode, Int32 start, Int32 end, Int32[] first, Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Functions.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiDrawRangeElementArrayAPPLE(int mode, UInt32 start, UInt32 end, ref Int32 first, ref Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Functions.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        public static 
        void glMultiDrawRangeElementArrayAPPLE(int mode, Int32 start, Int32 end, ref Int32 first, ref Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Functions.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glMultiDrawRangeElementArrayAPPLE(int mode, UInt32 start, UInt32 end, IntPtr first, IntPtr count, Int32 primcount)
        {
            unsafe
            {
                Functions.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
            }
        }

        public static 
        void glMultiDrawRangeElementArrayAPPLE(int mode, Int32 start, Int32 end, IntPtr first, IntPtr count, Int32 primcount)
        {
            unsafe
            {
                Functions.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenFencesAPPLE(Int32 n, [Out] UInt32[] fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = fences)
                {
                    Functions.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glGenFencesAPPLE(Int32 n, [Out] Int32[] fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = fences)
                {
                    Functions.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenFencesAPPLE(Int32 n, [Out] out UInt32 fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = &fences)
                {
                    Functions.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    fences = *fences_ptr;
                }
            }
        }

        public static 
        void glGenFencesAPPLE(Int32 n, [Out] out Int32 fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = &fences)
                {
                    Functions.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    fences = *fences_ptr;
                }
            }
        }

        public static 
        void glGenFencesAPPLE(Int32 n, [Out] IntPtr fences)
        {
            unsafe
            {
                Functions.glGenFencesAPPLE((Int32)n, (UInt32*)fences);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteFencesAPPLE(Int32 n, UInt32[] fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = fences)
                {
                    Functions.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glDeleteFencesAPPLE(Int32 n, Int32[] fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = fences)
                {
                    Functions.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteFencesAPPLE(Int32 n, ref UInt32 fences)
        {
            unsafe
            {
                fixed (UInt32* fences_ptr = &fences)
                {
                    Functions.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glDeleteFencesAPPLE(Int32 n, ref Int32 fences)
        {
            unsafe
            {
                fixed (Int32* fences_ptr = &fences)
                {
                    Functions.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                }
            }
        }

        public static 
        void glDeleteFencesAPPLE(Int32 n, IntPtr fences)
        {
            unsafe
            {
                Functions.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glSetFenceAPPLE(UInt32 fence)
        {
            Functions.glSetFenceAPPLE((UInt32)fence);
        }

        public static 
        void glSetFenceAPPLE(Int32 fence)
        {
            Functions.glSetFenceAPPLE((UInt32)fence);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsFenceAPPLE(UInt32 fence)
        {
            return Functions.glIsFenceAPPLE((UInt32)fence);
        }

        public static 
        bool glIsFenceAPPLE(Int32 fence)
        {
            return Functions.glIsFenceAPPLE((UInt32)fence);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glTestFenceAPPLE(UInt32 fence)
        {
            return Functions.glTestFenceAPPLE((UInt32)fence);
        }

        public static 
        bool glTestFenceAPPLE(Int32 fence)
        {
            return Functions.glTestFenceAPPLE((UInt32)fence);
        }

        [System.CLSCompliant(false)]
        public static 
        void glFinishFenceAPPLE(UInt32 fence)
        {
            Functions.glFinishFenceAPPLE((UInt32)fence);
        }

        public static 
        void glFinishFenceAPPLE(Int32 fence)
        {
            Functions.glFinishFenceAPPLE((UInt32)fence);
        }

        [System.CLSCompliant(false)]
        public static 
        bool glTestObjectAPPLE(int @object, UInt32 name)
        {
            return Functions.glTestObjectAPPLE((int)@object, (UInt32)name);
        }

        public static 
        bool glTestObjectAPPLE(int @object, Int32 name)
        {
            return Functions.glTestObjectAPPLE((int)@object, (UInt32)name);
        }

        public static 
        void glFinishObjectAPPLE(int @object, Int32 name)
        {
            Functions.glFinishObjectAPPLE((int)@object, (Int32)name);
        }

        [System.CLSCompliant(false)]
        public static 
        void glBindVertexArrayAPPLE(UInt32 array)
        {
            Functions.glBindVertexArrayAPPLE((UInt32)array);
        }

        public static 
        void glBindVertexArrayAPPLE(Int32 array)
        {
            Functions.glBindVertexArrayAPPLE((UInt32)array);
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteVertexArraysAPPLE(Int32 n, UInt32[] arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Functions.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        public static 
        void glDeleteVertexArraysAPPLE(Int32 n, Int32[] arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Functions.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glDeleteVertexArraysAPPLE(Int32 n, ref UInt32 arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Functions.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        public static 
        void glDeleteVertexArraysAPPLE(Int32 n, ref Int32 arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Functions.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        public static 
        void glDeleteVertexArraysAPPLE(Int32 n, IntPtr arrays)
        {
            unsafe
            {
                Functions.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenVertexArraysAPPLE(Int32 n, [Out] UInt32[] arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Functions.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        public static 
        void glGenVertexArraysAPPLE(Int32 n, [Out] Int32[] arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Functions.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        public static 
        void glGenVertexArraysAPPLE(Int32 n, [Out] out UInt32 arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Functions.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
        }

        public static 
        void glGenVertexArraysAPPLE(Int32 n, [Out] out Int32 arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Functions.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
        }

        public static 
        void glGenVertexArraysAPPLE(Int32 n, [Out] IntPtr arrays)
        {
            unsafe
            {
                Functions.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
            }
        }

        [System.CLSCompliant(false)]
        public static 
        bool glIsVertexArrayAPPLE(UInt32 array)
        {
            return Functions.glIsVertexArrayAPPLE((UInt32)array);
        }

        public static 
        bool glIsVertexArrayAPPLE(Int32 array)
        {
            return Functions.glIsVertexArrayAPPLE((UInt32)array);
        }

        public static 
        void glVertexArrayRangeAPPLE(Int32 length, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
            }
        }

        public static 
        void glVertexArrayRangeAPPLE(Int32 length, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glFlushVertexArrayRangeAPPLE(Int32 length, [Out] IntPtr pointer)
        {
            unsafe
            {
                Functions.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
            }
        }

        public static 
        void glFlushVertexArrayRangeAPPLE(Int32 length, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        public static 
        void glVertexArrayParameteriAPPLE(int pname, Int32 param)
        {
            Functions.glVertexArrayParameteriAPPLE((int)pname, (Int32)param);
        }

        public static 
        void glBufferParameteriAPPLE(int target, int pname, Int32 param)
        {
            Functions.glBufferParameteriAPPLE((int)target, (int)pname, (Int32)param);
        }

        public static 
        void glFlushMappedBufferRangeAPPLE(int target, IntPtr offset, IntPtr size)
        {
            Functions.glFlushMappedBufferRangeAPPLE((int)target, (IntPtr)offset, (IntPtr)size);
        }

        public static 
        void glStringMarkerGREMEDY(Int32 len, IntPtr @string)
        {
            unsafe
            {
                Functions.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string);
            }
        }

        public static 
        void glStringMarkerGREMEDY(Int32 len, [In, Out] object @string)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Functions.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }
        }

        public static 
        void glFrameTerminatorGREMEDY()
        {
            Functions.glFrameTerminatorGREMEDY();
        }

	public static Delegate? GetDelegate(string name, Type signature)
	{
		return GetExtensionDelegate(name, signature);
	}

	internal static Delegate? GetExtensionDelegate(string name, Type signature)
	{
		var address = GetAddress(name);

		return address == IntPtr.Zero ? null : Marshal.GetDelegateForFunctionPointer(address, signature);
	}

	private static IntPtr GetAddress(string function)
	{
		if (_getProcAddress == null)
		{
			if (OperatingSystem.IsWindows())
			{
				_getProcAddress = new GetProcAddressWindows();
			}
			else if (OperatingSystem.IsLinux())
			{
				_getProcAddress = new GetProcAddressX11();
			}
			else if (OperatingSystem.IsMacOS())
			{
				_getProcAddress = new GetProcAddressOSX();
			}
			else
			{
				throw new PlatformNotSupportedException(
					"Extension loading is only supported under Mac OS X, Unix/X11 and Windows.");
			}
		}

		return _getProcAddress.GetProcAddress(function);
	}
}